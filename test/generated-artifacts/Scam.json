{
	"schemaVersion": "2.0.0",
	"contractName": "Scam",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhoDenominator",
						"type": "uint256"
					}
				],
				"name": "init",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50611aee806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c6590a146100515780639c8f9f2314610051578063a5843f0814610066578063df791e5014610079575b600080fd5b61006461005f3660046116f0565b61008c565b005b610064610074366004611708565b61008f565b6100646100873660046116b0565b6100e5565b50565b8160010181146100d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb9061174c565b60405180910390fd5b6100de828261025c565b6007555050565b6100ed611623565b6100f56102fd565b9050600061010283610390565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156101665750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156101855750505050604082015160608301516080840151600161022e565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156101dd5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156101fc5785606001519350856040015192508560a00151915061022e565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906117ba565b600061023d858585898b6103ec565b905050505050505050610257565b9063ffffffff61052916565b505050565b600080831215610298576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906119be565b60008212156102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906117f1565b6102f66102f0846f80000000000000000000000000000000610588565b836105fe565b9392505050565b610305611623565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c5461016082015290565b6000808212156103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611885565b6103e6826f80000000000000000000000000000000610588565b92915050565b6000806103ff8787878660e001516106cd565b905060009150506104a3565b86610120015181101561049b576000610424858561079f565b9050600061044061043b838d63ffffffff6107c716565b6107f0565b905060006104776104578c8563ffffffff61052916565b61046b8561024b898763ffffffff61052916565b9063ffffffff61057c16565b90508c8113156104895782955061048d565b8296505b50505080600101905061040b565b509193505050505b95945050505050565b6f8000000000000000000000000000000090565b60007f800000000000000000000000000000000000000000000000000000000000000082141561051c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611987565b6102f6838360000361089f565b60006f80000000000000000000000000000000821561055b575065010000000000909105906a80000000000000000000005b60006105678585610588565b905081818161057257fe5b0595945050505050565b60006102f6838361089f565b6000821580610595575081155b156105a2575060006103e6565b50818102818382816105b057fe5b051415806105c75750828282816105c357fe5b0514155b156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611919565b600081610637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611a1b565b7f8000000000000000000000000000000000000000000000000000000000000000831480156106855750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611a52565b8183816106c557fe5b059392505050565b6000806106e86106db6104ac565b849063ffffffff6104c016565b9050600061071461070f87610703888b63ffffffff61052916565b9063ffffffff6107c716565b610915565b90506000610728838363ffffffff61052916565b9050600061073582610fff565b90506000610749888363ffffffff61052916565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6107798661160d565b60405161078a959493929190611729565b60405180910390a19998505050505050505050565b60006102f66107b76107af6104ac565b61046b6104ac565b610703858563ffffffff61057c16565b60006107e16102f0846a8000000000000000000000610588565b65010000000000029392505050565b600080610803838063ffffffff61052916565b90506000610817848363ffffffff61052916565b9050600061082b828063ffffffff61052916565b9050600061083f828063ffffffff61052916565b90506000610853828063ffffffff61052916565b90506000610867828063ffffffff61052916565b9050600061087b828063ffffffff61052916565b9050600061088f828863ffffffff61052916565b985050505050505050505b919050565b8181016000831280156108b25750600082125b80156108bd57508281135b806108de57506000831380156108d35750600082135b80156108de57508281125b156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611950565b60006f80000000000000000000000000000000821315610961576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb9061184e565b6000821361099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611783565b6f800000000000000000000000000000008214156109bb5750600061089a565b640733048c5a82136109ee57507fffffffffffffffffffffffffffffffe01000000000000000000000000000000061089a565b60008060006a01c8464f761647600000008513610a4d577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610aab577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610b0d577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610b71577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610bd5577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610c39577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610c9d577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610d01577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610d65577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610ddb57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610e0c57fe5b05840193506f8000000000000000000000000000000081830281610e2c57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610e5d57fe5b05840193506f8000000000000000000000000000000081830281610e7d57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281610eae57fe5b05840193506f8000000000000000000000000000000081830281610ece57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281610eff57fe5b05840193506f8000000000000000000000000000000081830281610f1f57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281610f5057fe5b05840193506f8000000000000000000000000000000081830281610f7057fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281610fa157fe5b05840193506f8000000000000000000000000000000081830281610fc157fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281610ff257fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe0100000000000000000000000000000008212156110315750600061089a565b8161104d57506f8000000000000000000000000000000061089a565b6000821315611088576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906118e2565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816110f457fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161112157fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161114d57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161117957fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816111a557fe5b059050806536e0f639b80002830192506f80000000000000000000000000000000828202816111d057fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816111fb57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161122557fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161124f57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161127957fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816112a257fe5b059050806301a9d48002830192506f80000000000000000000000000000000828202816112cb57fe5b05905080621c638002830192506f80000000000000000000000000000000828202816112f357fe5b059050806201c63802830192506f800000000000000000000000000000008282028161131b57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161134257fe5b0590508061017c02830192506f800000000000000000000000000000008282028161136957fe5b05905080601402830192506f800000000000000000000000000000008282028161138f57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156113fe577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611440577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561148257701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156114c4577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156115065770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611546576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611586576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156115c6576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611606576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000606084860312156116c4578283fd5b83356116cf81611a89565b925060208401356116df81611a89565b929592945050506040919091013590565b600060208284031215611701578081fd5b5035919050565b6000806040838503121561171a578182fd5b50508035926020909101359150565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526015908201527f496e76616c69642076616c756520666f722072686f0000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff8116811461008c57600080fdfea365627a7a72315820f80e2cff9804becdd096fe1c3487f21a744c9689543f0e82cc4855f3cd083cf76c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AEE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51C6590A EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0xA5843F08 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x79 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x16F0 JUMP JUMPDEST PUSH2 0x8C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x1708 JUMP JUMPDEST PUSH2 0x8F JUMP JUMPDEST PUSH2 0x64 PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B0 JUMP JUMPDEST PUSH2 0xE5 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 EQ PUSH2 0xD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE DUP3 DUP3 PUSH2 0x25C JUMP JUMPDEST PUSH1 0x7 SSTORE POP POP JUMP JUMPDEST PUSH2 0xED PUSH2 0x1623 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x2FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x102 DUP4 PUSH2 0x390 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x166 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x185 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x22E JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1DD JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1FC JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x22E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x17BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23D DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x3EC JUMP JUMPDEST SWAP1 POP POP POP POP POP POP POP POP PUSH2 0x257 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x298 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0x2F0 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x588 JUMP JUMPDEST DUP4 PUSH2 0x5FE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x305 PUSH2 0x1623 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x3E6 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x588 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FF DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0x6CD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x4A3 JUMP JUMPDEST DUP7 PUSH2 0x120 ADD MLOAD DUP2 LT ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 PUSH2 0x424 DUP6 DUP6 PUSH2 0x79F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x440 PUSH2 0x43B DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x7C7 AND JUMP JUMPDEST PUSH2 0x7F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x477 PUSH2 0x457 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST PUSH2 0x46B DUP6 PUSH2 0x24B DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x57C AND JUMP JUMPDEST SWAP1 POP DUP13 DUP2 SGT ISZERO PUSH2 0x489 JUMPI DUP3 SWAP6 POP PUSH2 0x48D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x40B JUMP JUMPDEST POP SWAP2 SWAP4 POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1987 JUMP JUMPDEST PUSH2 0x2F6 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x89F JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x55B JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x567 DUP6 DUP6 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x572 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F6 DUP4 DUP4 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x595 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x5A2 JUMPI POP PUSH1 0x0 PUSH2 0x3E6 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x5B0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x5C7 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x5C3 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x685 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1A52 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E8 PUSH2 0x6DB PUSH2 0x4AC JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x4C0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x714 PUSH2 0x70F DUP8 PUSH2 0x703 DUP9 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7C7 AND JUMP JUMPDEST PUSH2 0x915 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x728 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x735 DUP3 PUSH2 0xFFF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x749 DUP9 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x779 DUP7 PUSH2 0x160D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F6 PUSH2 0x7B7 PUSH2 0x7AF PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x46B PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x703 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x57C AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E1 PUSH2 0x2F0 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x588 JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x803 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x817 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x82B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x83F DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x853 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x867 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x88F DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x8B2 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x8BD JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x8DE JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x8D3 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x8DE JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1950 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x184E JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x99B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1783 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x9BB JUMPI POP PUSH1 0x0 PUSH2 0x89A JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x9EE JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xA4D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xAAB JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xB0D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xB71 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xBD5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xC39 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xC9D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xD01 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xD65 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDDB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xE0C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE2C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xE5D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE7D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0xEAE JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xECE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0xEFF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF1F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0xF50 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF70 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0xFA1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xFC1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0xFF2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1031 JUMPI POP PUSH1 0x0 PUSH2 0x89A JUMP JUMPDEST DUP2 PUSH2 0x104D JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x18E2 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10F4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1121 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x114D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1179 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11A5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11FB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1225 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x124F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1279 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12A2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12CB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12F3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x131B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1342 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1369 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x138F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13FE JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1440 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1482 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14C4 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1506 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1546 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1586 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x15C6 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1606 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16C4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x16CF DUP2 PUSH2 0x1A89 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x16DF DUP2 PUSH2 0x1A89 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1701 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x171A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076616C756520666F722072686F0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xF8 0xE 0x2C SELFDESTRUCT SWAP9 DIV 0xBE 0xCD 0xD0 SWAP7 INVALID SHR CALLVALUE DUP8 CALLCODE BYTE PUSH21 0x4C9689543F0E82CC4855F3CD083CF76C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x634300050D0040000000000000 ",
				"sourceMap": "148:522:0:-;;;210:98;8:9:-1;5:2;;;30:1;27;20:12;5:2;210:98:0;148:522;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c6590a146100515780639c8f9f2314610051578063a5843f0814610066578063df791e5014610079575b600080fd5b61006461005f3660046116f0565b61008c565b005b610064610074366004611708565b61008f565b6100646100873660046116b0565b6100e5565b50565b8160010181146100d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb9061174c565b60405180910390fd5b6100de828261025c565b6007555050565b6100ed611623565b6100f56102fd565b9050600061010283610390565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156101665750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156101855750505050604082015160608301516080840151600161022e565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156101dd5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156101fc5785606001519350856040015192508560a00151915061022e565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906117ba565b600061023d858585898b6103ec565b905050505050505050610257565b9063ffffffff61052916565b505050565b600080831215610298576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906119be565b60008212156102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906117f1565b6102f66102f0846f80000000000000000000000000000000610588565b836105fe565b9392505050565b610305611623565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c5461016082015290565b6000808212156103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611885565b6103e6826f80000000000000000000000000000000610588565b92915050565b6000806103ff8787878660e001516106cd565b905060009150506104a3565b86610120015181101561049b576000610424858561079f565b9050600061044061043b838d63ffffffff6107c716565b6107f0565b905060006104776104578c8563ffffffff61052916565b61046b8561024b898763ffffffff61052916565b9063ffffffff61057c16565b90508c8113156104895782955061048d565b8296505b50505080600101905061040b565b509193505050505b95945050505050565b6f8000000000000000000000000000000090565b60007f800000000000000000000000000000000000000000000000000000000000000082141561051c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611987565b6102f6838360000361089f565b60006f80000000000000000000000000000000821561055b575065010000000000909105906a80000000000000000000005b60006105678585610588565b905081818161057257fe5b0595945050505050565b60006102f6838361089f565b6000821580610595575081155b156105a2575060006103e6565b50818102818382816105b057fe5b051415806105c75750828282816105c357fe5b0514155b156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611919565b600081610637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611a1b565b7f8000000000000000000000000000000000000000000000000000000000000000831480156106855750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611a52565b8183816106c557fe5b059392505050565b6000806106e86106db6104ac565b849063ffffffff6104c016565b9050600061071461070f87610703888b63ffffffff61052916565b9063ffffffff6107c716565b610915565b90506000610728838363ffffffff61052916565b9050600061073582610fff565b90506000610749888363ffffffff61052916565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6107798661160d565b60405161078a959493929190611729565b60405180910390a19998505050505050505050565b60006102f66107b76107af6104ac565b61046b6104ac565b610703858563ffffffff61057c16565b60006107e16102f0846a8000000000000000000000610588565b65010000000000029392505050565b600080610803838063ffffffff61052916565b90506000610817848363ffffffff61052916565b9050600061082b828063ffffffff61052916565b9050600061083f828063ffffffff61052916565b90506000610853828063ffffffff61052916565b90506000610867828063ffffffff61052916565b9050600061087b828063ffffffff61052916565b9050600061088f828863ffffffff61052916565b985050505050505050505b919050565b8181016000831280156108b25750600082125b80156108bd57508281135b806108de57506000831380156108d35750600082135b80156108de57508281125b156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611950565b60006f80000000000000000000000000000000821315610961576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb9061184e565b6000821361099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb90611783565b6f800000000000000000000000000000008214156109bb5750600061089a565b640733048c5a82136109ee57507fffffffffffffffffffffffffffffffe01000000000000000000000000000000061089a565b60008060006a01c8464f761647600000008513610a4d577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610aab577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610b0d577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610b71577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610bd5577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610c39577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610c9d577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610d01577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610d65577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610ddb57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610e0c57fe5b05840193506f8000000000000000000000000000000081830281610e2c57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610e5d57fe5b05840193506f8000000000000000000000000000000081830281610e7d57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281610eae57fe5b05840193506f8000000000000000000000000000000081830281610ece57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281610eff57fe5b05840193506f8000000000000000000000000000000081830281610f1f57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281610f5057fe5b05840193506f8000000000000000000000000000000081830281610f7057fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281610fa157fe5b05840193506f8000000000000000000000000000000081830281610fc157fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281610ff257fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe0100000000000000000000000000000008212156110315750600061089a565b8161104d57506f8000000000000000000000000000000061089a565b6000821315611088576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cb906118e2565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816110f457fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161112157fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161114d57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161117957fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816111a557fe5b059050806536e0f639b80002830192506f80000000000000000000000000000000828202816111d057fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816111fb57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161122557fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161124f57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161127957fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816112a257fe5b059050806301a9d48002830192506f80000000000000000000000000000000828202816112cb57fe5b05905080621c638002830192506f80000000000000000000000000000000828202816112f357fe5b059050806201c63802830192506f800000000000000000000000000000008282028161131b57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161134257fe5b0590508061017c02830192506f800000000000000000000000000000008282028161136957fe5b05905080601402830192506f800000000000000000000000000000008282028161138f57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156113fe577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611440577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561148257701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156114c4577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156115065770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611546576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611586576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156115c6576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611606576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000606084860312156116c4578283fd5b83356116cf81611a89565b925060208401356116df81611a89565b929592945050506040919091013590565b600060208284031215611701578081fd5b5035919050565b6000806040838503121561171a578182fd5b50508035926020909101359150565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526015908201527f496e76616c69642076616c756520666f722072686f0000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff8116811461008c57600080fdfea365627a7a72315820f80e2cff9804becdd096fe1c3487f21a744c9689543f0e82cc4855f3cd083cf76c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51C6590A EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0xA5843F08 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x79 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x16F0 JUMP JUMPDEST PUSH2 0x8C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x1708 JUMP JUMPDEST PUSH2 0x8F JUMP JUMPDEST PUSH2 0x64 PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B0 JUMP JUMPDEST PUSH2 0xE5 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 EQ PUSH2 0xD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE DUP3 DUP3 PUSH2 0x25C JUMP JUMPDEST PUSH1 0x7 SSTORE POP POP JUMP JUMPDEST PUSH2 0xED PUSH2 0x1623 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x2FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x102 DUP4 PUSH2 0x390 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x166 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x185 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x22E JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1DD JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1FC JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x22E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x17BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23D DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x3EC JUMP JUMPDEST SWAP1 POP POP POP POP POP POP POP POP PUSH2 0x257 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x298 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0x2F0 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x588 JUMP JUMPDEST DUP4 PUSH2 0x5FE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x305 PUSH2 0x1623 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x3E6 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x588 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FF DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0x6CD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x4A3 JUMP JUMPDEST DUP7 PUSH2 0x120 ADD MLOAD DUP2 LT ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 PUSH2 0x424 DUP6 DUP6 PUSH2 0x79F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x440 PUSH2 0x43B DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x7C7 AND JUMP JUMPDEST PUSH2 0x7F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x477 PUSH2 0x457 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST PUSH2 0x46B DUP6 PUSH2 0x24B DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x57C AND JUMP JUMPDEST SWAP1 POP DUP13 DUP2 SGT ISZERO PUSH2 0x489 JUMPI DUP3 SWAP6 POP PUSH2 0x48D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x40B JUMP JUMPDEST POP SWAP2 SWAP4 POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1987 JUMP JUMPDEST PUSH2 0x2F6 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x89F JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x55B JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x567 DUP6 DUP6 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x572 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F6 DUP4 DUP4 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x595 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x5A2 JUMPI POP PUSH1 0x0 PUSH2 0x3E6 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x5B0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x5C7 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x5C3 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x685 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1A52 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E8 PUSH2 0x6DB PUSH2 0x4AC JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x4C0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x714 PUSH2 0x70F DUP8 PUSH2 0x703 DUP9 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7C7 AND JUMP JUMPDEST PUSH2 0x915 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x728 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x735 DUP3 PUSH2 0xFFF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x749 DUP9 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x779 DUP7 PUSH2 0x160D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F6 PUSH2 0x7B7 PUSH2 0x7AF PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x46B PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x703 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x57C AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E1 PUSH2 0x2F0 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x588 JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x803 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x817 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x82B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x83F DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x853 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x867 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x88F DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x529 AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x8B2 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x8BD JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x8DE JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x8D3 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x8DE JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1950 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x184E JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x99B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x1783 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x9BB JUMPI POP PUSH1 0x0 PUSH2 0x89A JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x9EE JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xA4D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xAAB JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xB0D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xB71 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xBD5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xC39 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xC9D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xD01 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xD65 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDDB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xE0C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE2C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xE5D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE7D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0xEAE JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xECE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0xEFF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF1F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0xF50 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF70 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0xFA1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xFC1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0xFF2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1031 JUMPI POP PUSH1 0x0 PUSH2 0x89A JUMP JUMPDEST DUP2 PUSH2 0x104D JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB SWAP1 PUSH2 0x18E2 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10F4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1121 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x114D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1179 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11A5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11FB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1225 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x124F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1279 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12A2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12CB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12F3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x131B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1342 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1369 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x138F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13FE JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1440 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1482 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14C4 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1506 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1546 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1586 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x15C6 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1606 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16C4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x16CF DUP2 PUSH2 0x1A89 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x16DF DUP2 PUSH2 0x1A89 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1701 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x171A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076616C756520666F722072686F0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xF8 0xE 0x2C SELFDESTRUCT SWAP9 DIV 0xBE 0xCD 0xD0 SWAP7 INVALID SHR CALLVALUE DUP8 CALLCODE BYTE PUSH21 0x4C9689543F0E82CC4855F3CD083CF76C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x634300050D0040000000000000 ",
				"sourceMap": "148:522:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;148:522:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;175:67:1;;;;;;;;;:::i;:::-;;314:354:0;;;;;;;;;:::i;351:2445:3:-;;;;;;;;;:::i;175:67:1:-;;:::o;314:354:0:-;518:12;533:1;518:16;499:14;:36;478:104;;;;;;;;;;;;;;;;;;;;;;611:50;632:12;646:14;611:20;:50::i;:::-;593:15;:68;-1:-1:-1;;314:354:0:o;351:2445:3:-;495:27;;:::i;:::-;525:18;:16;:18::i;:::-;495:48;;605:13;621:28;642:6;621:20;:28::i;:::-;768:14;;605:44;;-1:-1:-1;659:8:3;;;;;;;;755:27;;;;;;;:56;;;;;797:5;:14;;;786:25;;:7;:25;;;755:56;751:417;;;-1:-1:-1;;;;831:7:3;;;;856;;;;885:11;;;;920:4;751:417;;;957:5;:14;;;944:27;;:9;:27;;;:56;;;;-1:-1:-1;986:14:3;;975:25;;;;;;;944:56;941:227;;;1020:5;:7;;;1016:11;;1045:5;:7;;;1041:11;;1074:5;:19;;;1066:27;;941:227;;;1124:33;;;;;;;;;;;941:227;1197:12;1212:105;1233:1;1248;1263:5;1282:6;1302:5;1212:7;:105::i;:::-;1197:120;;1328:7;;;;;;;;;1398:26;:39;:96;:39;:96;:::i;351:2445::-;;;;:::o;4715:386:7:-;4777:8;4820:1;4808;4801:21;4797:116;;;4838:64;;;;;;;;;;;4797:116;4945:1;4933;4926:21;4922:118;;;4963:66;;;;;;;;;;;4922:118;5053:41;5058:24;5070:1;794:66;5058:4;:24::i;:::-;5091:1;5053:4;:41::i;:::-;5049:45;4715:386;-1:-1:-1;;;4715:386:7:o;275:433:2:-;337:27;;:::i;:::-;-1:-1:-1;380:14:2;;;;;;;;388:6;380:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;275:433;:::o;4349:216:7:-;4400:8;4443:1;4431;4424:21;4420:101;;;4461:49;;;;;;;;;;;4420:101;4534:24;4546:1;794:66;4534:4;:24::i;:::-;4530:28;4349:216;-1:-1:-1;;4349:216:7:o;2802:1181:3:-;2977:8;3090:9;3102:125;3154:1;3169;3184:5;3203;:14;;;3102:38;:125::i;:::-;3090:137;;3252:1;3238:16;;;;;3466:483;3490:5;:25;;;3486:1;:29;3466:483;;;3536:10;3549:51;3577:10;3589;3549:27;:51::i;:::-;3536:64;-1:-1:-1;3614:11:3;3628:51;3664:14;3536:64;3672:5;3664:14;:7;:14;:::i;:::-;3628:35;:51::i;:::-;3614:65;-1:-1:-1;3693:10:3;3706:102;3792:15;:6;3803:3;3792:15;:10;:15;:::i;:::-;3706:64;3766:3;3706:38;:11;3739:4;3706:38;:32;:38;:::i;:64::-;:85;:102;:85;:102;:::i;:::-;3693:115;;3832:1;3826:3;:7;3822:117;;;3866:3;3853:16;;3822:117;;;3921:3;3908:16;;3822:117;3466:483;;;3517:3;;;;;3466:483;;;-1:-1:-1;3966:10:3;;-1:-1:-1;;;;2802:1181:3;;;;;;;;:::o;1581:76:7:-;794:66;;1581:76::o;1936:186::-;1992:8;928:66;2016:1;:18;2012:79;;;2050:30;;;;;;;;;;;2012:79;2104:11;2109:1;2113;2112:2;;2104:4;:11::i;2219:252::-;2275:8;794:66;2330:6;;2326:73;;-1:-1:-1;2357:5:7;2352:10;;;;2383:5;2326:73;2409:14;2426:10;2431:1;2434;2426:4;:10::i;:::-;2409:27;;2460:4;2450:7;:14;;;;;;;2219:252;-1:-1:-1;;;;;2219:252:7:o;1748:97::-;1804:8;1828:10;1833:1;1836;1828:4;:10::i;16304:245::-;16360:8;16384:6;;;:16;;-1:-1:-1;16394:6:7;;16384:16;16380:55;;;-1:-1:-1;16423:1:7;16416:8;;16380:55;-1:-1:-1;16448:5:7;;;16452:1;16448;:5;:1;16467:5;;;;;:10;;:24;;;;16490:1;16485;16481;:5;;;;;;:10;;16467:24;16463:80;;;16508:24;;;;;;;;;;;16636:260;16692:8;16716:6;16712:67;;16738:30;;;;;;;;;;;16712:67;928:66;16792:1;:18;:29;;;;;16814:1;16819:2;16814:7;16792:29;16788:83;;;16836:24;;;;;;;;;;;16788:83;16888:1;16884;:5;;;;;;;16636:260;-1:-1:-1;;;16636:260:7:o;367:744:9:-;526:15;557:9;569:32;582:18;:16;:18::i;:::-;569:8;;:32;:12;:32;:::i;:::-;557:44;-1:-1:-1;611:9:9;623:24;:19;640:1;623:12;:5;633:1;623:12;:9;:12;:::i;:::-;:16;:19;:16;:19;:::i;:::-;:22;:24::i;:::-;611:36;-1:-1:-1;657:9:9;669:16;:5;611:36;669:16;:9;:16;:::i;:::-;657:28;;695:9;707:11;:5;:9;:11::i;:::-;695:23;-1:-1:-1;728:10:9;741:16;:5;695:23;741:16;:9;:16;:::i;:::-;728:29;;773:136;810:1;825;840:5;859:8;881:18;:6;:16;:18::i;:::-;773:136;;;;;;;;;;;;;;;;;;;927:6;367:744;-1:-1:-1;;;;;;;;;367:744:9:o;1117:240::-;1218:15;1256:56;1269:42;1292:18;:16;:18::i;:::-;1269;:16;:18::i;:42::-;1256:8;:1;1262;1256:8;:5;:8;:::i;2539:128:7:-;2595:8;2619:33;2624:24;2629:1;2632:15;2624:4;:24::i;2619:33::-;2655:5;2619:41;;2539:128;-1:-1:-1;;;2539:128:7:o;1408:676:9:-;1502:6;;1589:14;1598:4;;1589:14;:8;:14;:::i;:::-;1568:35;-1:-1:-1;1613:16:9;1632:21;:4;1568:35;1632:21;:8;:21;:::i;:::-;1613:40;-1:-1:-1;1663:16:9;1682:24;1613:40;;1682:24;:13;:24;:::i;:::-;1663:43;-1:-1:-1;1716:19:9;1738:24;1663:43;;1738:24;:13;:24;:::i;:::-;1716:46;-1:-1:-1;1772:23:9;1798:30;1716:46;;1798:30;:16;:30;:::i;:::-;1772:56;-1:-1:-1;1838:24:9;1865:38;1772:56;;1865:38;:20;:38;:::i;:::-;1838:65;-1:-1:-1;1913:22:9;1938:40;1838:65;;1938:40;:21;:40;:::i;:::-;1913:65;-1:-1:-1;1988:23:9;2014:30;1913:65;2034:9;2014:30;:19;:30;:::i;:::-;1988:56;-1:-1:-1;;;;;;;;;1408:676:9;;;;:::o;16956:210:7:-;17036:5;;;17012:8;17056:5;;:14;;;;;17069:1;17065;:5;17056:14;:23;;;;;17078:1;17074;:5;17056:23;17055:54;;;;17089:1;17085;:5;:14;;;;;17098:1;17094;:5;17085:14;:23;;;;;17107:1;17103;:5;17085:23;17051:109;;;17125:24;;;;;;;;;;;5352:5160;5397:8;794:66;5421:1;:14;5417:74;;;5451:29;;;;;;;;;;;5417:74;5509:1;5504;:6;5500:66;;5526:29;;;;;;;;;;;5500:66;794;5579:1;:12;5575:51;;;-1:-1:-1;5614:1:7;5607:8;;5575:51;1273:66;5639:1;:15;5635:64;;-1:-1:-1;1453:75:7;5670:18;;5635:64;5709:8;5727;5745;6058:66;6046:1;:79;6042:316;;6141:79;;;;;6267:66;794;6246:11;;:88;6242:92;;6042:316;6402:66;6390:1;:79;6386:316;;6485:79;;;;;6611:66;794;6590:11;;:88;6586:92;;6386:316;6745:66;6733:1;:79;6729:314;;6828:79;;;;;6953:66;794;6932:11;;:88;6928:92;;6729:314;7086:66;7074:1;:79;7070:314;;7169:79;;;;;7294:66;794;7273:11;;:88;7269:92;;7070:314;7427:66;7415:1;:79;7411:314;;7510:79;;;;;7635:66;794;7614:11;;:88;7610:92;;7411:314;7768:66;7756:1;:79;7752:314;;7851:79;;;;;7976:66;7863;7955:11;;:88;7951:92;;7752:314;8111:66;8099:1;:79;8095:318;;8194:79;;;;;8321:66;794;8300:11;;:88;8296:92;;8095:318;8459:66;8447:1;:79;8443:320;;8542:79;;;;;8670:66;794;8649:11;;:88;8645:92;;8443:320;8810:66;8798:1;:79;8794:322;;8893:79;;;;;9022:66;794;9001:11;;:88;8997:92;;8794:322;9281:11;;;;-1:-1:-1;9281:11:7;;-1:-1:-1;794:66:7;9306:5;;;:15;;-1:-1:-1;9384:35:7;9341:39;;;9336:45;;:83;9331:88;;;;794:66;9429:1;9425;:5;:15;;;;;;9421:19;;9532:35;9527:1;9489:35;:39;9484:1;:45;:83;;;;;;9479:88;;;;794:66;9577:1;9573;:5;:15;;;;;;9569:19;;9680:35;9675:1;9637:35;:39;9632:1;:45;:83;;;;;;9627:88;;;;794:66;9725:1;9721;:5;:15;;;;;;9717:19;;9828:35;9823:1;9785:35;:39;9780:1;:45;:83;;;;;;9775:88;;;;794:66;9873:1;9869;:5;:15;;;;;;9865:19;;9976:35;9971:1;9933:35;:39;9928:1;:45;:83;;;;;;9923:88;;;;794:66;10021:1;10017;:5;:15;;;;;;10013:19;;10124:35;10119:1;10081:35;:39;10076:1;:45;:83;;;;;;10071:88;;;;794:66;10169:1;10165;:5;:15;;;;;;10161:19;;10272:35;10267:1;10229:35;:39;10224:1;:45;:83;;;;;;10219:88;;;;794:66;10317:1;10313;:5;:15;;;;;;10309:19;;10420:35;10415:1;10377:35;:39;10372:1;:45;:83;;;;;;10367:88;;;;5352:5160;;;;;;:::o;10609:5613::-;10655:8;1453:75;10679:15;;10675:105;;;-1:-1:-1;10768:1:7;10761:8;;10675:105;10793:6;10789:51;;-1:-1:-1;794:66:7;10815:14;;10789:51;1393:1;10853;:15;10849:77;;;10885:30;;;;;;;;;;;10849:77;794:66;11395;11391:70;;11475:5;;;:15;;;11501:18;11497:22;;11492:27;;;;;11391:70;;11559:5;;;:15;11555:19;;11581:1;11585:18;11581:22;11576:27;;;;794:66;11647:1;11643;:5;:15;;;;;;11639:19;;11665:1;11669:18;11665:22;11660:27;;;;794:66;11731:1;11727;:5;:15;;;;;;11723:19;;11749:1;11753:18;11749:22;11744:27;;;;794:66;11815:1;11811;:5;:15;;;;;;11807:19;;11833:1;11837:18;11833:22;11828:27;;;;794:66;11899:1;11895;:5;:15;;;;;;11891:19;;11917:1;11921:18;11917:22;11912:27;;;;794:66;11983:1;11979;:5;:15;;;;;;11975:19;;12001:1;12005:18;12001:22;11996:27;;;;794:66;12067:1;12063;:5;:15;;;;;;12059:19;;12085:1;12089:18;12085:22;12080:27;;;;794:66;12151:1;12147;:5;:15;;;;;;12143:19;;12169:1;12173:18;12169:22;12164:27;;;;794:66;12235:1;12231;:5;:15;;;;;;12227:19;;12253:1;12257:18;12253:22;12248:27;;;;794:66;12319:1;12315;:5;:15;;;;;;12311:19;;12337:1;12341:18;12337:22;12332:27;;;;794:66;12403:1;12399;:5;:15;;;;;;12395:19;;12421:1;12425:18;12421:22;12416:27;;;;794:66;12487:1;12483;:5;:15;;;;;;12479:19;;12505:1;12509:18;12505:22;12500:27;;;;794:66;12571:1;12567;:5;:15;;;;;;12563:19;;12589:1;12593:18;12589:22;12584:27;;;;794:66;12655:1;12651;:5;:15;;;;;;12647:19;;12673:1;12677:18;12673:22;12668:27;;;;794:66;12739:1;12735;:5;:15;;;;;;12731:19;;12757:1;12761:18;12757:22;12752:27;;;;794:66;12823:1;12819;:5;:15;;;;;;12815:19;;12841:1;12845:18;12841:22;12836:27;;;;794:66;12907:1;12903;:5;:15;;;;;;12899:19;;12925:1;12929:18;12925:22;12920:27;;;;794:66;12991:1;12987;:5;:15;;;;;13221:2;;;;;;13075:18;12987:15;;;13004:27;;;13071:22;:26;;794:66;13071:36;;12987:15;-1:-1:-1;13268:66:7;13257:78;;13256:85;13252:304;;13465:66;13372;13361:78;;:171;13357:175;;13252:304;13600:66;13589:78;;13588:85;13584:304;;13797:66;13704;13693:78;;:171;13689:175;;13584:304;13931:66;13920:78;;13919:85;13915:303;;14128:66;14035;14024:78;;:171;14020:175;;13915:303;14261:66;14250:78;;14249:85;14245:303;;14458:66;14365;14354:78;;:171;14350:175;;14245:303;14591:66;14580:78;;14579:85;14575:303;;14788:66;14695;14684:78;;:171;14680:175;;14575:303;14921:66;14910:78;;14909:85;14905:303;;15118:66;15025;15014:78;;:171;15010:175;;14905:303;15253:66;15242:78;;15241:85;15237:305;;15450:66;15357;15346:78;;:171;15342:175;;15237:305;15588:66;15577:78;;15576:85;15572:306;;15785:66;15692;15681:78;;:171;15677:175;;15572:306;15925:66;15914:78;;15913:85;15909:307;;16122:66;16029;16018:78;;:171;16014:175;;15909:307;10609:5613;;;;;:::o;5164:97::-;794:66;5243:11;;;5164:97::o;148:522:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;279:491:-1:-;;;;417:2;405:9;396:7;392:23;388:32;385:2;;;-1:-1;;423:12;385:2;85:6;72:20;97:33;124:5;97:33;;;475:63;-1:-1;575:2;614:22;;72:20;97:33;72:20;97:33;;;379:391;;583:63;;-1:-1;;;683:2;722:22;;;;209:20;;379:391;777:241;;881:2;869:9;860:7;856:23;852:32;849:2;;;-1:-1;;887:12;849:2;-1:-1;209:20;;843:175;-1:-1;843:175;1025:366;;;1146:2;1134:9;1125:7;1121:23;1117:32;1114:2;;;-1:-1;;1152:12;1114:2;-1:-1;;209:20;;;1304:2;1343:22;;;209:20;;-1:-1;1108:283;7738:639;1736:36;;;8119:2;8104:18;;1736:36;;;;8200:2;8185:18;;1736:36;;;;8281:2;8266:18;;1736:36;8362:3;8347:19;;1736:36;7958:3;7943:19;;7929:448;8384:407;8575:2;8589:47;;;2009:2;8560:18;;;13870:19;2045:66;13910:14;;;2025:87;2131:12;;;8546:245;8798:407;8989:2;9003:47;;;2382:2;8974:18;;;13870:19;2418:66;13910:14;;;2398:87;2504:12;;;8960:245;9212:407;9403:2;9417:47;;;2755:2;9388:18;;;13870:19;2791:66;13910:14;;;2771:87;2877:12;;;9374:245;9626:407;9817:2;9831:47;;;3128:2;9802:18;;;13870:19;3164:66;13910:14;;;3144:87;3265:66;3251:12;;;3244:88;3351:12;;;9788:245;10040:407;10231:2;10245:47;;;3602:2;10216:18;;;13870:19;3638:66;13910:14;;;3618:87;3724:12;;;10202:245;10454:407;10645:2;10659:47;;;3975:2;10630:18;;;13870:19;4011:66;13910:14;;;3991:87;4112:66;4098:12;;;4091:88;4198:12;;;10616:245;10868:407;11059:2;11073:47;;;4449:2;11044:18;;;13870:19;4485:66;13910:14;;;4465:87;4571:12;;;11030:245;11282:407;11473:2;11487:47;;;4822:2;11458:18;;;13870:19;4858:66;13910:14;;;4838:87;4944:12;;;11444:245;11696:407;11887:2;11901:47;;;5195:2;11872:18;;;13870:19;5231:66;13910:14;;;5211:87;5317:12;;;11858:245;12110:407;12301:2;12315:47;;;5568:2;12286:18;;;13870:19;5604:66;13910:14;;;5584:87;5690:12;;;12272:245;12524:407;12715:2;12729:47;;;5941:2;12700:18;;;13870:19;5977:66;13910:14;;;5957:87;6078:66;6064:12;;;6057:88;6164:12;;;12686:245;12938:407;13129:2;13143:47;;;6415:2;13114:18;;;13870:19;6451:66;13910:14;;;6431:87;6537:12;;;13100:245;13352:407;13543:2;13557:47;;;6788:2;13528:18;;;13870:19;6824:66;13910:14;;;6804:87;6910:12;;;13514:245;14700:117;14187:42;14787:5;14176:54;14762:5;14759:35;14749:2;;14808:1;;14798:12"
			}
		}
	},
	"sources": {
		"Scam.sol": {
			"id": 0
		},
		"core/State.sol": {
			"id": 2
		},
		"interfaces/IStructs.sol": {
			"id": 6
		},
		"libs/LibFixedMath.sol": {
			"id": 7
		},
		"libs/LibScamMath.sol": {
			"id": 9
		},
		"core/Liquidity.sol": {
			"id": 1
		},
		"interfaces/IERC20.sol": {
			"id": 4
		},
		"core/Swapper.sol": {
			"id": 3
		},
		"interfaces/IEvents.sol": {
			"id": 5
		},
		"libs/LibSafeMath.sol": {
			"id": 8
		}
	},
	"sourceCodes": {
		"Scam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./core/State.sol\";\nimport \"./core/Liquidity.sol\";\nimport \"./core/Swapper.sol\";\n\n\ncontract Scam is\n    State,\n    Liquidity,\n    Swapper\n{\n\n    constructor()\n        // State()\n        // Liquidity()\n        // Swapper()\n        public\n    {}\n\n    function init(uint256 rhoNumerator, uint256 rhoDenominator)\n        external\n        // onlyOwner\n    {\n        // We require this for fast multiplication.\n        require(\n            rhoDenominator == (rhoNumerator + 1),\n            \"Invalid value for rho\"\n        );\n\n        gState.rhoRatio = LibFixedMath.toFixed(rhoNumerator, rhoDenominator);\n    }\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\n\n\ncontract State {\n\n    IStructs.State gState;\n\n    //// HACKY WORKAROUND 'TIL WE FIX THE FIXED MATH LIB\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n\n/*\n        state.x = LibScamMath.scaleDown(state.x);\n        state.y = LibScamMath.scaleDown(state.y);\n        state.pBarX = LibScamMath.scaleDown(state.pBarX);\n\n        state.rhoRatio = LibScamMath.scaleDown(state.rhoRatio);\n        state.fee = LibScamMath.scaleDown(state.fee);\n*/\n\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n/*\n        gState.x = LibScamMath.scaleUp(state.x);\n        gState.y = LibScamMath.scaleUp(state.y);\n        gState.pBarX = LibScamMath.scaleUp(state.pBarX);\n*/\n\n        gState = state;\n    }\n\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        int256 pBarXInverted;                               // inverted expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 bisectionIterations;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        uint256 l;                                          // total liquidity token balance\n\n    }\n\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**40;\n            base = 2**87;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1 / 2**40), b) * 2**40;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        int term1 = rhoRatio.sub(LibFixedMath.one());\n        int term2 = pBarA.mul(a).div(b).ln();\n        int term3 = term1.mul(term2);\n        int term4 = term3.exp();\n        int result = pBarA.mul(term4);\n\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n\n        return result;\n\n\n\n        /*\n        return pBarA.mul(\n            LibFixedMath.one().sub(rhoRatio)\n            .mul(b.div(pBarA.mul(a)).ln())\n            .exp()\n        );\n        */\n\n\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function scaleUp(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.mul(10**10);\n    }\n\n    function scaleDown(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.div(10**10);\n    }\n}\n",
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\n\n\ncontract Liquidity is\n    IStructs\n{\n\n    function addLiquidity(uint256 amount)\n        external\n    {\n\n    }\n\n    function removeLiquidity(uint256 amount)\n        external\n    {\n\n    }\n\n}\n",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IERC20 {\n\n    function transferFrom() external;\n\n}\n",
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../core/State.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        //external\n        public\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        // Compute initial balances (fixed point).\n        int256 deltaA = LibFixedMath.toFixed(amount);\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = state.pBarXInverted;\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute\n        int256 price = _bisect(\n            a,\n            b,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        return;\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n        .mul(price)\n        .mul(\n            LibFixedMath.one().sub(state.fee)\n        );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        if (deltaB > 0) {\n            deltaB = 0;\n        } /* else if (b.add(deltaB) <= 10^-10) { @todo add\n            deltaB = 10^-10 - b;\n        }\n        */\n\n\n        // @TODO: Handle additional edge cases\n\n        // Update balances\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            /*\n                delta_p_bar_x = (sell_token_id == 'X') * (p_bar_a_prime - p_bar_x) + ...\n                (sell_token_id == 'Y') * (1/p_bar_a_prime - p_bar_x);\n            */\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        // Make transfers\n        //IERC20(fromToken).transferFrom(msg.sender, address(this), uint256(deltaA));\n        //IERC20(toToken).transferFrom(address(this), msg.sender, uint256(deltaB));\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            uint256(deltaA),\n            uint256(deltaB)\n        );\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        return int256(0);\n\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < state.bisectionIterations; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}"
	},
	"sourceTreeHashHex": "0x8cdf4d757e17e59e13571bab13a01bd3edc22bcff928259848bae8f242868c57",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}