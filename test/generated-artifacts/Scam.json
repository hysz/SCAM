{
	"schemaVersion": "2.0.0",
	"contractName": "Scam",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "y_amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "l_amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Allows a sender to deposit tokens into the contract to provide liquidity.",
					"params": {
						"x_amount": "The amount of x that should be taken from the sender's balance.",
						"y_amount": "The amount of x that should be taken from the sender's balance."
					}
				},
				"removeLiquidity(uint256)": {
					"details": "Allows a sender to withdraw tokens by burning liquidity tokens.",
					"params": {
						"l_amount": "The amount of liquidity tokens to burn."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561345a806100326000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639cd441da1161005b5780639cd441da146100f3578063afd46eb514610106578063df791e5014610127578063f2fde38b1461013a57610088565b806370a082311461008d5780637b689036146100b65780638da5cb5b146100cb5780639c8f9f23146100e0575b600080fd5b6100a061009b366004612c55565b61014d565b6040516100ad91906133ec565b60405180910390f35b6100c96100c4366004612c70565b610179565b005b6100d361018f565b6040516100ad9190612d3d565b6100c96100ee366004612d04565b6101ab565b6100c9610101366004612d1c565b6103e8565b61010e6106a1565b6040516100ad9d9c9b9a99989796959493929190612e4b565b6100a0610135366004612ca4565b6106f6565b6100c9610148366004612c55565b6108ad565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60205260409020545b919050565b610181610980565b61018b82826109d3565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6005546003546001916000916101dc91906101d0908690607f1c63ffffffff610b2616565b9063ffffffff610b8316565b9050600061020383600401546101d0607f8660030154901c87610b2690919063ffffffff16565b905061021b836002015461021684610bd0565b610c26565b600284015560038301546102329061021683610bd0565b6003840155336000908152600a84016020526040902054610259908563ffffffff610c9616565b336000908152600a850160205260409020556004830154610280908563ffffffff610cd816565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb916102e2913391879101612e25565b602060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103349190810190612ce4565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb9061038f9033908590600401612e25565b602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e19190810190612ce4565b5050505050565b600160006103fe84670de0b6b3a7640000610d17565b9050600061040f84620f4240610d17565b9050610428836002015482610db190919063ffffffff16565b600384015461043e90849063ffffffff610db116565b1461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f08565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906104db90339030908a90600401612dc6565b602060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052d9190810190612ce4565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061058a90339030908990600401612dc6565b602060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105dc9190810190612ce4565b5060008360020154600014156105fb5750600160048401556000610621565b61061e607f8560020154901c6101d0866004015489610b2690919063ffffffff16565b90505b61062f846002015484610e6f565b600285015560038401546106439083610e6f565b6003850155336000908152600a8501602052604090205461066a908263ffffffff610cd816565b336000908152600a860160205260409020556004840154610691908263ffffffff610cd816565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6000610700612b9b565b610708610e7b565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156107785750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156107a6576000610793868661078d87610f21565b85610f2e565b905061079e816112aa565b925050610866565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108145750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610834576000610829868661078d87610f21565b905061079e816112b7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613078565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161089d959493929190612d85565b60405180910390a1509392505050565b6108b5610980565b73ffffffffffffffffffffffffffffffffffffffff8116610902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613245565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906109749033908490612d5e565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061300a565b565b60015460ff1615610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613041565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610a9760636064610d17565b60065560636007819055610aac906064610d17565b600855610abc6005612710610d17565b600955610ae4610ad06001620f42406112c4565b610ad86112e3565b9063ffffffff610c2616565b600c55610af56127156103e86112c4565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610b3557506000610b7d565b82820282848281610b4257fe5b0414610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906131d7565b90505b92915050565b600081610bbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f65565b6000828481610bc757fe5b04949350505050565b600080821215610c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061317a565b610b7d826f800000000000000000000000000000006112f7565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906132ea565b610c8f838360000361136d565b9392505050565b600082821115610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f9c565b50900390565b600082820183811015610b7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612ed1565b600080831215610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613321565b6000821215610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906130af565b610c8f610dab846f800000000000000000000000000000006112f7565b836113e3565b600080610de26f80000000000000000000000000000000610ddd610dd4876114b2565b610ddd876114b2565b6112f7565b90506000610dfb610df2866114c8565b610ddd866114b2565b90506000610e14610e0b876114b2565b610ddd876114c8565b90506000610e46610e30610e27896114c8565b610ddd896114c8565b6f800000000000000000000000000000006113e3565b9050610e64610e5e610e58868661136d565b8461136d565b8261136d565b979650505050505050565b6000610c8f838361136d565b610e83612b9b565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610b7d826012611505565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a81169116148015610f945750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b15610fb357505050506060820151608083015160c08401516001611053565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110215750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108345785608001519350856060015192506110508660c001516110446112e3565b9063ffffffff61151416565b91505b60006110668585858a610100015161158e565b90506000611078868684878d8d611644565b905060006110ac6110908a6101200151610ad86112e3565b6110a08c8563ffffffff610db116565b9063ffffffff610db116565b90506110bf60008263ffffffff610c2616565b905060006110d16001620186a06112c4565b90506000821261110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613143565b8061111e888463ffffffff610e6f16565b1361113657611133818863ffffffff610c2616565b91505b60006111568b61014001516111496117ab565b8d6101600151888b6117af565b6101808c015190915061116f908863ffffffff610db116565b811315611193576101808b015161118c908863ffffffff610db116565b90506111cc565b866111ac8c610180015183610db190919063ffffffff16565b12156111cc576101808b01516111c990889063ffffffff61151416565b90505b6111d46117ab565b6101408c01528515611216576111f0898d63ffffffff610e6f16565b60608c0152611205888463ffffffff610e6f16565b60808c015260c08b01819052611252565b611226888463ffffffff610e6f16565b60608c015261123b898d63ffffffff610e6f16565b60808c015261124c816110446112e3565b60c08c01525b61125b8b611890565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161128e93929190612df7565b60405180910390a150506000039b9a5050505050505050505050565b6000610b7d8260066118b2565b6000610b7d8260126118b2565b6000610c8f610dab846f800000000000000000000000000000006112f7565b6f8000000000000000000000000000000090565b6000821580611304575081155b1561131157506000610b7d565b508181028183828161131f57fe5b0514158061133657508282828161133257fe5b0514155b15610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061327c565b8181016000831280156113805750600082125b801561138b57508281135b806113ac57506000831380156113a15750600082135b80156113ac57508281125b15610b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906132b3565b60008161141c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061337e565b7f80000000000000000000000000000000000000000000000000000000000000008314801561146a5750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156114a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906133b5565b8183816114aa57fe5b059392505050565b6f80000000000000000000000000000000900590565b60008082136114ef576f7fffffffffffffffffffffffffffffff8260000316600003610b7d565b506f7fffffffffffffffffffffffffffffff1690565b6000610c8f8383600a0a610d17565b600080611520846114b2565b9050801561156b57611563611534856114b2565b610ddd61155d87610ddd6f800000000000000000000000000000006115588b6114b2565b6113e3565b866113e3565b915050610b7d565b611563611588856f800000000000000000000000000000006112f7565b846113e3565b6000806115a1848763ffffffff610db116565b905060006115b5868363ffffffff61151416565b905060006115c9838863ffffffff61151416565b905060006115d986610ad86112e3565b905060006115e56112e3565b841215611608576116016115fc836110a0876118c2565b611fac565b9050611626565b61162361161b6115fc846110a0876118c2565b6110446112e3565b90505b611636818963ffffffff610db116565b9a9950505050505050505050565b60008061169961168c61167c6116608a8863ffffffff610db116565b6116708c8c63ffffffff610db116565b9063ffffffff610e6f16565b611044898863ffffffff610db116565b899063ffffffff610db116565b905060006116bd6116b08a8763ffffffff610e6f16565b8a9063ffffffff61151416565b905060006116cf8a8a8a8a8a8a6125ba565b905060006116e28b8b8b8b8b878c6126ad565b905060006116f68c8c8c8c8c8a8a8e61274d565b905061170882828961012001516127e6565b1561178057600061171c838388888c612880565b809250819350505061173483838a61012001516127e6565b1561177e57600061174984848989868e612923565b6101208d01519397509195509350915061176690859085906127e6565b1561177c57611779848484848b8b6129a5565b93505b505b505b61178982612a55565b915061179b828b63ffffffff610db116565b9c9b505050505050505050505050565b4390565b6000806117bd878703610bd0565b905060006117dd6115fc6117d0886118c2565b849063ffffffff610db116565b905060006117ed82610ad86112e3565b90506000611801878363ffffffff610db116565b90506000611815878563ffffffff610db116565b9050600061184161182c858a63ffffffff610db116565b61183c878c63ffffffff610db116565b610e6f565b90506000611859826110448c8c63ffffffff610db116565b9050600061187e61186a6002612a77565b61104484611670898963ffffffff610e6f16565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610c8f82600a0a84026114b2565b60006f8000000000000000000000000000000082131561190e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061310c565b60008213611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612fd3565b6f8000000000000000000000000000000082141561196857506000610174565b640733048c5a821361199b57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610174565b60008060006a01c8464f7616476000000085136119fa577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611a58577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611aba577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611b1e577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611b82577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611be6577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513611c4a577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611cae577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611d12577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281611d8857fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281611db957fe5b05840193506f8000000000000000000000000000000081830281611dd957fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611e0a57fe5b05840193506f8000000000000000000000000000000081830281611e2a57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611e5b57fe5b05840193506f8000000000000000000000000000000081830281611e7b57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611eac57fe5b05840193506f8000000000000000000000000000000081830281611ecc57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611efd57fe5b05840193506f8000000000000000000000000000000081830281611f1d57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611f4e57fe5b05840193506f8000000000000000000000000000000081830281611f6e57fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611f9f57fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611fde57506000610174565b81611ffa57506f80000000000000000000000000000000610174565b6000821315612035576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061320e565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816120a157fe5b05905080670168244fdac7800002830192506f80000000000000000000000000000000828202816120ce57fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816120fa57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161212657fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161215257fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161217d57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816121a857fe5b05905080649c197dcc0002830192506f80000000000000000000000000000000828202816121d257fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816121fc57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161222657fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161224f57fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161227857fe5b05905080621c638002830192506f80000000000000000000000000000000828202816122a057fe5b059050806201c63802830192506f80000000000000000000000000000000828202816122c857fe5b05905080611ab802830192506f80000000000000000000000000000000828202816122ef57fe5b0590508061017c02830192506f800000000000000000000000000000008282028161231657fe5b05905080601402830192506f800000000000000000000000000000008282028161233c57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156123ab577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b7008000000000000000000000000000000008416156123ed577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561242f57701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612471577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156124b35770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156124f3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612533576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612573576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156125b3576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806125c76002612a77565b905060006126066125e689866101000151610db190919063ffffffff16565b610ad8896110a08d6110a08a610100015189610c2690919063ffffffff16565b9050600061262c6126238a6110a08d6110a08d6110a06004612a77565b61167084612a93565b9050600061264884611044612643856110446112e3565b6118c2565b600003905060008082131561266b5761266661161b83600003611fac565b612674565b61267482611fac565b9050600061269f61268b878d63ffffffff610db116565b61104460008890038563ffffffff610e6f16565b9050600061187e8a83612a9f565b6000806126e06126d36126c6868a63ffffffff610db116565b8a9063ffffffff610c2616565b8a9063ffffffff610db116565b905060006126f76126d38b8763ffffffff610e6f16565b9050600061270e612643848463ffffffff61151416565b90506000612727826110a0886101000151610ad86112e3565b9050600061273c896110448a6110a086611fac565b9d9c50505050505050505050505050565b600080612760848663ffffffff61151416565b9050600061278e61277c866110a0876101000151610ad86112e3565b6101008601519063ffffffff610e6f16565b905060006127b26127aa886110a0886101000151610ad86112e3565b6116706112e3565b905060006127c6838363ffffffff61151416565b90508084126127d5578061273c565b50919b9a5050505050505050505050565b6000806127f9848663ffffffff610c2616565b905060006128096001600a6112c4565b9050600061283961282c61281f88610ad86112e3565b879063ffffffff610e6f16565b839063ffffffff610db116565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a822838260405161286c929190612ec3565b60405180910390a190911395945050505050565b60008061288c87612ab6565b905060006128be6128a8866110a0876101000151610ad86112e3565b610100860151611670908563ffffffff610db116565b905060006128eb6128de8a6110a08a6110a08a6101000151610ad86112e3565b849063ffffffff610e6f16565b90506000612903826110448c8663ffffffff610db116565b90508881126129125788612914565b805b94505050509550959350505050565b60008060008060006129358b8b612b55565b9050600061294282612ab6565b905060006129666129598c8563ffffffff610db116565b8b9063ffffffff610c2616565b905080821361298b57828c8361297b8f612ab6565b9650965096509650505050612998565b508b955090935086925090505b9650965096509692505050565b6000806129ee6129cb6129be898b63ffffffff610c2616565b859063ffffffff610db116565b6116706129de898b63ffffffff610db116565b610ad8898d63ffffffff610db116565b90506000612a25612a15612a088a8c63ffffffff610c2616565b879063ffffffff610db116565b611670888a63ffffffff610c2616565b90506000612a39838363ffffffff61151416565b9050898113612a485789611636565b9998505050505050505050565b6000612a636009600a6112c4565b8212612a6f5781610b7d565b506000919050565b6000610b7d826f800000000000000000000000000000006112f7565b6000610b7d8283610db1565b600081831315612aaf5781610c8f565b5090919050565b600080612ac9838063ffffffff610db116565b90506000612add848363ffffffff610db116565b90506000612af1828063ffffffff610db116565b90506000612b05828063ffffffff610db116565b90506000612b19828063ffffffff610db116565b90506000612b2d828063ffffffff610db116565b90506000612b41828863ffffffff610db116565b90506000611636828063ffffffff610db116565b6000610c8f612b64600a612a77565b611044612b81612b746006612a77565b869063ffffffff610db116565b611670612b8e6004612a77565b889063ffffffff610db116565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b7d57600080fd5b600060208284031215612c66578081fd5b610c8f8383612c31565b60008060408385031215612c82578081fd5b612c8c8484612c31565b9150612c9b8460208501612c31565b90509250929050565b600080600060608486031215612cb8578081fd5b8335612cc3816133f5565b92506020840135612cd3816133f5565b929592945050506040919091013590565b600060208284031215612cf5578081fd5b81518015158114610b7a578182fd5b600060208284031215612d15578081fd5b5035919050565b60008060408385031215612d2e578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461097d57600080fdfea365627a7a723158205c51cfb20cf0cff1790da7a07ed00603c18714e7373bf474ed20e8a775ce41256c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x345A DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x13A JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xE0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C55 JUMP JUMPDEST PUSH2 0x14D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x33EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C70 JUMP JUMPDEST PUSH2 0x179 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 PUSH2 0x18F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1AB JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D1C JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST PUSH2 0x10E PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E4B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CA4 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C55 JUMP JUMPDEST PUSH2 0x8AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x181 PUSH2 0x980 JUMP JUMPDEST PUSH2 0x18B DUP3 DUP3 PUSH2 0x9D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0x1D0 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xB26 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB83 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x203 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x1D0 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xB26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x21B DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x216 DUP5 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x232 SWAP1 PUSH2 0x216 DUP4 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x259 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC96 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x280 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x2E2 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x310 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x334 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x38F SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x3FE DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x40F DUP5 PUSH3 0xF4240 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH2 0x428 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x43E SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST EQ PUSH2 0x47E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x4DB SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x509 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x52D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x58A SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5DC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5FB JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x621 JUMP JUMPDEST PUSH2 0x61E PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x1D0 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xB26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x62F DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x643 SWAP1 DUP4 PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x66A SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x691 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 PUSH2 0x2B9B JUMP JUMPDEST PUSH2 0x708 PUSH2 0xE7B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x778 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x7A6 JUMPI PUSH1 0x0 PUSH2 0x793 DUP7 DUP7 PUSH2 0x78D DUP8 PUSH2 0xF21 JUMP JUMPDEST DUP6 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP2 PUSH2 0x12AA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x866 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x814 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 PUSH2 0x829 DUP7 DUP7 PUSH2 0x78D DUP8 PUSH2 0xF21 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP2 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3078 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x89D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8B5 PUSH2 0x980 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3245 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x974 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2D5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x9D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x300A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3041 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xA97 PUSH1 0x63 PUSH1 0x64 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xAAC SWAP1 PUSH1 0x64 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xABC PUSH1 0x5 PUSH2 0x2710 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xAE4 PUSH2 0xAD0 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x12C4 JUMP JUMPDEST PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0xAF5 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB35 JUMPI POP PUSH1 0x0 PUSH2 0xB7D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xB42 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x31D7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xBC7 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x317A JUMP JUMPDEST PUSH2 0xB7D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xC82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x32EA JUMP JUMPDEST PUSH2 0xC8F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x136D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F9C JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2ED1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3321 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xD8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x30AF JUMP JUMPDEST PUSH2 0xC8F PUSH2 0xDAB DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST DUP4 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE2 PUSH16 0x80000000000000000000000000000000 PUSH2 0xDDD PUSH2 0xDD4 DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDFB PUSH2 0xDF2 DUP7 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0xDDD DUP7 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE14 PUSH2 0xE0B DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD DUP8 PUSH2 0x14C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE46 PUSH2 0xE30 PUSH2 0xE27 DUP10 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0xDDD DUP10 PUSH2 0x14C8 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x13E3 JUMP JUMPDEST SWAP1 POP PUSH2 0xE64 PUSH2 0xE5E PUSH2 0xE58 DUP7 DUP7 PUSH2 0x136D JUMP JUMPDEST DUP5 PUSH2 0x136D JUMP JUMPDEST DUP3 PUSH2 0x136D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP4 DUP4 PUSH2 0x136D JUMP JUMPDEST PUSH2 0xE83 PUSH2 0x2B9B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x12 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xF94 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xFB3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1053 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1021 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x834 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x1050 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1066 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x158E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1078 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x1644 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10AC PUSH2 0x1090 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x10A0 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x10BF PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10D1 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT PUSH2 0x110D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3143 JUMP JUMPDEST DUP1 PUSH2 0x111E DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SGT PUSH2 0x1136 JUMPI PUSH2 0x1133 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1156 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x1149 PUSH2 0x17AB JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x17AF JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x116F SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x1193 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x118C SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x11CC JUMP JUMPDEST DUP7 PUSH2 0x11AC DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x11CC JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x11C9 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x11D4 PUSH2 0x17AB JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x1216 JUMPI PUSH2 0x11F0 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x1205 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x1226 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x123B DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x124C DUP2 PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x125B DUP12 PUSH2 0x1890 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x128E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x6 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x12 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F PUSH2 0xDAB DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1304 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1311 JUMPI POP PUSH1 0x0 PUSH2 0xB7D JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x131F JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1336 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1332 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x327C JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1380 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x138B JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x13AC JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x13A1 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x13AC JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x32B3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x141C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x337E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x146A JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x33B5 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x14AA JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x14EF JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xB7D JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1520 DUP5 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x156B JUMPI PUSH2 0x1563 PUSH2 0x1534 DUP6 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD PUSH2 0x155D DUP8 PUSH2 0xDDD PUSH16 0x80000000000000000000000000000000 PUSH2 0x1558 DUP12 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x13E3 JUMP JUMPDEST DUP7 PUSH2 0x13E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB7D JUMP JUMPDEST PUSH2 0x1563 PUSH2 0x1588 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST DUP5 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15A1 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15B5 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15C9 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15D9 DUP7 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15E5 PUSH2 0x12E3 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x1608 JUMPI PUSH2 0x1601 PUSH2 0x15FC DUP4 PUSH2 0x10A0 DUP8 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST SWAP1 POP PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x1623 PUSH2 0x161B PUSH2 0x15FC DUP5 PUSH2 0x10A0 DUP8 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1636 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1699 PUSH2 0x168C PUSH2 0x167C PUSH2 0x1660 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH2 0x1044 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16BD PUSH2 0x16B0 DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16CF DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x25BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16E2 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x26AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16F6 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x274D JUMP JUMPDEST SWAP1 POP PUSH2 0x1708 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x1780 JUMPI PUSH1 0x0 PUSH2 0x171C DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2880 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0x1734 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x177E JUMPI PUSH1 0x0 PUSH2 0x1749 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x2923 JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x1766 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x177C JUMPI PUSH2 0x1779 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x29A5 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1789 DUP3 PUSH2 0x2A55 JUMP JUMPDEST SWAP2 POP PUSH2 0x179B DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17BD DUP8 DUP8 SUB PUSH2 0xBD0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17DD PUSH2 0x15FC PUSH2 0x17D0 DUP9 PUSH2 0x18C2 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17ED DUP3 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1801 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1815 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1841 PUSH2 0x182C DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x183C DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0xE6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1859 DUP3 PUSH2 0x1044 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x187E PUSH2 0x186A PUSH1 0x2 PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1044 DUP5 PUSH2 0x1670 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14B2 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x190E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x310C JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x1948 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2FD3 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1968 JUMPI POP PUSH1 0x0 PUSH2 0x174 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x199B JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x174 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x19FA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1A58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1ABA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1B1E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1B82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1BE6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x1C4A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1CAE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1D12 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1D88 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1DB9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1DD9 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1E0A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E2A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1E5B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E7B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1EAC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1ECC JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1EFD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F1D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1F4E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F6E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1F9F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1FDE JUMPI POP PUSH1 0x0 PUSH2 0x174 JUMP JUMPDEST DUP2 PUSH2 0x1FFA JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x174 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x2035 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x320E JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2126 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2152 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x217D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21A8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2226 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x224F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2278 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22C8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22EF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2316 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x233C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x23AB JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x23ED JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x242F JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2471 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24B3 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24F3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2533 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2573 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x25B3 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25C7 PUSH1 0x2 PUSH2 0x2A77 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2606 PUSH2 0x25E6 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xAD8 DUP10 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xC26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x262C PUSH2 0x2623 DUP11 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 PUSH1 0x4 PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1670 DUP5 PUSH2 0x2A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2648 DUP5 PUSH2 0x1044 PUSH2 0x2643 DUP6 PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x266B JUMPI PUSH2 0x2666 PUSH2 0x161B DUP4 PUSH1 0x0 SUB PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x2674 JUMP JUMPDEST PUSH2 0x2674 DUP3 PUSH2 0x1FAC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x269F PUSH2 0x268B DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1044 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x187E DUP11 DUP4 PUSH2 0x2A9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26E0 PUSH2 0x26D3 PUSH2 0x26C6 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F7 PUSH2 0x26D3 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x270E PUSH2 0x2643 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2727 DUP3 PUSH2 0x10A0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x273C DUP10 PUSH2 0x1044 DUP11 PUSH2 0x10A0 DUP7 PUSH2 0x1FAC JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2760 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x278E PUSH2 0x277C DUP7 PUSH2 0x10A0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27B2 PUSH2 0x27AA DUP9 PUSH2 0x10A0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27C6 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x27D5 JUMPI DUP1 PUSH2 0x273C JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27F9 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2809 PUSH1 0x1 PUSH1 0xA PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2839 PUSH2 0x282C PUSH2 0x281F DUP9 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x286C SWAP3 SWAP2 SWAP1 PUSH2 0x2EC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x288C DUP8 PUSH2 0x2AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28BE PUSH2 0x28A8 DUP7 PUSH2 0x10A0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x1670 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28EB PUSH2 0x28DE DUP11 PUSH2 0x10A0 DUP11 PUSH2 0x10A0 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2903 DUP3 PUSH2 0x1044 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x2912 JUMPI DUP9 PUSH2 0x2914 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2935 DUP12 DUP12 PUSH2 0x2B55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2942 DUP3 PUSH2 0x2AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2966 PUSH2 0x2959 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x298B JUMPI DUP3 DUP13 DUP4 PUSH2 0x297B DUP16 PUSH2 0x2AB6 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2998 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x29EE PUSH2 0x29CB PUSH2 0x29BE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x29DE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0xAD8 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A25 PUSH2 0x2A15 PUSH2 0x2A08 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A39 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2A48 JUMPI DUP10 PUSH2 0x1636 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A63 PUSH1 0x9 PUSH1 0xA PUSH2 0x12C4 JUMP JUMPDEST DUP3 SLT PUSH2 0x2A6F JUMPI DUP2 PUSH2 0xB7D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 DUP4 PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2AAF JUMPI DUP2 PUSH2 0xC8F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AC9 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2ADD DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AF1 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B05 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B19 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B2D DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B41 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1636 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F PUSH2 0x2B64 PUSH1 0xA PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1044 PUSH2 0x2B81 PUSH2 0x2B74 PUSH1 0x6 PUSH2 0x2A77 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x2B8E PUSH1 0x4 PUSH2 0x2A77 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C66 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xC8F DUP4 DUP4 PUSH2 0x2C31 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C82 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2C8C DUP5 DUP5 PUSH2 0x2C31 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C9B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2C31 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CB8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2CC3 DUP2 PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CD3 DUP2 PUSH2 0x33F5 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB7A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D15 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x5c MLOAD 0xcf 0xb2 0xc CREATE 0xcf CALL PUSH26 0xDA7A07ED00603C18714E7373BF474ED20E8A775CE41256C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "148:99:0:-;;;210:35;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;148:99:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639cd441da1161005b5780639cd441da146100f3578063afd46eb514610106578063df791e5014610127578063f2fde38b1461013a57610088565b806370a082311461008d5780637b689036146100b65780638da5cb5b146100cb5780639c8f9f23146100e0575b600080fd5b6100a061009b366004612c55565b61014d565b6040516100ad91906133ec565b60405180910390f35b6100c96100c4366004612c70565b610179565b005b6100d361018f565b6040516100ad9190612d3d565b6100c96100ee366004612d04565b6101ab565b6100c9610101366004612d1c565b6103e8565b61010e6106a1565b6040516100ad9d9c9b9a99989796959493929190612e4b565b6100a0610135366004612ca4565b6106f6565b6100c9610148366004612c55565b6108ad565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60205260409020545b919050565b610181610980565b61018b82826109d3565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6005546003546001916000916101dc91906101d0908690607f1c63ffffffff610b2616565b9063ffffffff610b8316565b9050600061020383600401546101d0607f8660030154901c87610b2690919063ffffffff16565b905061021b836002015461021684610bd0565b610c26565b600284015560038301546102329061021683610bd0565b6003840155336000908152600a84016020526040902054610259908563ffffffff610c9616565b336000908152600a850160205260409020556004830154610280908563ffffffff610cd816565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb916102e2913391879101612e25565b602060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103349190810190612ce4565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb9061038f9033908590600401612e25565b602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e19190810190612ce4565b5050505050565b600160006103fe84670de0b6b3a7640000610d17565b9050600061040f84620f4240610d17565b9050610428836002015482610db190919063ffffffff16565b600384015461043e90849063ffffffff610db116565b1461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f08565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906104db90339030908a90600401612dc6565b602060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052d9190810190612ce4565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061058a90339030908990600401612dc6565b602060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105dc9190810190612ce4565b5060008360020154600014156105fb5750600160048401556000610621565b61061e607f8560020154901c6101d0866004015489610b2690919063ffffffff16565b90505b61062f846002015484610e6f565b600285015560038401546106439083610e6f565b6003850155336000908152600a8501602052604090205461066a908263ffffffff610cd816565b336000908152600a860160205260409020556004840154610691908263ffffffff610cd816565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6000610700612b9b565b610708610e7b565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156107785750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156107a6576000610793868661078d87610f21565b85610f2e565b905061079e816112aa565b925050610866565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108145750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610834576000610829868661078d87610f21565b905061079e816112b7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613078565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161089d959493929190612d85565b60405180910390a1509392505050565b6108b5610980565b73ffffffffffffffffffffffffffffffffffffffff8116610902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613245565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906109749033908490612d5e565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061300a565b565b60015460ff1615610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613041565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610a9760636064610d17565b60065560636007819055610aac906064610d17565b600855610abc6005612710610d17565b600955610ae4610ad06001620f42406112c4565b610ad86112e3565b9063ffffffff610c2616565b600c55610af56127156103e86112c4565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610b3557506000610b7d565b82820282848281610b4257fe5b0414610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906131d7565b90505b92915050565b600081610bbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f65565b6000828481610bc757fe5b04949350505050565b600080821215610c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061317a565b610b7d826f800000000000000000000000000000006112f7565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906132ea565b610c8f838360000361136d565b9392505050565b600082821115610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612f9c565b50900390565b600082820183811015610b7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612ed1565b600080831215610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613321565b6000821215610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906130af565b610c8f610dab846f800000000000000000000000000000006112f7565b836113e3565b600080610de26f80000000000000000000000000000000610ddd610dd4876114b2565b610ddd876114b2565b6112f7565b90506000610dfb610df2866114c8565b610ddd866114b2565b90506000610e14610e0b876114b2565b610ddd876114c8565b90506000610e46610e30610e27896114c8565b610ddd896114c8565b6f800000000000000000000000000000006113e3565b9050610e64610e5e610e58868661136d565b8461136d565b8261136d565b979650505050505050565b6000610c8f838361136d565b610e83612b9b565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610b7d826012611505565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a81169116148015610f945750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b15610fb357505050506060820151608083015160c08401516001611053565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110215750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108345785608001519350856060015192506110508660c001516110446112e3565b9063ffffffff61151416565b91505b60006110668585858a610100015161158e565b90506000611078868684878d8d611644565b905060006110ac6110908a6101200151610ad86112e3565b6110a08c8563ffffffff610db116565b9063ffffffff610db116565b90506110bf60008263ffffffff610c2616565b905060006110d16001620186a06112c4565b90506000821261110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613143565b8061111e888463ffffffff610e6f16565b1361113657611133818863ffffffff610c2616565b91505b60006111568b61014001516111496117ab565b8d6101600151888b6117af565b6101808c015190915061116f908863ffffffff610db116565b811315611193576101808b015161118c908863ffffffff610db116565b90506111cc565b866111ac8c610180015183610db190919063ffffffff16565b12156111cc576101808b01516111c990889063ffffffff61151416565b90505b6111d46117ab565b6101408c01528515611216576111f0898d63ffffffff610e6f16565b60608c0152611205888463ffffffff610e6f16565b60808c015260c08b01819052611252565b611226888463ffffffff610e6f16565b60608c015261123b898d63ffffffff610e6f16565b60808c015261124c816110446112e3565b60c08c01525b61125b8b611890565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161128e93929190612df7565b60405180910390a150506000039b9a5050505050505050505050565b6000610b7d8260066118b2565b6000610b7d8260126118b2565b6000610c8f610dab846f800000000000000000000000000000006112f7565b6f8000000000000000000000000000000090565b6000821580611304575081155b1561131157506000610b7d565b508181028183828161131f57fe5b0514158061133657508282828161133257fe5b0514155b15610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061327c565b8181016000831280156113805750600082125b801561138b57508281135b806113ac57506000831380156113a15750600082135b80156113ac57508281125b15610b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906132b3565b60008161141c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061337e565b7f80000000000000000000000000000000000000000000000000000000000000008314801561146a5750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156114a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906133b5565b8183816114aa57fe5b059392505050565b6f80000000000000000000000000000000900590565b60008082136114ef576f7fffffffffffffffffffffffffffffff8260000316600003610b7d565b506f7fffffffffffffffffffffffffffffff1690565b6000610c8f8383600a0a610d17565b600080611520846114b2565b9050801561156b57611563611534856114b2565b610ddd61155d87610ddd6f800000000000000000000000000000006115588b6114b2565b6113e3565b866113e3565b915050610b7d565b611563611588856f800000000000000000000000000000006112f7565b846113e3565b6000806115a1848763ffffffff610db116565b905060006115b5868363ffffffff61151416565b905060006115c9838863ffffffff61151416565b905060006115d986610ad86112e3565b905060006115e56112e3565b841215611608576116016115fc836110a0876118c2565b611fac565b9050611626565b61162361161b6115fc846110a0876118c2565b6110446112e3565b90505b611636818963ffffffff610db116565b9a9950505050505050505050565b60008061169961168c61167c6116608a8863ffffffff610db116565b6116708c8c63ffffffff610db116565b9063ffffffff610e6f16565b611044898863ffffffff610db116565b899063ffffffff610db116565b905060006116bd6116b08a8763ffffffff610e6f16565b8a9063ffffffff61151416565b905060006116cf8a8a8a8a8a8a6125ba565b905060006116e28b8b8b8b8b878c6126ad565b905060006116f68c8c8c8c8c8a8a8e61274d565b905061170882828961012001516127e6565b1561178057600061171c838388888c612880565b809250819350505061173483838a61012001516127e6565b1561177e57600061174984848989868e612923565b6101208d01519397509195509350915061176690859085906127e6565b1561177c57611779848484848b8b6129a5565b93505b505b505b61178982612a55565b915061179b828b63ffffffff610db116565b9c9b505050505050505050505050565b4390565b6000806117bd878703610bd0565b905060006117dd6115fc6117d0886118c2565b849063ffffffff610db116565b905060006117ed82610ad86112e3565b90506000611801878363ffffffff610db116565b90506000611815878563ffffffff610db116565b9050600061184161182c858a63ffffffff610db116565b61183c878c63ffffffff610db116565b610e6f565b90506000611859826110448c8c63ffffffff610db116565b9050600061187e61186a6002612a77565b61104484611670898963ffffffff610e6f16565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610c8f82600a0a84026114b2565b60006f8000000000000000000000000000000082131561190e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061310c565b60008213611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590612fd3565b6f8000000000000000000000000000000082141561196857506000610174565b640733048c5a821361199b57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610174565b60008060006a01c8464f7616476000000085136119fa577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611a58577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611aba577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611b1e577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611b82577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611be6577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513611c4a577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611cae577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611d12577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281611d8857fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281611db957fe5b05840193506f8000000000000000000000000000000081830281611dd957fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611e0a57fe5b05840193506f8000000000000000000000000000000081830281611e2a57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611e5b57fe5b05840193506f8000000000000000000000000000000081830281611e7b57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611eac57fe5b05840193506f8000000000000000000000000000000081830281611ecc57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611efd57fe5b05840193506f8000000000000000000000000000000081830281611f1d57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611f4e57fe5b05840193506f8000000000000000000000000000000081830281611f6e57fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611f9f57fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611fde57506000610174565b81611ffa57506f80000000000000000000000000000000610174565b6000821315612035576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061320e565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816120a157fe5b05905080670168244fdac7800002830192506f80000000000000000000000000000000828202816120ce57fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816120fa57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161212657fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161215257fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161217d57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816121a857fe5b05905080649c197dcc0002830192506f80000000000000000000000000000000828202816121d257fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816121fc57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161222657fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161224f57fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161227857fe5b05905080621c638002830192506f80000000000000000000000000000000828202816122a057fe5b059050806201c63802830192506f80000000000000000000000000000000828202816122c857fe5b05905080611ab802830192506f80000000000000000000000000000000828202816122ef57fe5b0590508061017c02830192506f800000000000000000000000000000008282028161231657fe5b05905080601402830192506f800000000000000000000000000000008282028161233c57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156123ab577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b7008000000000000000000000000000000008416156123ed577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561242f57701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612471577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156124b35770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156124f3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612533576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612573576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156125b3576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806125c76002612a77565b905060006126066125e689866101000151610db190919063ffffffff16565b610ad8896110a08d6110a08a610100015189610c2690919063ffffffff16565b9050600061262c6126238a6110a08d6110a08d6110a06004612a77565b61167084612a93565b9050600061264884611044612643856110446112e3565b6118c2565b600003905060008082131561266b5761266661161b83600003611fac565b612674565b61267482611fac565b9050600061269f61268b878d63ffffffff610db116565b61104460008890038563ffffffff610e6f16565b9050600061187e8a83612a9f565b6000806126e06126d36126c6868a63ffffffff610db116565b8a9063ffffffff610c2616565b8a9063ffffffff610db116565b905060006126f76126d38b8763ffffffff610e6f16565b9050600061270e612643848463ffffffff61151416565b90506000612727826110a0886101000151610ad86112e3565b9050600061273c896110448a6110a086611fac565b9d9c50505050505050505050505050565b600080612760848663ffffffff61151416565b9050600061278e61277c866110a0876101000151610ad86112e3565b6101008601519063ffffffff610e6f16565b905060006127b26127aa886110a0886101000151610ad86112e3565b6116706112e3565b905060006127c6838363ffffffff61151416565b90508084126127d5578061273c565b50919b9a5050505050505050505050565b6000806127f9848663ffffffff610c2616565b905060006128096001600a6112c4565b9050600061283961282c61281f88610ad86112e3565b879063ffffffff610e6f16565b839063ffffffff610db116565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a822838260405161286c929190612ec3565b60405180910390a190911395945050505050565b60008061288c87612ab6565b905060006128be6128a8866110a0876101000151610ad86112e3565b610100860151611670908563ffffffff610db116565b905060006128eb6128de8a6110a08a6110a08a6101000151610ad86112e3565b849063ffffffff610e6f16565b90506000612903826110448c8663ffffffff610db116565b90508881126129125788612914565b805b94505050509550959350505050565b60008060008060006129358b8b612b55565b9050600061294282612ab6565b905060006129666129598c8563ffffffff610db116565b8b9063ffffffff610c2616565b905080821361298b57828c8361297b8f612ab6565b9650965096509650505050612998565b508b955090935086925090505b9650965096509692505050565b6000806129ee6129cb6129be898b63ffffffff610c2616565b859063ffffffff610db116565b6116706129de898b63ffffffff610db116565b610ad8898d63ffffffff610db116565b90506000612a25612a15612a088a8c63ffffffff610c2616565b879063ffffffff610db116565b611670888a63ffffffff610c2616565b90506000612a39838363ffffffff61151416565b9050898113612a485789611636565b9998505050505050505050565b6000612a636009600a6112c4565b8212612a6f5781610b7d565b506000919050565b6000610b7d826f800000000000000000000000000000006112f7565b6000610b7d8283610db1565b600081831315612aaf5781610c8f565b5090919050565b600080612ac9838063ffffffff610db116565b90506000612add848363ffffffff610db116565b90506000612af1828063ffffffff610db116565b90506000612b05828063ffffffff610db116565b90506000612b19828063ffffffff610db116565b90506000612b2d828063ffffffff610db116565b90506000612b41828863ffffffff610db116565b90506000611636828063ffffffff610db116565b6000610c8f612b64600a612a77565b611044612b81612b746006612a77565b869063ffffffff610db116565b611670612b8e6004612a77565b889063ffffffff610db116565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b7d57600080fd5b600060208284031215612c66578081fd5b610c8f8383612c31565b60008060408385031215612c82578081fd5b612c8c8484612c31565b9150612c9b8460208501612c31565b90509250929050565b600080600060608486031215612cb8578081fd5b8335612cc3816133f5565b92506020840135612cd3816133f5565b929592945050506040919091013590565b600060208284031215612cf5578081fd5b81518015158114610b7a578182fd5b600060208284031215612d15578081fd5b5035919050565b60008060408385031215612d2e578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461097d57600080fdfea365627a7a723158205c51cfb20cf0cff1790da7a07ed00603c18714e7373bf474ed20e8a775ce41256c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x13A JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xE0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C55 JUMP JUMPDEST PUSH2 0x14D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x33EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C70 JUMP JUMPDEST PUSH2 0x179 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 PUSH2 0x18F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1AB JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D1C JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST PUSH2 0x10E PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E4B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CA4 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C55 JUMP JUMPDEST PUSH2 0x8AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x181 PUSH2 0x980 JUMP JUMPDEST PUSH2 0x18B DUP3 DUP3 PUSH2 0x9D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0x1D0 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xB26 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB83 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x203 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x1D0 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xB26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x21B DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x216 DUP5 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x232 SWAP1 PUSH2 0x216 DUP4 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x259 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC96 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x280 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x2E2 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x310 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x334 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x38F SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x3FE DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x40F DUP5 PUSH3 0xF4240 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH2 0x428 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x43E SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST EQ PUSH2 0x47E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x4DB SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x509 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x52D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x58A SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5DC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5FB JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x621 JUMP JUMPDEST PUSH2 0x61E PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x1D0 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xB26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x62F DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x643 SWAP1 DUP4 PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x66A SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x691 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD8 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 PUSH2 0x2B9B JUMP JUMPDEST PUSH2 0x708 PUSH2 0xE7B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x778 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x7A6 JUMPI PUSH1 0x0 PUSH2 0x793 DUP7 DUP7 PUSH2 0x78D DUP8 PUSH2 0xF21 JUMP JUMPDEST DUP6 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP2 PUSH2 0x12AA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x866 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x814 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 PUSH2 0x829 DUP7 DUP7 PUSH2 0x78D DUP8 PUSH2 0xF21 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP2 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3078 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x89D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8B5 PUSH2 0x980 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3245 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x974 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2D5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x9D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x300A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3041 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xA97 PUSH1 0x63 PUSH1 0x64 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xAAC SWAP1 PUSH1 0x64 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xABC PUSH1 0x5 PUSH2 0x2710 PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xAE4 PUSH2 0xAD0 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x12C4 JUMP JUMPDEST PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0xAF5 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB35 JUMPI POP PUSH1 0x0 PUSH2 0xB7D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xB42 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x31D7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F65 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xBC7 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x317A JUMP JUMPDEST PUSH2 0xB7D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xC82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x32EA JUMP JUMPDEST PUSH2 0xC8F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x136D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2F9C JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2ED1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3321 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xD8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x30AF JUMP JUMPDEST PUSH2 0xC8F PUSH2 0xDAB DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST DUP4 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE2 PUSH16 0x80000000000000000000000000000000 PUSH2 0xDDD PUSH2 0xDD4 DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDFB PUSH2 0xDF2 DUP7 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0xDDD DUP7 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE14 PUSH2 0xE0B DUP8 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD DUP8 PUSH2 0x14C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE46 PUSH2 0xE30 PUSH2 0xE27 DUP10 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0xDDD DUP10 PUSH2 0x14C8 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x13E3 JUMP JUMPDEST SWAP1 POP PUSH2 0xE64 PUSH2 0xE5E PUSH2 0xE58 DUP7 DUP7 PUSH2 0x136D JUMP JUMPDEST DUP5 PUSH2 0x136D JUMP JUMPDEST DUP3 PUSH2 0x136D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP4 DUP4 PUSH2 0x136D JUMP JUMPDEST PUSH2 0xE83 PUSH2 0x2B9B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x12 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xF94 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xFB3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1053 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1021 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x834 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x1050 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1066 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x158E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1078 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x1644 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10AC PUSH2 0x1090 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x10A0 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x10BF PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10D1 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT PUSH2 0x110D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x3143 JUMP JUMPDEST DUP1 PUSH2 0x111E DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SGT PUSH2 0x1136 JUMPI PUSH2 0x1133 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1156 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x1149 PUSH2 0x17AB JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x17AF JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x116F SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x1193 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x118C SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x11CC JUMP JUMPDEST DUP7 PUSH2 0x11AC DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x11CC JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x11C9 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x11D4 PUSH2 0x17AB JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x1216 JUMPI PUSH2 0x11F0 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x1205 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x1226 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x123B DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x124C DUP2 PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x125B DUP12 PUSH2 0x1890 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x128E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x6 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH1 0x12 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F PUSH2 0xDAB DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1304 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1311 JUMPI POP PUSH1 0x0 PUSH2 0xB7D JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x131F JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1336 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1332 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x327C JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1380 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x138B JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x13AC JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x13A1 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x13AC JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x32B3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x141C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x337E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x146A JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x33B5 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x14AA JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x14EF JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xB7D JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xD17 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1520 DUP5 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x156B JUMPI PUSH2 0x1563 PUSH2 0x1534 DUP6 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0xDDD PUSH2 0x155D DUP8 PUSH2 0xDDD PUSH16 0x80000000000000000000000000000000 PUSH2 0x1558 DUP12 PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x13E3 JUMP JUMPDEST DUP7 PUSH2 0x13E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB7D JUMP JUMPDEST PUSH2 0x1563 PUSH2 0x1588 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST DUP5 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15A1 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15B5 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15C9 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15D9 DUP7 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15E5 PUSH2 0x12E3 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x1608 JUMPI PUSH2 0x1601 PUSH2 0x15FC DUP4 PUSH2 0x10A0 DUP8 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST SWAP1 POP PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x1623 PUSH2 0x161B PUSH2 0x15FC DUP5 PUSH2 0x10A0 DUP8 PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1636 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1699 PUSH2 0x168C PUSH2 0x167C PUSH2 0x1660 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST PUSH2 0x1044 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16BD PUSH2 0x16B0 DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16CF DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x25BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16E2 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x26AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16F6 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x274D JUMP JUMPDEST SWAP1 POP PUSH2 0x1708 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x1780 JUMPI PUSH1 0x0 PUSH2 0x171C DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2880 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0x1734 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x177E JUMPI PUSH1 0x0 PUSH2 0x1749 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x2923 JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x1766 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST ISZERO PUSH2 0x177C JUMPI PUSH2 0x1779 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x29A5 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1789 DUP3 PUSH2 0x2A55 JUMP JUMPDEST SWAP2 POP PUSH2 0x179B DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17BD DUP8 DUP8 SUB PUSH2 0xBD0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17DD PUSH2 0x15FC PUSH2 0x17D0 DUP9 PUSH2 0x18C2 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17ED DUP3 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1801 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1815 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1841 PUSH2 0x182C DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x183C DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0xE6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1859 DUP3 PUSH2 0x1044 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x187E PUSH2 0x186A PUSH1 0x2 PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1044 DUP5 PUSH2 0x1670 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14B2 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x190E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x310C JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x1948 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x2FD3 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1968 JUMPI POP PUSH1 0x0 PUSH2 0x174 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x199B JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x174 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x19FA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1A58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1ABA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1B1E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1B82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1BE6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x1C4A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1CAE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1D12 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1D88 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1DB9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1DD9 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1E0A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E2A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1E5B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E7B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1EAC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1ECC JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1EFD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F1D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1F4E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F6E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1F9F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1FDE JUMPI POP PUSH1 0x0 PUSH2 0x174 JUMP JUMPDEST DUP2 PUSH2 0x1FFA JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x174 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x2035 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x475 SWAP1 PUSH2 0x320E JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x20FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2126 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2152 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x217D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21A8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2226 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x224F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2278 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22C8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22EF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2316 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x233C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x23AB JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x23ED JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x242F JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2471 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24B3 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24F3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2533 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2573 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x25B3 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25C7 PUSH1 0x2 PUSH2 0x2A77 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2606 PUSH2 0x25E6 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xDB1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xAD8 DUP10 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xC26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x262C PUSH2 0x2623 DUP11 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 DUP14 PUSH2 0x10A0 PUSH1 0x4 PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1670 DUP5 PUSH2 0x2A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2648 DUP5 PUSH2 0x1044 PUSH2 0x2643 DUP6 PUSH2 0x1044 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x266B JUMPI PUSH2 0x2666 PUSH2 0x161B DUP4 PUSH1 0x0 SUB PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x2674 JUMP JUMPDEST PUSH2 0x2674 DUP3 PUSH2 0x1FAC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x269F PUSH2 0x268B DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1044 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x187E DUP11 DUP4 PUSH2 0x2A9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26E0 PUSH2 0x26D3 PUSH2 0x26C6 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F7 PUSH2 0x26D3 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x270E PUSH2 0x2643 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2727 DUP3 PUSH2 0x10A0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x273C DUP10 PUSH2 0x1044 DUP11 PUSH2 0x10A0 DUP7 PUSH2 0x1FAC JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2760 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x278E PUSH2 0x277C DUP7 PUSH2 0x10A0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27B2 PUSH2 0x27AA DUP9 PUSH2 0x10A0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x12E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27C6 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x27D5 JUMPI DUP1 PUSH2 0x273C JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27F9 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2809 PUSH1 0x1 PUSH1 0xA PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2839 PUSH2 0x282C PUSH2 0x281F DUP9 PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x286C SWAP3 SWAP2 SWAP1 PUSH2 0x2EC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x288C DUP8 PUSH2 0x2AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28BE PUSH2 0x28A8 DUP7 PUSH2 0x10A0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x1670 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28EB PUSH2 0x28DE DUP11 PUSH2 0x10A0 DUP11 PUSH2 0x10A0 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xAD8 PUSH2 0x12E3 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE6F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2903 DUP3 PUSH2 0x1044 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x2912 JUMPI DUP9 PUSH2 0x2914 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2935 DUP12 DUP12 PUSH2 0x2B55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2942 DUP3 PUSH2 0x2AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2966 PUSH2 0x2959 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x298B JUMPI DUP3 DUP13 DUP4 PUSH2 0x297B DUP16 PUSH2 0x2AB6 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2998 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x29EE PUSH2 0x29CB PUSH2 0x29BE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x29DE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0xAD8 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A25 PUSH2 0x2A15 PUSH2 0x2A08 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xC26 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A39 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1514 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2A48 JUMPI DUP10 PUSH2 0x1636 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A63 PUSH1 0x9 PUSH1 0xA PUSH2 0x12C4 JUMP JUMPDEST DUP3 SLT PUSH2 0x2A6F JUMPI DUP2 PUSH2 0xB7D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7D DUP3 DUP4 PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2AAF JUMPI DUP2 PUSH2 0xC8F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AC9 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2ADD DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AF1 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B05 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B19 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B2D DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B41 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1636 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8F PUSH2 0x2B64 PUSH1 0xA PUSH2 0x2A77 JUMP JUMPDEST PUSH2 0x1044 PUSH2 0x2B81 PUSH2 0x2B74 PUSH1 0x6 PUSH2 0x2A77 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH2 0x1670 PUSH2 0x2B8E PUSH1 0x4 PUSH2 0x2A77 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDB1 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C66 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xC8F DUP4 DUP4 PUSH2 0x2C31 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C82 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2C8C DUP5 DUP5 PUSH2 0x2C31 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C9B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2C31 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CB8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2CC3 DUP2 PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CD3 DUP2 PUSH2 0x33F5 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB7A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D15 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x5c MLOAD 0xcf 0xb2 0xc CREATE 0xcf CALL PUSH26 0xDA7A07ED00603C18714E7373BF474ED20E8A775CE41256C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "148:99:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;148:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;380:196:1;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;2536:1002:1;;;;;;;;;:::i;845:1544::-;;;;;;;;;:::i;264:28:3:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;525:1593:4;;;;;;;;;:::i;320:293:2:-;;;;;;;;;:::i;380:196:1:-;538:31;;;461:7;538:31;;;:22;:31;;;;;;380:196;;;;:::o;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;2536:1002:1:-;2843:7;;2818;;2679:6;;2648:28;;2793:58;;2843:7;2793:41;;:8;;2830:3;2810:23;2793:41;:16;:41;:::i;:::-;:49;:58;:49;:58;:::i;:::-;2774:77;;2861:16;2880:58;2930:5;:7;;;2880:41;2917:3;2905:5;:7;;;2897:23;;2880:8;:16;;:41;;;;:::i;:58::-;2861:77;;3003:57;3020:5;:7;;;3029:30;3050:8;3029:20;:30::i;:::-;3003:16;:57::i;:::-;2993:7;;;:67;3097:7;;;;3080:57;;3106:30;3127:8;3106:20;:30::i;3080:57::-;3070:7;;;:67;3248:10;3225:34;;;;:22;;;:34;;;;;;:74;;3281:8;3225:74;:42;:74;:::i;:::-;3211:10;3188:34;;;;:22;;;:34;;;;;:111;3319:7;;;;:25;;3335:8;3319:25;:15;:25;:::i;:::-;3309:7;;;;:35;;;;3422:14;;3415:53;;;;;3422:14;;;;;;;3415:31;;:53;;3447:10;;3459:8;;3415:53;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3415:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3415:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3415:53:1;;;;;;;;;-1:-1:-1;3485:14:1;;;;3478:53;;;;;3485:14;;;;;3478:31;;:53;;3510:10;;3522:8;;3478:53;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3478:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3478:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3478:53:1;;;;;;;;;;2536:1002;;;;:::o;845:1544::-;1003:6;972:28;1041:38;1062:8;1072:6;1041:20;:38::i;:::-;1019:60;;1089:19;1111:37;1132:8;1142:5;1111:20;:37::i;:::-;1089:59;;1296:25;1313:5;:7;;;1296:12;:16;;:25;;;;:::i;:::-;1284:7;;;;1267:25;;:12;;:25;:16;:25;:::i;:::-;:54;1246:143;;;;;;;;;;;;;;;;;;;;;;1485:14;;1478:72;;;;;1485:14;;;;;;;1478:35;;:72;;1514:10;;1534:4;;1541:8;;1478:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1478:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1478:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1478:72:1;;;;;;;;;-1:-1:-1;1567:14:1;;;;1560:72;;;;;1567:14;;;;;1560:35;;:72;;1596:10;;1616:4;;1623:8;;1560:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1560:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1560:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1560:72:1;;;;;;;;;;1769:24;1807:5;:7;;;1818:1;1807:12;1803:196;;;-1:-1:-1;1879:1:1;1869:7;;;:11;1854:1;1803:196;;;1930:58;1984:3;1972:5;:7;;;1964:23;;1930:25;1947:5;:7;;;1930:8;:16;;:25;;;;:::i;:58::-;1911:77;;1803:196;2063:39;2080:5;:7;;;2089:12;2063:16;:39::i;:::-;2053:7;;;:49;2139:7;;;;2122:39;;2148:12;2122:16;:39::i;:::-;2112:7;;;:49;2270:10;2247:34;;;;:22;;;:34;;;;;;:82;;2303:16;2247:82;:42;:82;:::i;:::-;2233:10;2210:34;;;;:22;;;:34;;;;;:119;2349:7;;;;:33;;2365:16;2349:33;:15;:33;:::i;:::-;2339:5;:7;;:43;;;;845:1544;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1593:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;767:5;:14;;;754:27;;:9;:27;;;:56;;;;;796:5;:14;;;785:25;;:7;:25;;;754:56;750:726;;;826:26;855:139;878:9;905:7;930:27;950:6;930:19;:27::i;:::-;975:5;855;:139::i;:::-;826:168;;1025:43;1048:19;1025:22;:43::i;:::-;1008:60;;750:726;;;;1101:5;:14;;;1088:27;;:9;:27;;;:56;;;;;1130:5;:14;;;1119:25;;:7;:25;;;1088:56;1085:391;;;1160:26;1189:139;1212:9;1239:7;1264:27;1284:6;1264:19;:27::i;1189:139::-;1160:168;;1359:42;1381:19;1359:21;:42::i;1085:391::-;1432:33;;;;;;;;;;;1085:391;1941:138;1967:10;1991:9;2014:7;2035:6;2055:14;1941:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1593:4;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;412:195;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;53:282:9:-;139:7;166:6;162:45;;-1:-1:-1;195:1:9;188:8;;162:45;228:5;;;232:1;228;:5;:1;247:5;;;;;:10;243:68;;273:27;;;;;;;;;;;243:68;327:1;-1:-1:-1;53:282:9;;;;;:::o;341:224::-;427:7;454:6;450:64;;476:27;;;;;;;;;;;450:64;523:9;539:1;535;:5;;;;;;;341:224;-1:-1:-1;;;;341:224:9:o;5670:216:8:-;5721:8;5764:1;5752;5745:21;5741:101;;;5782:49;;;;;;;;;;;5741:101;5855:24;5867:1;889:66;5855:4;:24::i;2241:186::-;2297:8;1023:66;2321:1;:18;2317:79;;;2355:30;;;;;;;;;;;2317:79;2409:11;2414:1;2418;2417:2;;2409:4;:11::i;:::-;2405:15;2241:186;-1:-1:-1;;;2241:186:8:o;571:201:9:-;657:7;688:1;684;:5;680:64;;;705:28;;;;;;;;;;;680:64;-1:-1:-1;760:5:9;;;571:201::o;778:223::-;864:7;899:5;;;918;;;914:63;;;939:27;;;;;;;;;;;6036:386:8;6098:8;6141:1;6129;6122:21;6118:116;;;6159:64;;;;;;;;;;;6118:116;6266:1;6254;6247:21;6243:118;;;6284:66;;;;;;;;;;;6243:118;6374:41;6379:24;6391:1;889:66;6379:4;:24::i;:::-;6412:1;6374:4;:41::i;2524:772::-;2580:8;2601:18;2622:47;889:66;2636:32;2641:12;2651:1;2641:9;:12::i;:::-;2655;2665:1;2655:9;:12::i;:::-;2636:4;:32::i;2622:47::-;2601:68;;2757:20;2780:33;2785:13;2796:1;2785:10;:13::i;:::-;2800:12;2810:1;2800:9;:12::i;2780:33::-;2757:56;;2823:20;2846:33;2851:12;2861:1;2851:9;:12::i;:::-;2865:13;2876:1;2865:10;:13::i;2846:33::-;2823:56;;2889:23;2915:49;2920:34;2925:13;2936:1;2925:10;:13::i;:::-;2940;2951:1;2940:10;:13::i;2920:34::-;889:66;2915:4;:49::i;:::-;2889:75;;2982:77;2987:53;2992:32;2997:11;3010:13;2992:4;:32::i;:::-;3026:13;2987:4;:53::i;:::-;3042:16;2982:4;:77::i;:::-;2975:84;2524:772;-1:-1:-1;;;;;;;2524:772:8:o;2053:97::-;2109:8;2133:10;2138:1;2141;2133:4;:10::i;446:148:3:-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;2124:2993:4:-;2488:14;;;;2291:21;;;;;;;;;;2475:27;;;;;;;:56;;;;;2517:5;:14;;;2506:25;;:7;:25;;;2475:56;2471:433;;;-1:-1:-1;;;;2551:7:4;;;;2576;;;;2605:11;;;;2640:4;2471:433;;;2677:5;:14;;;2664:27;;:9;:27;;;:56;;;;;2706:5;:14;;;2695:25;;:7;:25;;;2664:56;2661:243;;;2740:5;:7;;;2736:11;;2765:5;:7;;;2761:11;;2794:35;2817:5;:11;;;2794:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2786:43;;2661:243;3003:9;3015:125;3067:1;3082;3097:5;3116;:14;;;3015:38;:125::i;:::-;3003:137;;3170:12;3185:122;3207:1;3222;3237:2;3253:5;3272:6;3292:5;3185:8;:122::i;:::-;3170:137;;3548:13;3564:112;3629:33;3652:5;:9;;;3629:18;:16;:18::i;:33::-;3564:30;:6;3588:5;3564:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3548:128;-1:-1:-1;3695:21:4;3702:1;3548:128;3695:21;:13;:21;:::i;:::-;3686:30;;3759:14;3776:47;3804:1;3815:6;3776:20;:47::i;:::-;3759:64;;3883:1;3873:6;:11;3869:188;;3926:36;;;;;;;;;;;3869:188;4000:7;3983:13;:1;3989:6;3983:13;:5;:13;:::i;:::-;:24;3979:78;;4032:14;:7;4044:1;4032:14;:11;:14;:::i;:::-;4023:23;;3979:78;4107:15;4125:155;4166:5;:7;;;4187:24;:22;:24::i;:::-;4225:5;:10;;;4249:2;4265:5;4125:27;:155::i;:::-;4306:14;;;;4107:173;;-1:-1:-1;4306:25:4;;4325:5;4306:25;:18;:25;:::i;:::-;4295:8;:36;4291:211;;;4358:14;;;;:25;;4377:5;4358:25;:18;:25;:::i;:::-;4347:36;;4291:211;;;4434:5;4403:28;4416:5;:14;;;4403:8;:12;;:28;;;;:::i;:::-;:36;4400:102;;;4476:14;;;;4466:25;;:5;;:25;:9;:25;:::i;:::-;4455:36;;4400:102;4546:24;:22;:24::i;:::-;4536:7;;;:34;4580:285;;;;4617:13;:1;4623:6;4617:13;:5;:13;:::i;:::-;4607:7;;;:23;4654:13;:1;4660:6;4654:13;:5;:13;:::i;:::-;4644:7;;;:23;4681:11;;;:22;;;4580:285;;;4744:13;:1;4750:6;4744:13;:5;:13;:::i;:::-;4734:7;;;:23;4781:13;:1;4787:6;4781:13;:5;:13;:::i;:::-;4771:7;;;:23;4822:32;4845:8;4822:18;:16;:18::i;:32::-;4808:11;;;:46;4580:285;4899:23;4916:5;4899:16;:23::i;:::-;4938:106;4976:10;5004:6;5028;4938:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5072:7:4;;;2124:2993;-1:-1:-1;;;;;;;;;;;2124:2993:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;5412:116:8:-;5472:8;5496:25;5501:16;5506:1;889:66;5501:4;:16::i;1676:76::-;889:66;;1676:76::o;17769:245::-;17825:8;17849:6;;;:16;;-1:-1:-1;17859:6:8;;17849:16;17845:55;;;-1:-1:-1;17888:1:8;17881:8;;17845:55;-1:-1:-1;17913:5:8;;;17917:1;17913;:5;:1;17932:5;;;;;:10;;:24;;;;17955:1;17950;17946;:5;;;;;;:10;;17932:24;17928:80;;;17973:24;;;;;;;;;;;18421:210;18501:5;;;18477:8;18521:5;;:14;;;;;18534:1;18530;:5;18521:14;:23;;;;;18543:1;18539;:5;18521:23;18520:54;;;;18554:1;18550;:5;:14;;;;;18563:1;18559;:5;18550:14;:23;;;;;18572:1;18568;:5;18550:23;18516:109;;;18590:24;;;;;;;;;;;18101:260;18157:8;18181:6;18177:67;;18203:30;;;;;;;;;;;18177:67;1023:66;18257:1;:18;:29;;;;;18279:1;18284:2;18279:7;18257:29;18253:83;;;18301:24;;;;;;;;;;;18253:83;18353:1;18349;:5;;;;;;;18101:260;-1:-1:-1;;;18101:260:8:o;6485:97::-;889:66;6564:11;;;6485:97::o;6588:138::-;6641:8;6672:1;6668;:5;:51;;798:34;6701:1;6700:2;;:18;6698:21;;6668:51;;;-1:-1:-1;798:34:8;6677:17;;6588:138::o;3998:195:10:-;4102:18;4143:43;4164:6;4176:9;4172:2;:13;4143:20;:43::i;3364:624:8:-;3420:8;3440:15;3458:12;3468:1;3458:9;:12::i;:::-;3440:30;-1:-1:-1;3484:13:8;;3480:179;;3520:65;3525:12;3535:1;3525:9;:12::i;:::-;3539:45;3544:36;3549:1;3552:27;889:66;3566:12;3576:1;3566:9;:12::i;:::-;3552:4;:27::i;3544:36::-;3582:1;3539:4;:45::i;3520:65::-;3513:72;;;;;3480:179;3623:25;3628:16;3633:1;889:66;3628:4;:16::i;:::-;3646:1;3623:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;10848:2006:4:-;11043:6;;11151:102;11170:73;11215:27;11228:13;:1;11234:6;11228:13;:5;:13;:::i;:::-;11215:8;:1;11221;11215:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;11170;:2;11190:6;11170:27;:19;:27;:::i;:73::-;11151:1;;:102;:5;:102;:::i;:::-;11139:114;-1:-1:-1;11263:10:4;11276:42;11295:13;:1;11301:6;11295:13;:5;:13;:::i;:::-;11276:1;;:42;:5;:42;:::i;:::-;11263:55;;11371:12;11386:127;11413:1;11428;11443:2;11459:5;11478:6;11498:5;11386:13;:127::i;:::-;11371:142;;11524:9;11536:146;11563:1;11578;11593:2;11609:5;11628:6;11648:5;11667;11536:13;:146::i;:::-;11524:158;;11693:9;11705:160;11732:1;11747;11762:2;11778:5;11797:6;11817:2;11833:3;11850:5;11705:13;:160::i;:::-;11693:172;;11881:42;11905:2;11909;11913:5;:9;;;11881:23;:42::i;:::-;11877:874;;;11939:9;11973:131;12004:2;12024;12044;12064:3;12085:5;11973:13;:131::i;:::-;11962:142;;;;;;;;12123:42;12147:2;12151;12155:5;:9;;;12123:23;:42::i;:::-;12119:622;;;12185:9;12231:179;12266:2;12290;12314;12338:3;12363:2;12387:5;12231:13;:179::i;:::-;12465:9;;;;12212:198;;-1:-1:-1;12212:198:4;;-1:-1:-1;12212:198:4;-1:-1:-1;12212:198:4;-1:-1:-1;12433:42:4;;12212:198;;;;12433:23;:42::i;:::-;12429:298;;;12504:204;12543:2;12571;12599;12627;12655;12683:3;12504:13;:204::i;:::-;12499:209;;12429:298;12119:622;;11877:874;;12784:17;12798:2;12784:13;:17::i;:::-;12779:22;-1:-1:-1;12837:10:4;12779:22;12844:2;12837:10;:6;:10;:::i;:::-;12830:17;10848:2006;-1:-1:-1;;;;;;;;;;;;10848:2006:4:o;13779:117::-;13877:12;13779:117;:::o;1187:785:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:28;:17;1742:5;1720:28;:21;:28;:::i;:::-;1762:20;:12;1779:2;1762:20;:16;:20;:::i;:::-;1690:16;:102::i;:::-;1664:128;-1:-1:-1;1802:12:10;1817:35;1664:128;1817:13;:2;1824:5;1817:13;:6;:13;:::i;:35::-;1802:50;;1862:13;1878:64;1910:31;1938:1;1910:20;:31::i;:::-;1878:27;1899:5;1878:16;:5;1888;1878:16;:9;:16;:::i;:64::-;1862:80;1187:785;-1:-1:-1;;;;;;;;;;;;;;1187:785:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4199:207:10:-;4304:19;4354:44;4375:9;4371:2;:13;4355:6;:30;4354:42;:44::i;6817:5160:8:-;6862:8;889:66;6886:1;:14;6882:74;;;6916:29;;;;;;;;;;;6882:74;6974:1;6969;:6;6965:66;;6991:29;;;;;;;;;;;6965:66;889;7044:1;:12;7040:51;;;-1:-1:-1;7079:1:8;7072:8;;7040:51;1368:66;7104:1;:15;7100:64;;-1:-1:-1;1548:75:8;7135:18;;7100:64;7174:8;7192;7210;7523:66;7511:1;:79;7507:316;;7606:79;;;;;7732:66;889;7711:11;;:88;7707:92;;7507:316;7867:66;7855:1;:79;7851:316;;7950:79;;;;;8076:66;889;8055:11;;:88;8051:92;;7851:316;8210:66;8198:1;:79;8194:314;;8293:79;;;;;8418:66;889;8397:11;;:88;8393:92;;8194:314;8551:66;8539:1;:79;8535:314;;8634:79;;;;;8759:66;889;8738:11;;:88;8734:92;;8535:314;8892:66;8880:1;:79;8876:314;;8975:79;;;;;9100:66;889;9079:11;;:88;9075:92;;8876:314;9233:66;9221:1;:79;9217:314;;9316:79;;;;;9441:66;9328;9420:11;;:88;9416:92;;9217:314;9576:66;9564:1;:79;9560:318;;9659:79;;;;;9786:66;889;9765:11;;:88;9761:92;;9560:318;9924:66;9912:1;:79;9908:320;;10007:79;;;;;10135:66;889;10114:11;;:88;10110:92;;9908:320;10275:66;10263:1;:79;10259:322;;10358:79;;;;;10487:66;889;10466:11;;:88;10462:92;;10259:322;10746:11;;;;-1:-1:-1;10746:11:8;;-1:-1:-1;889:66:8;10771:5;;;:15;;-1:-1:-1;10849:35:8;10806:39;;;10801:45;;:83;10796:88;;;;889:66;10894:1;10890;:5;:15;;;;;;10886:19;;10997:35;10992:1;10954:35;:39;10949:1;:45;:83;;;;;;10944:88;;;;889:66;11042:1;11038;:5;:15;;;;;;11034:19;;11145:35;11140:1;11102:35;:39;11097:1;:45;:83;;;;;;11092:88;;;;889:66;11190:1;11186;:5;:15;;;;;;11182:19;;11293:35;11288:1;11250:35;:39;11245:1;:45;:83;;;;;;11240:88;;;;889:66;11338:1;11334;:5;:15;;;;;;11330:19;;11441:35;11436:1;11398:35;:39;11393:1;:45;:83;;;;;;11388:88;;;;889:66;11486:1;11482;:5;:15;;;;;;11478:19;;11589:35;11584:1;11546:35;:39;11541:1;:45;:83;;;;;;11536:88;;;;889:66;11634:1;11630;:5;:15;;;;;;11626:19;;11737:35;11732:1;11694:35;:39;11689:1;:45;:83;;;;;;11684:88;;;;889:66;11782:1;11778;:5;:15;;;;;;11774:19;;11885:35;11880:1;11842:35;:39;11837:1;:45;:83;;;;;;11832:88;;;;6817:5160;;;;;;:::o;12074:5613::-;12120:8;1548:75;12144:15;;12140:105;;;-1:-1:-1;12233:1:8;12226:8;;12140:105;12258:6;12254:51;;-1:-1:-1;889:66:8;12280:14;;12254:51;1488:1;12318;:15;12314:77;;;12350:30;;;;;;;;;;;12314:77;889:66;12860;12856:70;;12940:5;;;:15;;;12966:18;12962:22;;12957:27;;;;;12856:70;;13024:5;;;:15;13020:19;;13046:1;13050:18;13046:22;13041:27;;;;889:66;13112:1;13108;:5;:15;;;;;;13104:19;;13130:1;13134:18;13130:22;13125:27;;;;889:66;13196:1;13192;:5;:15;;;;;;13188:19;;13214:1;13218:18;13214:22;13209:27;;;;889:66;13280:1;13276;:5;:15;;;;;;13272:19;;13298:1;13302:18;13298:22;13293:27;;;;889:66;13364:1;13360;:5;:15;;;;;;13356:19;;13382:1;13386:18;13382:22;13377:27;;;;889:66;13448:1;13444;:5;:15;;;;;;13440:19;;13466:1;13470:18;13466:22;13461:27;;;;889:66;13532:1;13528;:5;:15;;;;;;13524:19;;13550:1;13554:18;13550:22;13545:27;;;;889:66;13616:1;13612;:5;:15;;;;;;13608:19;;13634:1;13638:18;13634:22;13629:27;;;;889:66;13700:1;13696;:5;:15;;;;;;13692:19;;13718:1;13722:18;13718:22;13713:27;;;;889:66;13784:1;13780;:5;:15;;;;;;13776:19;;13802:1;13806:18;13802:22;13797:27;;;;889:66;13868:1;13864;:5;:15;;;;;;13860:19;;13886:1;13890:18;13886:22;13881:27;;;;889:66;13952:1;13948;:5;:15;;;;;;13944:19;;13970:1;13974:18;13970:22;13965:27;;;;889:66;14036:1;14032;:5;:15;;;;;;14028:19;;14054:1;14058:18;14054:22;14049:27;;;;889:66;14120:1;14116;:5;:15;;;;;;14112:19;;14138:1;14142:18;14138:22;14133:27;;;;889:66;14204:1;14200;:5;:15;;;;;;14196:19;;14222:1;14226:18;14222:22;14217:27;;;;889:66;14288:1;14284;:5;:15;;;;;;14280:19;;14306:1;14310:18;14306:22;14301:27;;;;889:66;14372:1;14368;:5;:15;;;;;;14364:19;;14390:1;14394:18;14390:22;14385:27;;;;889:66;14456:1;14452;:5;:15;;;;;14686:2;;;;;;14540:18;14452:15;;;14469:27;;;14536:22;:26;;889:66;14536:36;;14452:15;-1:-1:-1;14733:66:8;14722:78;;14721:85;14717:304;;14930:66;14837;14826:78;;:171;14822:175;;14717:304;15065:66;15054:78;;15053:85;15049:304;;15262:66;15169;15158:78;;:171;15154:175;;15049:304;15396:66;15385:78;;15384:85;15380:303;;15593:66;15500;15489:78;;:171;15485:175;;15380:303;15726:66;15715:78;;15714:85;15710:303;;15923:66;15830;15819:78;;:171;15815:175;;15710:303;16056:66;16045:78;;16044:85;16040:303;;16253:66;16160;16149:78;;:171;16145:175;;16040:303;16386:66;16375:78;;16374:85;16370:303;;16583:66;16490;16479:78;;:171;16475:175;;16370:303;16718:66;16707:78;;16706:85;16702:305;;16915:66;16822;16811:78;;:171;16807:175;;16702:305;17053:66;17042:78;;17041:85;17037:306;;17250:66;17157;17146:78;;:171;17142:175;;17037:306;17390:66;17379:78;;17378:85;17374:307;;17587:66;17494;17483:78;;:171;17479:175;;17374:307;12074:5613;;;;;:::o;5396:942:4:-;5596:6;5618:10;5631:31;5659:1;5631:20;:31::i;:::-;5618:44;;5672:10;5685:65;5728:21;5747:1;5728:5;:14;;;:18;;:21;;;;:::i;:::-;5685:38;5720:2;5685:30;5713:1;5685:23;5693:5;:14;;;5685:3;:7;;:23;;;;:::i;:65::-;5672:78;;5761:12;5776:132;5806:92;5896:1;5806:72;5876:1;5806:52;5855:2;5806:31;5834:1;5806:20;:31::i;:92::-;5776:12;:3;:10;:12::i;:132::-;5761:147;;5918:12;5935:82;6013:3;5935:60;:42;5971:5;5935:18;:16;:18::i;:42::-;:58;:60::i;:82::-;5933:85;;5918:100;;6030:12;6055:1;6046:5;:10;;6045:121;;6098:68;6138:14;6140:5;6139:6;;6138:12;:14::i;6098:68::-;6045:121;;;6072:11;:5;:9;:11::i;:::-;6030:136;-1:-1:-1;6177:12:4;6192:60;6240:11;:3;6248:2;6240:11;:7;:11;:::i;:::-;6192:30;6193:4;;;;6216:5;6192:30;:23;:30;:::i;:60::-;6177:75;;6263:12;6278:31;6295:6;6303:5;6278:16;:31::i;6344:544::-;6566:6;;6603:27;6609:20;6615:13;:5;6625:2;6615:13;:9;:13;:::i;:::-;6609:1;;:20;:5;:20;:::i;:::-;6603:1;;:27;:5;:27;:::i;:::-;6588:42;-1:-1:-1;6640:12:4;6655:19;6661:12;:1;6667:5;6661:12;:5;:12;:::i;6655:19::-;6640:34;-1:-1:-1;6687:12:4;6702:21;:16;:5;6640:34;6702:16;:9;:16;:::i;:21::-;6687:36;;6736:12;6751:49;6794:5;6751:38;6774:5;:14;;;6751:18;:16;:18::i;:49::-;6736:64;;6810:12;6825:34;6852:6;6825:22;6841:5;6825:11;:5;:9;:11::i;:34::-;6810:49;6344:544;-1:-1:-1;;;;;;;;;;;;;6344:544:4:o;6958:688::-;7197:6;;7234:11;:3;7242:2;7234:11;:7;:11;:::i;:::-;7219:26;;7255:12;7270:115;7302:73;7371:3;7302:51;7338:5;:14;;;7302:18;:16;:18::i;:73::-;7270:14;;;;;:115;:18;:115;:::i;:::-;7255:130;;7395:12;7410:118;7446:72;7515:2;7446:51;7482:5;:14;;;7446:18;:16;:18::i;:72::-;7410:18;:16;:18::i;:118::-;7395:133;-1:-1:-1;7538:12:4;7553:16;:5;7395:133;7553:16;:9;:16;:::i;:::-;7538:31;;7594:5;7586;:13;:53;;7634:5;7586:53;;;-1:-1:-1;7614:5:4;;7579:60;-1:-1:-1;;;;;;;;;;;6958:688:4:o;10340:442::-;10471:27;;10527:10;:2;10534;10527:10;:6;:10;:::i;:::-;10514:23;;10547:10;10560:43;10588:1;10599:2;10560:20;:43::i;:::-;10547:56;;10613:10;10626:96;10647:65;10672:26;10695:2;10672:18;:16;:18::i;:26::-;10647:3;;:65;:7;:65;:::i;:::-;10626:3;;:96;:7;:96;:::i;:::-;10613:109;;10738:10;10740:3;10744;10738:10;;;;;;;;;;;;;;;;10766:9;;;;10340:442;-1:-1:-1;;;;;10340:442:4:o;7652:766::-;7829:12;7843:9;7873:39;7909:2;7873:35;:39::i;:::-;7868:44;;7922:12;7937:152;7994:81;8071:3;7994:55;8034:5;:14;;;7994:18;:16;:18::i;:81::-;7937:14;;;;:22;;7956:2;7937:22;:18;:22;:::i;:152::-;7922:167;;8099:12;8114:156;8151:105;8253:2;8151:80;8228:2;8151:55;8191:5;:14;;;8151:18;:16;:18::i;:105::-;8114:2;;:156;:19;:156;:::i;:::-;8099:171;-1:-1:-1;8280:9:4;8292:24;8099:171;8292:13;:2;8299:5;8292:13;:6;:13;:::i;:24::-;8280:36;;8343:2;8335:5;:10;:47;;8380:2;8335:47;;;8360:5;8335:47;8327:55;-1:-1:-1;;;;7652:766:4;;;;;;;;:::o;8789:844::-;8998:12;9024;9050;9076;9137;9152:17;9162:2;9166;9152:9;:17::i;:::-;9137:32;;9179:11;9193:42;9229:5;9193:35;:42::i;:::-;9179:56;-1:-1:-1;9257:12:4;9272:22;9280:13;:2;9287:5;9280:13;:6;:13;:::i;:::-;9272:3;;:22;:7;:22;:::i;:::-;9257:37;;9316:5;9308:4;:13;9304:323;;9362:5;9385:2;9405:4;9427:39;9463:2;9427:35;:39::i;:::-;9337:143;;;;;;;;;;;;;9304:323;-1:-1:-1;9536:2:4;;-1:-1:-1;9556:5:4;;-1:-1:-1;9579:2:4;;-1:-1:-1;9599:4:4;-1:-1:-1;8789:844:4;;;;;;;;;;;;:::o;9639:490::-;9817:6;;9854:77;9911:19;9919:10;:2;9926;9919:10;:6;:10;:::i;:::-;9911:3;;:19;:7;:19;:::i;:::-;9854:39;9882:10;:2;9889;9882:10;:6;:10;:::i;:::-;9854;:2;9861;9854:10;:6;:10;:::i;:77::-;9839:92;-1:-1:-1;9941:12:4;9956:60;9997:18;10004:10;:2;10011;10004:10;:6;:10;:::i;:::-;9997:2;;:18;:6;:18;:::i;:::-;9956:23;:2;9976;9956:23;:19;:23;:::i;:60::-;9941:75;-1:-1:-1;10026:12:4;10041:16;:5;9941:75;10041:16;:9;:16;:::i;:::-;10026:31;;10083:2;10075:5;:10;:47;;10120:2;10075:47;;;10100:5;10068:54;-1:-1:-1;;;;;;;;;9639:490:4:o;10135:199::-;10217:6;10251:43;10279:1;10290:2;10251:20;:43::i;:::-;10246:2;:48;:81;;10325:2;10246:81;;;-1:-1:-1;10309:1:4;;10135:199;-1:-1:-1;10135:199:4:o;5246:97:8:-;5296:8;5320:16;5325:1;889:66;5320:4;:16::i;1870:92::-;1919:8;1946:9;1950:1;1953;1946:3;:9::i;1758:106::-;1814:8;1847:1;1842;:6;;1841:16;;1856:1;1841:16;;;-1:-1:-1;1852:1:8;;1758:106;-1:-1:-1;1758:106:8:o;2983:614:10:-;3077:6;;3120:14;3129:4;;3120:14;:8;:14;:::i;:::-;3099:35;-1:-1:-1;3144:16:10;3163:21;:4;3099:35;3163:21;:8;:21;:::i;:::-;3144:40;-1:-1:-1;3194:16:10;3213:24;3144:40;;3213:24;:13;:24;:::i;:::-;3194:43;-1:-1:-1;3247:19:10;3269:24;3194:43;;3269:24;:13;:24;:::i;:::-;3247:46;-1:-1:-1;3303:23:10;3329:30;3247:46;;3329:30;:16;:30;:::i;:::-;3303:56;-1:-1:-1;3369:24:10;3396:38;3303:56;;3396:38;:20;:38;:::i;:::-;3369:65;-1:-1:-1;3444:18:10;3465:34;3369:65;3487:11;3465:34;:21;:34;:::i;:::-;3444:55;-1:-1:-1;3509:20:10;3532:28;3444:55;;3532:28;:15;:28;:::i;8523:259:4:-;8598:6;8627:148;8742:32;8770:2;8742:20;:32::i;:::-;8627:97;8684:39;8691:31;8719:1;8691:20;:31::i;:::-;8684:2;;:39;:6;:39;:::i;:::-;8627;8634:31;8662:1;8634:20;:31::i;:::-;8627:2;;:39;:6;:39;:::i;148:99:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;25054:42;25043:54;;25626:35;;25616:2;;25675:1;;25665:12;414:241;;518:2;506:9;497:7;493:23;489:32;486:2;;;-1:-1;;524:12;486:2;586:53;631:7;607:22;586:53;;662:366;;;783:2;771:9;762:7;758:23;754:32;751:2;;;-1:-1;;789:12;751:2;851:53;896:7;872:22;851:53;;;841:63;;959:53;1004:7;941:2;984:9;980:22;959:53;;;949:63;;745:283;;;;;;1035:491;;;;1173:2;1161:9;1152:7;1148:23;1144:32;1141:2;;;-1:-1;;1179:12;1141:2;85:6;72:20;97:33;124:5;97:33;;;1231:63;-1:-1;1331:2;1370:22;;72:20;97:33;72:20;97:33;;;1135:391;;1339:63;;-1:-1;;;1439:2;1478:22;;;;344:20;;1135:391;1533:257;;1645:2;1633:9;1624:7;1620:23;1616:32;1613:2;;;-1:-1;;1651:12;1613:2;223:6;217:13;25772:5;24877:13;24870:21;25750:5;25747:32;25737:2;;-1:-1;;25783:12;1797:241;;1901:2;1889:9;1880:7;1876:23;1872:32;1869:2;;;-1:-1;;1907:12;1869:2;-1:-1;344:20;;1863:175;-1:-1;1863:175;2045:366;;;2166:2;2154:9;2145:7;2141:23;2137:32;2134:2;;;-1:-1;;2172:12;2134:2;-1:-1;;344:20;;;2324:2;2363:22;;;344:20;;-1:-1;2128:283;11272:213;25054:42;25043:54;;;;2638:37;;11390:2;11375:18;;11361:124;11492:340;25054:42;25043:54;;;2497:58;;25043:54;;11818:2;11803:18;;2638:37;11646:2;11631:18;;11617:215;11839:675;25054:42;25043:54;;;2497:58;;25043:54;;;12250:2;12235:18;;2638:37;25043:54;;;;12333:2;12318:18;;2638:37;12416:2;12401:18;;2867:36;;;;12499:3;12484:19;;2867:36;;;;12077:3;12062:19;;12048:466;12521:451;25054:42;25043:54;;;2497:58;;25043:54;;;;12875:2;12860:18;;2638:37;12958:2;12943:18;;2867:36;;;;12703:2;12688:18;;12674:298;12979:443;25054:42;25043:54;;;;2497:58;;13327:2;13312:18;;2867:36;;;;13408:2;13393:18;;2867:36;13157:2;13142:18;;13128:294;13429:340;25054:42;25043:54;;;;2497:58;;13755:2;13740:18;;2867:36;13583:2;13568:18;;13554:215;13776:1521;24877:13;;24870:21;2752:34;;25054:42;25043:54;;;14372:2;14357:18;;2638:37;25043:54;;;;14455:2;14440:18;;2638:37;14536:2;14521:18;;2867:36;;;;14617:3;14602:19;;2867:36;;;;14701:3;14686:19;;2867:36;;;;14783:3;14768:19;;2867:36;;;;14867:3;14852:19;;2867:36;14949:3;14934:19;;2867:36;15031:3;15016:19;;2867:36;15116:3;15101:19;;2867:36;15199:3;15184:19;;2867:36;;;;15282:3;15267:19;;2867:36;14213:3;14198:19;;14184:1113;15304:316;2867:36;;;15606:2;15591:18;;2867:36;15446:2;15431:18;;15417:203;15627:407;15818:2;15832:47;;;3140:2;15803:18;;;24645:19;3176:66;24685:14;;;3156:87;3262:12;;;15789:245;16041:407;16232:2;16246:47;;;3513:2;16217:18;;;24645:19;3549:66;24685:14;;;3529:87;3650:66;3636:12;;;3629:88;3736:12;;;16203:245;16455:407;16646:2;16660:47;;;3987:2;16631:18;;;24645:19;4023:66;24685:14;;;4003:87;4109:12;;;16617:245;16869:407;17060:2;17074:47;;;4360:2;17045:18;;;24645:19;4396:66;24685:14;;;4376:87;4482:12;;;17031:245;17283:407;17474:2;17488:47;;;4733:2;17459:18;;;24645:19;4769:66;24685:14;;;4749:87;4855:12;;;17445:245;17697:407;17888:2;17902:47;;;5106:2;17873:18;;;24645:19;5142:66;24685:14;;;5122:87;5228:12;;;17859:245;18111:407;18302:2;18316:47;;;5479:2;18287:18;;;24645:19;5515:66;24685:14;;;5495:87;5601:12;;;18273:245;18525:407;18716:2;18730:47;;;5852:2;18701:18;;;24645:19;5888:66;24685:14;;;5868:87;5974:12;;;18687:245;18939:407;19130:2;19144:47;;;6225:2;19115:18;;;24645:19;6261:66;24685:14;;;6241:87;6362:66;6348:12;;;6341:88;6448:12;;;19101:245;19353:407;19544:2;19558:47;;;6699:2;19529:18;;;24645:19;6735:66;24685:14;;;6715:87;6821:12;;;19515:245;19767:407;19958:2;19972:47;;;7072:2;19943:18;;;24645:19;7108:66;24685:14;;;7088:87;7194:12;;;19929:245;20181:407;20372:2;20386:47;;;7445:2;20357:18;;;24645:19;7481:66;24685:14;;;7461:87;7582:66;7568:12;;;7561:88;7668:12;;;20343:245;20595:407;20786:2;20800:47;;;7919:2;20771:18;;;24645:19;7955:66;24685:14;;;7935:87;8041:12;;;20757:245;21009:407;21200:2;21214:47;;;8292:2;21185:18;;;24645:19;8328:66;24685:14;;;8308:87;8414:12;;;21171:245;21423:407;21614:2;21628:47;;;8665:2;21599:18;;;24645:19;8701:66;24685:14;;;8681:87;8787:12;;;21585:245;21837:407;22028:2;22042:47;;;9038:2;22013:18;;;24645:19;9074:66;24685:14;;;9054:87;9160:12;;;21999:245;22251:407;22442:2;22456:47;;;9411:2;22427:18;;;24645:19;9447:66;24685:14;;;9427:87;9533:12;;;22413:245;22665:407;22856:2;22870:47;;;9784:2;22841:18;;;24645:19;9820:66;24685:14;;;9800:87;9906:12;;;22827:245;23079:407;23270:2;23284:47;;;10157:2;23255:18;;;24645:19;10193:66;24685:14;;;10173:87;10294:66;10280:12;;;10273:88;10380:12;;;23241:245;23493:407;23684:2;23698:47;;;10631:2;23669:18;;;24645:19;10667:66;24685:14;;;10647:87;10753:12;;;23655:245;23907:407;24098:2;24112:47;;;11004:2;24083:18;;;24645:19;11040:66;24685:14;;;11020:87;11126:12;;;24069:245;24321:213;2867:36;;;24439:2;24424:18;;24410:124;25567:117;25054:42;25654:5;25043:54;25629:5;25626:35;25616:2;;25675:1;;25665:12"
			}
		}
	},
	"sources": {
		"Scam.sol": {
			"id": 0
		},
		"core/State.sol": {
			"id": 3
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"core/Liquidity.sol": {
			"id": 1
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"interfaces/IERC20.sol": {
			"id": 5
		},
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibToken.sol": {
			"id": 11
		}
	},
	"sourceCodes": {
		"Scam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./core/State.sol\";\nimport \"./core/Liquidity.sol\";\nimport \"./core/Swapper.sol\";\n\n\ncontract Scam is\n    State,\n    Liquidity,\n    Swapper\n{\n\n    constructor()\n        public\n    {}\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../core/State.sol\";\n\n\n/// FIXME(jalextowle): Add in the bias factor and ponzi scheme\ncontract Liquidity is\n    State,\n    IStructs\n{\n    using LibSafeMath for uint256;\n    function balanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        IStructs.State storage state = gState;\n        return state.liquidityBalance[account];\n    }\n\n    /// @dev Allows a sender to deposit tokens into the contract to provide liquidity.\n    /// @param x_amount The amount of x that should be taken from the sender's balance.\n    /// @param y_amount The amount of x that should be taken from the sender's balance.\n    function addLiquidity(uint256 x_amount, uint256 y_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n        int256 xAmountFixed = LibFixedMath.toFixed(x_amount, 10**18);\n        int256 yAmountFixed = LibFixedMath.toFixed(y_amount, 10**6);\n\n        // Ensure that the amount of x and y that are being deposited are proportional.\n       require(\n            xAmountFixed.mul(state.y) == yAmountFixed.mul(state.x),\n            \"Liquidty:Amount deposited not proportional\"\n        );\n\n        // Charge the sender the amount of x and y tokens that were specified\n        IERC20(state.xAddress).transferFrom(msg.sender, address(this), x_amount);\n        IERC20(state.yAddress).transferFrom(msg.sender, address(this), y_amount);\n\n        // Grant the sender some liquidity tokens.\n        // FIXME(jalextowle): (Look into whether more precision is needed)\n        uint256 liquidity_reward;\n        if (state.x == 0) {\n            liquidity_reward = 0;\n            state.l = 1;\n        } else {\n            liquidity_reward = x_amount.safeMul(state.l).safeDiv(uint256(state.x) >> 127);\n        }\n\n        // Increase the balances of x and y\n        state.x = LibFixedMath.add(state.x, xAmountFixed);\n        state.y = LibFixedMath.add(state.y, yAmountFixed);\n\n        // Grant the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeAdd(\n            liquidity_reward\n        );\n        state.l = state.l.safeAdd(liquidity_reward);\n    }\n\n    /// @dev Allows a sender to withdraw tokens by burning liquidity tokens.\n    /// @param l_amount The amount of liquidity tokens to burn.\n    function removeLiquidity(uint256 l_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n\n        // Calculate the amounts of tokens that should be sent to the sender.\n        uint256 x_amount = l_amount.safeMul(uint256(state.x) >> 127).safeDiv(state.l);\n        uint256 y_amount = l_amount.safeMul(uint256(state.y) >> 127).safeDiv(state.l);\n\n        // Decrease the balances of x and y\n        state.x = LibFixedMath.sub(state.x, LibFixedMath.toFixed(x_amount));\n        state.y = LibFixedMath.sub(state.y, LibFixedMath.toFixed(y_amount));\n\n        // Destroy the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeSub(\n            l_amount\n        );\n        state.l = state.l.safeAdd(l_amount);\n\n        // Reward sender in the correct amounts of x and y.\n        IERC20(state.xAddress).transfer(msg.sender, x_amount);\n        IERC20(state.yAddress).transfer(msg.sender, y_amount);\n    }\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n",
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000)); // Good for USDC, may vary w token.\n        if (deltaB >= 0) {\n            //deltaB = 0;\n            revert('Tried to purchase too much');\n        } else if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n        }\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA.mul(state.eToKappa) < pBarA) {\n            newPBarA = pBarA.div(state.eToKappa);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = LibScamMath.computeBaseToOneHundred(rl);\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis = LibScamMath.computeBaseToOneHundred(term1);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                LibScamMath.computeBaseToOneHundred(rh)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n        returns (int256)\n    {\n        return rl < LibFixedMath.toFixed(int256(9), int256(10))\n            ? 0\n            : rl;\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n                }\n            }\n        }\n\n        // Step 6\n        rl = _computeStep6(rl);\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}"
	},
	"sourceTreeHashHex": "0xd3e9d67e8a1aa39f2ecd160d1dbdcbc8e5567434b535518acaa7574cf6a60b72",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}