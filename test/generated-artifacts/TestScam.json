{
	"schemaVersion": "2.0.0",
	"contractName": "TestScam",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhoDenominator",
						"type": "uint256"
					}
				],
				"name": "init",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "runBasicTest",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052611c61806100136000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639c8f9f23116100505780639c8f9f231461006c578063a5843f0814610089578063df791e501461009c57610067565b806351c6590a1461006c578063978ca36f14610081575b600080fd5b61007f61007a366004611844565b6100af565b005b61007f6100b2565b61007f61009736600461185c565b610168565b61007f6100aa366004611804565b6101be565b50565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116600190811790925581541660021790556100f6620186a061036c565b600255610105620186a061036c565b600355610112600161036c565b600455606360068190556101279060646103c8565b60075561013760056127106103c8565b6008556000546001546101669173ffffffffffffffffffffffffffffffffffffffff90811691166127106101be565b565b8160010181146101ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906118bf565b60405180910390fd5b6101b782826103c8565b6007555050565b6101c6611777565b6101ce610469565b905060006101db8361036c565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561023f5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561025e57505050506040820151606083015160808401516001610307565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156102b65750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156102d55785606001519350856040015192508560a001519150610307565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a49061192d565b6000610316858585898b6104fc565b90507fe317dab6c24412531a104b7fae35d5271976c773fae5615e5fba0b023472576881604051610347919061187d565b60405180910390a150505050505050610367565b9063ffffffff61067d16565b505050565b6000808212156103a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906119f8565b6103c2826f800000000000000000000000000000006106dc565b92915050565b600080831215610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611b31565b600082121561043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611964565b61046261045c846f800000000000000000000000000000006106dc565b83610752565b9392505050565b610471611777565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c5461016082015290565b60008061050f8787878660e00151610821565b9050600081816105258a8863ffffffff6106d016565b905060005b60148110156105f157600061053f85856108f3565b9050600061055b610556838d63ffffffff61091b16565b610944565b905060006105926105728c8563ffffffff61067d16565b6105868561035b898763ffffffff61067d16565b9063ffffffff6106d016565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e8284836040516105c793929190611886565b60405180910390a18c8113156105df578295506105e3565b8296505b50505080600101905061052a565b50919998505050505050505050565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611afa565b61046283836000036109f3565b60006f8000000000000000000000000000000082156106af575065010000000000909105906a80000000000000000000005b60006106bb85856106dc565b90508181816106c657fe5b0595945050505050565b600061046283836109f3565b60008215806106e9575081155b156106f6575060006103c2565b508181028183828161070457fe5b0514158061071b57508282828161071757fe5b0514155b156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611a8c565b60008161078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611b8e565b7f8000000000000000000000000000000000000000000000000000000000000000831480156107d95750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611bc5565b81838161081957fe5b059392505050565b60008061083c61082f610600565b849063ffffffff61061416565b9050600061086861086387610857888b63ffffffff61067d16565b9063ffffffff61091b16565b610a69565b9050600061087c838363ffffffff61067d16565b9050600061088982611153565b9050600061089d888363ffffffff61067d16565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6108cd86611761565b6040516108de95949392919061189c565b60405180910390a19998505050505050505050565b600061046261090b610903610600565b610586610600565b610857858563ffffffff6106d016565b600061093561045c846a80000000000000000000006106dc565b65010000000000029392505050565b600080610957838063ffffffff61067d16565b9050600061096b848363ffffffff61067d16565b9050600061097f828063ffffffff61067d16565b90506000610993828063ffffffff61067d16565b905060006109a7828063ffffffff61067d16565b905060006109bb828063ffffffff61067d16565b905060006109cf828063ffffffff61067d16565b905060006109e3828863ffffffff61067d16565b985050505050505050505b919050565b818101600083128015610a065750600082125b8015610a1157508281135b80610a325750600083138015610a275750600082135b8015610a3257508281125b156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611ac3565b60006f80000000000000000000000000000000821315610ab5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906119c1565b60008213610aef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906118f6565b6f80000000000000000000000000000000821415610b0f575060006109ee565b640733048c5a8213610b4257507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006109ee565b60008060006a01c8464f761647600000008513610ba1577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610bff577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610c61577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610cc5577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610d29577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610d8d577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610df1577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610e55577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610eb9577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610f2f57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610f6057fe5b05840193506f8000000000000000000000000000000081830281610f8057fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610fb157fe5b05840193506f8000000000000000000000000000000081830281610fd157fe5b059150700400000000000000000000000000000000836f924924924924924924924924924924920383028161100257fe5b05840193506f800000000000000000000000000000008183028161102257fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161105357fe5b05840193506f800000000000000000000000000000008183028161107357fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b038302816110a457fe5b05840193506f80000000000000000000000000000000818302816110c457fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816110f557fe5b05840193506f800000000000000000000000000000008183028161111557fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161114657fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611185575060006109ee565b816111a157506f800000000000000000000000000000006109ee565b60008213156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611a55565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161124857fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161127557fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816112a157fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816112cd57fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816112f957fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161132457fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161134f57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161137957fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816113a357fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816113cd57fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816113f657fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161141f57fe5b05905080621c638002830192506f800000000000000000000000000000008282028161144757fe5b059050806201c63802830192506f800000000000000000000000000000008282028161146f57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161149657fe5b0590508061017c02830192506f80000000000000000000000000000000828202816114bd57fe5b05905080601402830192506f80000000000000000000000000000000828202816114e357fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611552577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611594577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156115d657701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611618577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b70010000000000000000000000000000000084161561165a5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f8000000000000000000000000000000084161561169a576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156116da576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f2000000000000000000000000000000084161561171a576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f1000000000000000000000000000000084161561175a576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611818578283fd5b833561182381611bfc565b9250602084013561183381611bfc565b929592945050506040919091013590565b600060208284031215611855578081fd5b5035919050565b6000806040838503121561186e578182fd5b50508035926020909101359150565b90815260200190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526015908201527f496e76616c69642076616c756520666f722072686f0000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff811681146100af57600080fdfea365627a7a72315820be72a053338097ce3e5bee30802c1a9105103141262f0f580103783069fb823f6c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0x1C61 DUP1 PUSH2 0x13 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9C8F9F23 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xA5843F08 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x9C JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x51C6590A EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0xAF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7F PUSH2 0xB2 JUMP JUMPDEST PUSH2 0x7F PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x1804 JUMP JUMPDEST PUSH2 0x1BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE DUP2 SLOAD AND PUSH1 0x2 OR SWAP1 SSTORE PUSH2 0xF6 PUSH3 0x186A0 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH2 0x105 PUSH3 0x186A0 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x112 PUSH1 0x1 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x63 PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH2 0x127 SWAP1 PUSH1 0x64 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0x137 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH2 0x166 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND PUSH2 0x2710 PUSH2 0x1BE JUMP JUMPDEST JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 EQ PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x18BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B7 DUP3 DUP3 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x7 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1777 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x469 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1DB DUP4 PUSH2 0x36C JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x23F JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x25E JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x307 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2B6 JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2D5 JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x307 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x316 DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x4FC JUMP JUMPDEST SWAP1 POP PUSH32 0xE317DAB6C24412531A104B7FAE35D5271976C773FAE5615E5FBA0B0234725768 DUP2 PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x187D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP PUSH2 0x367 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x3C2 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x462 PUSH2 0x45C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST DUP4 PUSH2 0x752 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x471 PUSH2 0x1777 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x50F DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0x821 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP2 PUSH2 0x525 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 PUSH2 0x53F DUP6 DUP6 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x55B PUSH2 0x556 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x91B AND JUMP JUMPDEST PUSH2 0x944 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x592 PUSH2 0x572 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST PUSH2 0x586 DUP6 PUSH2 0x35B DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5C7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0x5DF JUMPI DUP3 SWAP6 POP PUSH2 0x5E3 JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x52A JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1AFA JUMP JUMPDEST PUSH2 0x462 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x6AF JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x6BB DUP6 DUP6 PUSH2 0x6DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x6C6 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462 DUP4 DUP4 PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x6E9 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x6F6 JUMPI POP PUSH1 0x0 PUSH2 0x3C2 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x704 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x71B JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x717 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x78B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1B8E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x7D9 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x819 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83C PUSH2 0x82F PUSH2 0x600 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x614 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x868 PUSH2 0x863 DUP8 PUSH2 0x857 DUP9 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x91B AND JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x889 DUP3 PUSH2 0x1153 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x89D DUP9 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x8CD DUP7 PUSH2 0x1761 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8DE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462 PUSH2 0x90B PUSH2 0x903 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x586 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x857 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x935 PUSH2 0x45C DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x957 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x96B DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x97F DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x993 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9A7 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9BB DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9CF DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9E3 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xA06 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xA11 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xA32 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xA27 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xA32 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1AC3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0xAEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x18F6 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x0 PUSH2 0x9EE JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0xB42 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xBA1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xBFF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xC61 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xCC5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xD29 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xD8D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xDF1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xE55 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xEB9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF2F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xF60 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF80 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xFB1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xFD1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1002 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1022 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1053 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1073 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x10A4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x10C4 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x10F5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1115 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1146 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1185 JUMPI POP PUSH1 0x0 PUSH2 0x9EE JUMP JUMPDEST DUP2 PUSH2 0x11A1 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1A55 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1248 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1275 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12CD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12F9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1324 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x134F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1379 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13A3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13CD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13F6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x141F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1447 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x146F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1496 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14BD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14E3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1552 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1594 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x15D6 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1618 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x165A JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x169A JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x16DA JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x171A JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x175A JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1818 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1823 DUP2 PUSH2 0x1BFC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1833 DUP2 PUSH2 0x1BFC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1855 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076616C756520666F722072686F0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xBE PUSH19 0xA053338097CE3E5BEE30802C1A910510314126 0x2F 0xF PC ADD SUB PUSH25 0x3069FB823F6C6578706572696D656E74616CF564736F6C6343 STOP SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "155:869:10:-;;;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80639c8f9f23116100505780639c8f9f231461006c578063a5843f0814610089578063df791e501461009c57610067565b806351c6590a1461006c578063978ca36f14610081575b600080fd5b61007f61007a366004611844565b6100af565b005b61007f6100b2565b61007f61009736600461185c565b610168565b61007f6100aa366004611804565b6101be565b50565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116600190811790925581541660021790556100f6620186a061036c565b600255610105620186a061036c565b600355610112600161036c565b600455606360068190556101279060646103c8565b60075561013760056127106103c8565b6008556000546001546101669173ffffffffffffffffffffffffffffffffffffffff90811691166127106101be565b565b8160010181146101ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906118bf565b60405180910390fd5b6101b782826103c8565b6007555050565b6101c6611777565b6101ce610469565b905060006101db8361036c565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561023f5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561025e57505050506040820151606083015160808401516001610307565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156102b65750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156102d55785606001519350856040015192508560a001519150610307565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a49061192d565b6000610316858585898b6104fc565b90507fe317dab6c24412531a104b7fae35d5271976c773fae5615e5fba0b023472576881604051610347919061187d565b60405180910390a150505050505050610367565b9063ffffffff61067d16565b505050565b6000808212156103a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906119f8565b6103c2826f800000000000000000000000000000006106dc565b92915050565b600080831215610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611b31565b600082121561043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611964565b61046261045c846f800000000000000000000000000000006106dc565b83610752565b9392505050565b610471611777565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c5461016082015290565b60008061050f8787878660e00151610821565b9050600081816105258a8863ffffffff6106d016565b905060005b60148110156105f157600061053f85856108f3565b9050600061055b610556838d63ffffffff61091b16565b610944565b905060006105926105728c8563ffffffff61067d16565b6105868561035b898763ffffffff61067d16565b9063ffffffff6106d016565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e8284836040516105c793929190611886565b60405180910390a18c8113156105df578295506105e3565b8296505b50505080600101905061052a565b50919998505050505050505050565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611afa565b61046283836000036109f3565b60006f8000000000000000000000000000000082156106af575065010000000000909105906a80000000000000000000005b60006106bb85856106dc565b90508181816106c657fe5b0595945050505050565b600061046283836109f3565b60008215806106e9575081155b156106f6575060006103c2565b508181028183828161070457fe5b0514158061071b57508282828161071757fe5b0514155b156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611a8c565b60008161078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611b8e565b7f8000000000000000000000000000000000000000000000000000000000000000831480156107d95750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611bc5565b81838161081957fe5b059392505050565b60008061083c61082f610600565b849063ffffffff61061416565b9050600061086861086387610857888b63ffffffff61067d16565b9063ffffffff61091b16565b610a69565b9050600061087c838363ffffffff61067d16565b9050600061088982611153565b9050600061089d888363ffffffff61067d16565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6108cd86611761565b6040516108de95949392919061189c565b60405180910390a19998505050505050505050565b600061046261090b610903610600565b610586610600565b610857858563ffffffff6106d016565b600061093561045c846a80000000000000000000006106dc565b65010000000000029392505050565b600080610957838063ffffffff61067d16565b9050600061096b848363ffffffff61067d16565b9050600061097f828063ffffffff61067d16565b90506000610993828063ffffffff61067d16565b905060006109a7828063ffffffff61067d16565b905060006109bb828063ffffffff61067d16565b905060006109cf828063ffffffff61067d16565b905060006109e3828863ffffffff61067d16565b985050505050505050505b919050565b818101600083128015610a065750600082125b8015610a1157508281135b80610a325750600083138015610a275750600082135b8015610a3257508281125b156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611ac3565b60006f80000000000000000000000000000000821315610ab5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906119c1565b60008213610aef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a4906118f6565b6f80000000000000000000000000000000821415610b0f575060006109ee565b640733048c5a8213610b4257507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006109ee565b60008060006a01c8464f761647600000008513610ba1577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610bff577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610c61577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610cc5577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610d29577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610d8d577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610df1577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610e55577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610eb9577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610f2f57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610f6057fe5b05840193506f8000000000000000000000000000000081830281610f8057fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610fb157fe5b05840193506f8000000000000000000000000000000081830281610fd157fe5b059150700400000000000000000000000000000000836f924924924924924924924924924924920383028161100257fe5b05840193506f800000000000000000000000000000008183028161102257fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161105357fe5b05840193506f800000000000000000000000000000008183028161107357fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b038302816110a457fe5b05840193506f80000000000000000000000000000000818302816110c457fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816110f557fe5b05840193506f800000000000000000000000000000008183028161111557fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161114657fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611185575060006109ee565b816111a157506f800000000000000000000000000000006109ee565b60008213156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a490611a55565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161124857fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161127557fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816112a157fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816112cd57fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816112f957fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161132457fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161134f57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161137957fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816113a357fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816113cd57fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816113f657fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161141f57fe5b05905080621c638002830192506f800000000000000000000000000000008282028161144757fe5b059050806201c63802830192506f800000000000000000000000000000008282028161146f57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161149657fe5b0590508061017c02830192506f80000000000000000000000000000000828202816114bd57fe5b05905080601402830192506f80000000000000000000000000000000828202816114e357fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611552577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611594577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156115d657701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611618577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b70010000000000000000000000000000000084161561165a5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f8000000000000000000000000000000084161561169a576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156116da576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f2000000000000000000000000000000084161561171a576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f1000000000000000000000000000000084161561175a576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611818578283fd5b833561182381611bfc565b9250602084013561183381611bfc565b929592945050506040919091013590565b600060208284031215611855578081fd5b5035919050565b6000806040838503121561186e578182fd5b50508035926020909101359150565b90815260200190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526015908201527f496e76616c69642076616c756520666f722072686f0000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff811681146100af57600080fdfea365627a7a72315820be72a053338097ce3e5bee30802c1a9105103141262f0f580103783069fb823f6c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9C8F9F23 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xA5843F08 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x9C JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x51C6590A EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0xAF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7F PUSH2 0xB2 JUMP JUMPDEST PUSH2 0x7F PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x1804 JUMP JUMPDEST PUSH2 0x1BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE DUP2 SLOAD AND PUSH1 0x2 OR SWAP1 SSTORE PUSH2 0xF6 PUSH3 0x186A0 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH2 0x105 PUSH3 0x186A0 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x112 PUSH1 0x1 PUSH2 0x36C JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x63 PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH2 0x127 SWAP1 PUSH1 0x64 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0x137 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH2 0x166 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND PUSH2 0x2710 PUSH2 0x1BE JUMP JUMPDEST JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 EQ PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x18BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B7 DUP3 DUP3 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x7 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1777 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x469 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1DB DUP4 PUSH2 0x36C JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x23F JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x25E JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x307 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2B6 JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2D5 JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x307 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x316 DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x4FC JUMP JUMPDEST SWAP1 POP PUSH32 0xE317DAB6C24412531A104B7FAE35D5271976C773FAE5615E5FBA0B0234725768 DUP2 PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x187D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP PUSH2 0x367 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x3C2 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1964 JUMP JUMPDEST PUSH2 0x462 PUSH2 0x45C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST DUP4 PUSH2 0x752 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x471 PUSH2 0x1777 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x50F DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0x821 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP2 PUSH2 0x525 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 PUSH2 0x53F DUP6 DUP6 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x55B PUSH2 0x556 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x91B AND JUMP JUMPDEST PUSH2 0x944 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x592 PUSH2 0x572 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST PUSH2 0x586 DUP6 PUSH2 0x35B DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5C7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0x5DF JUMPI DUP3 SWAP6 POP PUSH2 0x5E3 JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x52A JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1AFA JUMP JUMPDEST PUSH2 0x462 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x6AF JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x6BB DUP6 DUP6 PUSH2 0x6DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x6C6 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462 DUP4 DUP4 PUSH2 0x9F3 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x6E9 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x6F6 JUMPI POP PUSH1 0x0 PUSH2 0x3C2 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x704 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x71B JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x717 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x78B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1B8E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x7D9 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x819 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83C PUSH2 0x82F PUSH2 0x600 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x614 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x868 PUSH2 0x863 DUP8 PUSH2 0x857 DUP9 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x91B AND JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x889 DUP3 PUSH2 0x1153 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x89D DUP9 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x8CD DUP7 PUSH2 0x1761 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8DE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462 PUSH2 0x90B PUSH2 0x903 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x586 PUSH2 0x600 JUMP JUMPDEST PUSH2 0x857 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6D0 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x935 PUSH2 0x45C DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x6DC JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x957 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x96B DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x97F DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x993 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9A7 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9BB DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9CF DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9E3 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x67D AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xA06 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xA11 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xA32 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xA27 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xA32 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1AC3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0xAEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x18F6 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x0 PUSH2 0x9EE JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0xB42 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xBA1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xBFF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xC61 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xCC5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xD29 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xD8D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xDF1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xE55 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xEB9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF2F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xF60 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xF80 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xFB1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xFD1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1002 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1022 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1053 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1073 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x10A4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x10C4 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x10F5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1115 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1146 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1185 JUMPI POP PUSH1 0x0 PUSH2 0x9EE JUMP JUMPDEST DUP2 PUSH2 0x11A1 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP1 PUSH2 0x1A55 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1248 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1275 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12CD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x12F9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1324 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x134F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1379 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13A3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13CD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x13F6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x141F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1447 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x146F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1496 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14BD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14E3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1552 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1594 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x15D6 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1618 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x165A JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x169A JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x16DA JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x171A JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x175A JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1818 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1823 DUP2 PUSH2 0x1BFC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1833 DUP2 PUSH2 0x1BFC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1855 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076616C756520666F722072686F0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xBE PUSH19 0xA053338097CE3E5BEE30802C1A910510314126 0x2F 0xF PC ADD SUB PUSH25 0x3069FB823F6C6578706572696D656E74616CF564736F6C6343 STOP SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "155:869:10:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;155:869:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;175:67:1;;;;;;;;;:::i;:::-;;264:758:10;;;:::i;314:354:0:-;;;;;;;;;:::i;383:2473:3:-;;;;;;;;;:::i;175:67:1:-;;:::o;264:758:10:-;337:6;:60;;;;;;355:42;337:60;;;;;;407;;;425:42;407:60;;;511:25;519:6;511:23;:25::i;:::-;500:8;:36;597:25;605:6;597:23;:25::i;:::-;586:8;:36;687:20;695:1;687:18;:20::i;:::-;672:12;:35;797:2;767:19;:33;;;828:47;;870:3;828:20;:47::i;:::-;810:15;:65;898:48;927:1;939:5;898:20;:48::i;:::-;885:10;:61;:6;975:15;;992;970:45;;975:15;;;;;992;1009:5;970:4;:45::i;:::-;264:758::o;314:354:0:-;518:12;533:1;518:16;499:14;:36;478:104;;;;;;;;;;;;;;;;;;;;;;611:50;632:12;646:14;611:20;:50::i;:::-;593:15;:68;-1:-1:-1;;314:354:0:o;383:2473:3:-;527:27;;:::i;:::-;557:18;:16;:18::i;:::-;527:48;;637:13;653:28;674:6;653:20;:28::i;:::-;800:14;;637:44;;-1:-1:-1;691:8:3;;;;;;;;787:27;;;;;;;:56;;;;;829:5;:14;;;818:25;;:7;:25;;;787:56;783:417;;;-1:-1:-1;;;;863:7:3;;;;888;;;;917:11;;;;952:4;783:417;;;989:5;:14;;;976:27;;:9;:27;;;:56;;;;-1:-1:-1;1018:14:3;;1007:25;;;;;;;976:56;973:227;;;1052:5;:7;;;1048:11;;1077:5;:7;;;1073:11;;1106:5;:19;;;1098:27;;973:227;;;1156:33;;;;;;;;;;;973:227;1229:12;1244:105;1265:1;1280;1295:5;1314:6;1334:5;1244:7;:105::i;:::-;1229:120;;1365:12;1371:5;1365:12;;;;;;;;;;;;;;;1388:7;;;;;;;;;1458:26;:39;:96;:39;:96;:::i;383:2473::-;;;;:::o;4349:216:7:-;4400:8;4443:1;4431;4424:21;4420:101;;;4461:49;;;;;;;;;;;4420:101;4534:24;4546:1;794:66;4534:4;:24::i;:::-;4530:28;4349:216;-1:-1:-1;;4349:216:7:o;4715:386::-;4777:8;4820:1;4808;4801:21;4797:116;;;4838:64;;;;;;;;;;;4797:116;4945:1;4933;4926:21;4922:118;;;4963:66;;;;;;;;;;;4922:118;5053:41;5058:24;5070:1;794:66;5058:4;:24::i;:::-;5091:1;5053:4;:41::i;:::-;5049:45;4715:386;-1:-1:-1;;;4715:386:7:o;275:433:2:-;337:27;;:::i;:::-;-1:-1:-1;380:14:2;;;;;;;;388:6;380:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;275:433;:::o;2948:1264:3:-;3123:8;3236:9;3248:125;3300:1;3315;3330:5;3349;:14;;;3248:38;:125::i;:::-;3236:137;-1:-1:-1;3419:17:3;3236:137;3419:17;3550:13;:1;3556:6;3550:13;:5;:13;:::i;:::-;3529:34;-1:-1:-1;3590:9:3;3585:593;3639:2;3605:1;:36;3585:593;;;3662:10;3675:51;3703:10;3715;3675:27;:51::i;:::-;3662:64;-1:-1:-1;3740:11:3;3754:51;3790:14;3662:64;3798:5;3790:14;:7;:14;:::i;:::-;3754:35;:51::i;:::-;3740:65;-1:-1:-1;3819:10:3;3832:102;3918:15;:6;3929:3;3918:15;:10;:15;:::i;:::-;3832:64;3892:3;3832:38;:11;3865:4;3832:38;:32;:38;:::i;:64::-;:85;:102;:85;:102;:::i;:::-;3819:115;;3953:84;3977:4;3999:3;4020;3953:84;;;;;;;;;;;;;;;;;4061:1;4055:3;:7;4051:117;;;4095:3;4082:16;;4051:117;;;4150:3;4137:16;;4051:117;3585:593;;;3643:3;;;;;3585:593;;;-1:-1:-1;4195:10:3;;2948:1264;-1:-1:-1;;;;;;;;;2948:1264:3:o;1581:76:7:-;794:66;;1581:76::o;1936:186::-;1992:8;928:66;2016:1;:18;2012:79;;;2050:30;;;;;;;;;;;2012:79;2104:11;2109:1;2113;2112:2;;2104:4;:11::i;2219:252::-;2275:8;794:66;2330:6;;2326:73;;-1:-1:-1;2357:5:7;2352:10;;;;2383:5;2326:73;2409:14;2426:10;2431:1;2434;2426:4;:10::i;:::-;2409:27;;2460:4;2450:7;:14;;;;;;;2219:252;-1:-1:-1;;;;;2219:252:7:o;1748:97::-;1804:8;1828:10;1833:1;1836;1828:4;:10::i;16503:245::-;16559:8;16583:6;;;:16;;-1:-1:-1;16593:6:7;;16583:16;16579:55;;;-1:-1:-1;16622:1:7;16615:8;;16579:55;-1:-1:-1;16647:5:7;;;16651:1;16647;:5;:1;16666:5;;;;;:10;;:24;;;;16689:1;16684;16680;:5;;;;;;:10;;16666:24;16662:80;;;16707:24;;;;;;;;;;;16835:260;16891:8;16915:6;16911:67;;16937:30;;;;;;;;;;;16911:67;928:66;16991:1;:18;:29;;;;;17013:1;17018:2;17013:7;16991:29;16987:83;;;17035:24;;;;;;;;;;;16987:83;17087:1;17083;:5;;;;;;;16835:260;-1:-1:-1;;;16835:260:7:o;367:573:9:-;526:15;557:9;569:32;582:18;:16;:18::i;:::-;569:8;;:32;:12;:32;:::i;:::-;557:44;-1:-1:-1;611:9:9;623:24;:19;640:1;623:12;:5;633:1;623:12;:9;:12;:::i;:::-;:16;:19;:16;:19;:::i;:::-;:22;:24::i;:::-;611:36;-1:-1:-1;657:9:9;669:16;:5;611:36;669:16;:9;:16;:::i;:::-;657:28;;695:9;707:11;:5;:9;:11::i;:::-;695:23;-1:-1:-1;728:10:9;741:16;:5;695:23;741:16;:9;:16;:::i;:::-;728:29;;773:136;810:1;825;840:5;859:8;881:18;:6;:16;:18::i;:::-;773:136;;;;;;;;;;;;;;;;;;;927:6;367:573;-1:-1:-1;;;;;;;;;367:573:9:o;946:240::-;1047:15;1085:56;1098:42;1121:18;:16;:18::i;:::-;1098;:16;:18::i;:42::-;1085:8;:1;1091;1085:8;:5;:8;:::i;2539:128:7:-;2595:8;2619:33;2624:24;2629:1;2632:15;2624:4;:24::i;2619:33::-;2655:5;2619:41;;2539:128;-1:-1:-1;;;2539:128:7:o;1237:676:9:-;1331:6;;1418:14;1427:4;;1418:14;:8;:14;:::i;:::-;1397:35;-1:-1:-1;1442:16:9;1461:21;:4;1397:35;1461:21;:8;:21;:::i;:::-;1442:40;-1:-1:-1;1492:16:9;1511:24;1442:40;;1511:24;:13;:24;:::i;:::-;1492:43;-1:-1:-1;1545:19:9;1567:24;1492:43;;1567:24;:13;:24;:::i;:::-;1545:46;-1:-1:-1;1601:23:9;1627:30;1545:46;;1627:30;:16;:30;:::i;:::-;1601:56;-1:-1:-1;1667:24:9;1694:38;1601:56;;1694:38;:20;:38;:::i;:::-;1667:65;-1:-1:-1;1742:22:9;1767:40;1667:65;;1767:40;:21;:40;:::i;:::-;1742:65;-1:-1:-1;1817:23:9;1843:30;1742:65;1863:9;1843:30;:19;:30;:::i;:::-;1817:56;-1:-1:-1;;;;;;;;;1237:676:9;;;;:::o;17155:210:7:-;17235:5;;;17211:8;17255:5;;:14;;;;;17268:1;17264;:5;17255:14;:23;;;;;17277:1;17273;:5;17255:23;17254:54;;;;17288:1;17284;:5;:14;;;;;17297:1;17293;:5;17284:14;:23;;;;;17306:1;17302;:5;17284:23;17250:109;;;17324:24;;;;;;;;;;;5551:5160;5596:8;794:66;5620:1;:14;5616:74;;;5650:29;;;;;;;;;;;5616:74;5708:1;5703;:6;5699:66;;5725:29;;;;;;;;;;;5699:66;794;5778:1;:12;5774:51;;;-1:-1:-1;5813:1:7;5806:8;;5774:51;1273:66;5838:1;:15;5834:64;;-1:-1:-1;1453:75:7;5869:18;;5834:64;5908:8;5926;5944;6257:66;6245:1;:79;6241:316;;6340:79;;;;;6466:66;794;6445:11;;:88;6441:92;;6241:316;6601:66;6589:1;:79;6585:316;;6684:79;;;;;6810:66;794;6789:11;;:88;6785:92;;6585:316;6944:66;6932:1;:79;6928:314;;7027:79;;;;;7152:66;794;7131:11;;:88;7127:92;;6928:314;7285:66;7273:1;:79;7269:314;;7368:79;;;;;7493:66;794;7472:11;;:88;7468:92;;7269:314;7626:66;7614:1;:79;7610:314;;7709:79;;;;;7834:66;794;7813:11;;:88;7809:92;;7610:314;7967:66;7955:1;:79;7951:314;;8050:79;;;;;8175:66;8062;8154:11;;:88;8150:92;;7951:314;8310:66;8298:1;:79;8294:318;;8393:79;;;;;8520:66;794;8499:11;;:88;8495:92;;8294:318;8658:66;8646:1;:79;8642:320;;8741:79;;;;;8869:66;794;8848:11;;:88;8844:92;;8642:320;9009:66;8997:1;:79;8993:322;;9092:79;;;;;9221:66;794;9200:11;;:88;9196:92;;8993:322;9480:11;;;;-1:-1:-1;9480:11:7;;-1:-1:-1;794:66:7;9505:5;;;:15;;-1:-1:-1;9583:35:7;9540:39;;;9535:45;;:83;9530:88;;;;794:66;9628:1;9624;:5;:15;;;;;;9620:19;;9731:35;9726:1;9688:35;:39;9683:1;:45;:83;;;;;;9678:88;;;;794:66;9776:1;9772;:5;:15;;;;;;9768:19;;9879:35;9874:1;9836:35;:39;9831:1;:45;:83;;;;;;9826:88;;;;794:66;9924:1;9920;:5;:15;;;;;;9916:19;;10027:35;10022:1;9984:35;:39;9979:1;:45;:83;;;;;;9974:88;;;;794:66;10072:1;10068;:5;:15;;;;;;10064:19;;10175:35;10170:1;10132:35;:39;10127:1;:45;:83;;;;;;10122:88;;;;794:66;10220:1;10216;:5;:15;;;;;;10212:19;;10323:35;10318:1;10280:35;:39;10275:1;:45;:83;;;;;;10270:88;;;;794:66;10368:1;10364;:5;:15;;;;;;10360:19;;10471:35;10466:1;10428:35;:39;10423:1;:45;:83;;;;;;10418:88;;;;794:66;10516:1;10512;:5;:15;;;;;;10508:19;;10619:35;10614:1;10576:35;:39;10571:1;:45;:83;;;;;;10566:88;;;;5551:5160;;;;;;:::o;10808:5613::-;10854:8;1453:75;10878:15;;10874:105;;;-1:-1:-1;10967:1:7;10960:8;;10874:105;10992:6;10988:51;;-1:-1:-1;794:66:7;11014:14;;10988:51;1393:1;11052;:15;11048:77;;;11084:30;;;;;;;;;;;11048:77;794:66;11594;11590:70;;11674:5;;;:15;;;11700:18;11696:22;;11691:27;;;;;11590:70;;11758:5;;;:15;11754:19;;11780:1;11784:18;11780:22;11775:27;;;;794:66;11846:1;11842;:5;:15;;;;;;11838:19;;11864:1;11868:18;11864:22;11859:27;;;;794:66;11930:1;11926;:5;:15;;;;;;11922:19;;11948:1;11952:18;11948:22;11943:27;;;;794:66;12014:1;12010;:5;:15;;;;;;12006:19;;12032:1;12036:18;12032:22;12027:27;;;;794:66;12098:1;12094;:5;:15;;;;;;12090:19;;12116:1;12120:18;12116:22;12111:27;;;;794:66;12182:1;12178;:5;:15;;;;;;12174:19;;12200:1;12204:18;12200:22;12195:27;;;;794:66;12266:1;12262;:5;:15;;;;;;12258:19;;12284:1;12288:18;12284:22;12279:27;;;;794:66;12350:1;12346;:5;:15;;;;;;12342:19;;12368:1;12372:18;12368:22;12363:27;;;;794:66;12434:1;12430;:5;:15;;;;;;12426:19;;12452:1;12456:18;12452:22;12447:27;;;;794:66;12518:1;12514;:5;:15;;;;;;12510:19;;12536:1;12540:18;12536:22;12531:27;;;;794:66;12602:1;12598;:5;:15;;;;;;12594:19;;12620:1;12624:18;12620:22;12615:27;;;;794:66;12686:1;12682;:5;:15;;;;;;12678:19;;12704:1;12708:18;12704:22;12699:27;;;;794:66;12770:1;12766;:5;:15;;;;;;12762:19;;12788:1;12792:18;12788:22;12783:27;;;;794:66;12854:1;12850;:5;:15;;;;;;12846:19;;12872:1;12876:18;12872:22;12867:27;;;;794:66;12938:1;12934;:5;:15;;;;;;12930:19;;12956:1;12960:18;12956:22;12951:27;;;;794:66;13022:1;13018;:5;:15;;;;;;13014:19;;13040:1;13044:18;13040:22;13035:27;;;;794:66;13106:1;13102;:5;:15;;;;;;13098:19;;13124:1;13128:18;13124:22;13119:27;;;;794:66;13190:1;13186;:5;:15;;;;;13420:2;;;;;;13274:18;13186:15;;;13203:27;;;13270:22;:26;;794:66;13270:36;;13186:15;-1:-1:-1;13467:66:7;13456:78;;13455:85;13451:304;;13664:66;13571;13560:78;;:171;13556:175;;13451:304;13799:66;13788:78;;13787:85;13783:304;;13996:66;13903;13892:78;;:171;13888:175;;13783:304;14130:66;14119:78;;14118:85;14114:303;;14327:66;14234;14223:78;;:171;14219:175;;14114:303;14460:66;14449:78;;14448:85;14444:303;;14657:66;14564;14553:78;;:171;14549:175;;14444:303;14790:66;14779:78;;14778:85;14774:303;;14987:66;14894;14883:78;;:171;14879:175;;14774:303;15120:66;15109:78;;15108:85;15104:303;;15317:66;15224;15213:78;;:171;15209:175;;15104:303;15452:66;15441:78;;15440:85;15436:305;;15649:66;15556;15545:78;;:171;15541:175;;15436:305;15787:66;15776:78;;15775:85;15771:306;;15984:66;15891;15880:78;;:171;15876:175;;15771:306;16124:66;16113:78;;16112:85;16108:307;;16321:66;16228;16217:78;;:171;16213:175;;16108:307;10808:5613;;;;;:::o;5164:97::-;794:66;5243:11;;;5164:97::o;155:869:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;279:491:-1:-;;;;417:2;405:9;396:7;392:23;388:32;385:2;;;-1:-1;;423:12;385:2;85:6;72:20;97:33;124:5;97:33;;;475:63;-1:-1;575:2;614:22;;72:20;97:33;72:20;97:33;;;379:391;;583:63;;-1:-1;;;683:2;722:22;;;;209:20;;379:391;777:241;;881:2;869:9;860:7;856:23;852:32;849:2;;;-1:-1;;887:12;849:2;-1:-1;209:20;;843:175;-1:-1;843:175;1025:366;;;1146:2;1134:9;1125:7;1121:23;1117:32;1114:2;;;-1:-1;;1152:12;1114:2;-1:-1;;209:20;;;1304:2;1343:22;;;209:20;;-1:-1;1108:283;7738:209;1736:36;;;7854:2;7839:18;;7825:122;7954:423;1736:36;;;8282:2;8267:18;;1736:36;;;;8363:2;8348:18;;1736:36;8122:2;8107:18;;8093:284;8384:639;1736:36;;;8765:2;8750:18;;1736:36;;;;8846:2;8831:18;;1736:36;;;;8927:2;8912:18;;1736:36;9008:3;8993:19;;1736:36;8604:3;8589:19;;8575:448;9030:407;9221:2;9235:47;;;2009:2;9206:18;;;14516:19;2045:66;14556:14;;;2025:87;2131:12;;;9192:245;9444:407;9635:2;9649:47;;;2382:2;9620:18;;;14516:19;2418:66;14556:14;;;2398:87;2504:12;;;9606:245;9858:407;10049:2;10063:47;;;2755:2;10034:18;;;14516:19;2791:66;14556:14;;;2771:87;2877:12;;;10020:245;10272:407;10463:2;10477:47;;;3128:2;10448:18;;;14516:19;3164:66;14556:14;;;3144:87;3265:66;3251:12;;;3244:88;3351:12;;;10434:245;10686:407;10877:2;10891:47;;;3602:2;10862:18;;;14516:19;3638:66;14556:14;;;3618:87;3724:12;;;10848:245;11100:407;11291:2;11305:47;;;3975:2;11276:18;;;14516:19;4011:66;14556:14;;;3991:87;4112:66;4098:12;;;4091:88;4198:12;;;11262:245;11514:407;11705:2;11719:47;;;4449:2;11690:18;;;14516:19;4485:66;14556:14;;;4465:87;4571:12;;;11676:245;11928:407;12119:2;12133:47;;;4822:2;12104:18;;;14516:19;4858:66;14556:14;;;4838:87;4944:12;;;12090:245;12342:407;12533:2;12547:47;;;5195:2;12518:18;;;14516:19;5231:66;14556:14;;;5211:87;5317:12;;;12504:245;12756:407;12947:2;12961:47;;;5568:2;12932:18;;;14516:19;5604:66;14556:14;;;5584:87;5690:12;;;12918:245;13170:407;13361:2;13375:47;;;5941:2;13346:18;;;14516:19;5977:66;14556:14;;;5957:87;6078:66;6064:12;;;6057:88;6164:12;;;13332:245;13584:407;13775:2;13789:47;;;6415:2;13760:18;;;14516:19;6451:66;14556:14;;;6431:87;6537:12;;;13746:245;13998:407;14189:2;14203:47;;;6788:2;14174:18;;;14516:19;6824:66;14556:14;;;6804:87;6910:12;;;14160:245;15346:117;14833:42;15433:5;14822:54;15408:5;15405:35;15395:2;;15454:1;;15444:12"
			}
		}
	},
	"sources": {
		"test/TestScam.sol": {
			"id": 10
		},
		"interfaces/IStructs.sol": {
			"id": 6
		},
		"Scam.sol": {
			"id": 0
		},
		"core/State.sol": {
			"id": 2
		},
		"libs/LibFixedMath.sol": {
			"id": 7
		},
		"libs/LibScamMath.sol": {
			"id": 9
		},
		"core/Liquidity.sol": {
			"id": 1
		},
		"interfaces/IERC20.sol": {
			"id": 4
		},
		"core/Swapper.sol": {
			"id": 3
		},
		"interfaces/IEvents.sol": {
			"id": 5
		},
		"libs/LibSafeMath.sol": {
			"id": 8
		}
	},
	"sourceCodes": {
		"test/TestScam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../Scam.sol\";\nimport \"../libs/LibFixedMath.sol\";\n\n\ncontract TestScam is\n    Scam\n{\n\n    using LibFixedMath for uint256;\n    using LibFixedMath for int256;\n\n    function runBasicTest()\n        external\n    {\n        // For us\n        gState.xAddress = 0x0000000000000000000000000000000000000001;\n        gState.yAddress = 0x0000000000000000000000000000000000000002;\n\n        // From Peter\n        gState.x = uint256(100000).toFixed();           // initial balance of Token X\n        gState.y = uint256(100000).toFixed();           // initial balance of Token Y\n        gState.pBarX = uint256(1).toFixed();            // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n\n        swap(gState.xAddress, gState.yAddress, 10000);\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        int256 pBarXInverted;                               // inverted expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 bisectionIterations;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        uint256 l;                                          // total liquidity token balance\n\n    }\n\n}\n",
		"Scam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./core/State.sol\";\nimport \"./core/Liquidity.sol\";\nimport \"./core/Swapper.sol\";\n\n\ncontract Scam is\n    State,\n    Liquidity,\n    Swapper\n{\n\n    constructor()\n        // State()\n        // Liquidity()\n        // Swapper()\n        public\n    {}\n\n    function init(uint256 rhoNumerator, uint256 rhoDenominator)\n        external\n        // onlyOwner\n    {\n        // We require this for fast multiplication.\n        require(\n            rhoDenominator == (rhoNumerator + 1),\n            \"Invalid value for rho\"\n        );\n\n        gState.rhoRatio = LibFixedMath.toFixed(rhoNumerator, rhoDenominator);\n    }\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\n\n\ncontract State {\n\n    IStructs.State gState;\n\n    //// HACKY WORKAROUND 'TIL WE FIX THE FIXED MATH LIB\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n\n/*\n        state.x = LibScamMath.scaleDown(state.x);\n        state.y = LibScamMath.scaleDown(state.y);\n        state.pBarX = LibScamMath.scaleDown(state.pBarX);\n\n        state.rhoRatio = LibScamMath.scaleDown(state.rhoRatio);\n        state.fee = LibScamMath.scaleDown(state.fee);\n*/\n\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n/*\n        gState.x = LibScamMath.scaleUp(state.x);\n        gState.y = LibScamMath.scaleUp(state.y);\n        gState.pBarX = LibScamMath.scaleUp(state.pBarX);\n*/\n\n        gState = state;\n    }\n\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**40;\n            base = 2**87;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1 / 2**40), b) * 2**40;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function getDecimalAsInteger(int256 f) internal pure returns (int256 n) {\n       return 0;// return f & (FIXED_1 - 1));   //(f - ) * FIXED_1;//(f * FIXED_1) / FIXED_1;//f & (FIXED_1 - 1);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        int term1 = rhoRatio.sub(LibFixedMath.one());\n        int term2 = pBarA.mul(a).div(b).ln();\n        int term3 = term1.mul(term2);\n        int term4 = term3.exp();\n        int result = pBarA.mul(term4);\n\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function scaleUp(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.mul(10**10);\n    }\n\n    function scaleDown(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.div(10**10);\n    }\n}\n",
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\n\n\ncontract Liquidity is\n    IStructs\n{\n\n    function addLiquidity(uint256 amount)\n        external\n    {\n\n    }\n\n    function removeLiquidity(uint256 amount)\n        external\n    {\n\n    }\n\n}\n",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IERC20 {\n\n    function transferFrom() external;\n\n}\n",
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../core/State.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        //external\n        public\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        // Compute initial balances (fixed point).\n        int256 deltaA = LibFixedMath.toFixed(amount);\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = state.pBarXInverted;\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute\n        int256 price = _bisect(\n            a,\n            b,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        emit Price(price);\n\n        return;\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n        .mul(price)\n        .mul(\n            LibFixedMath.one().sub(state.fee)\n        );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        if (deltaB > 0) {\n            deltaB = 0;\n        } /* else if (b.add(deltaB) <= 10^-10) { @todo add\n            deltaB = 10^-10 - b;\n        }\n        */\n\n\n        // @TODO: Handle additional edge cases\n\n        // Update balances\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            /*\n                delta_p_bar_x = (sell_token_id == 'X') * (p_bar_a_prime - p_bar_x) + ...\n                (sell_token_id == 'Y') * (1/p_bar_a_prime - p_bar_x);\n            */\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        // Make transfers\n        //IERC20(fromToken).transferFrom(msg.sender, address(this), uint256(deltaA));\n        //IERC20(toToken).transferFrom(address(this), msg.sender, uint256(deltaB));\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            uint256(deltaA),\n            uint256(deltaB)\n        );\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < /*state.bisectionIterations*/ 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            emit Bisect(\n                lhs1,\n                mid,\n                lhs\n            );\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}"
	},
	"sourceTreeHashHex": "0xb83493b3a24b6e41699ff378c7dba53f34ea01b96fd13427ca95b99f960d753a",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}