{
	"schemaVersion": "2.0.0",
	"contractName": "TestScam",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "xAddress",
						"type": "address"
					},
					{
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "runBasicTest",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "l_amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "x_amount",
						"type": "uint256"
					},
					{
						"name": "y_amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"name": "xAddress",
						"type": "address"
					},
					{
						"name": "yAddress",
						"type": "address"
					},
					{
						"name": "x",
						"type": "int256"
					},
					{
						"name": "y",
						"type": "int256"
					},
					{
						"name": "l",
						"type": "uint256"
					},
					{
						"name": "pBarX",
						"type": "int256"
					},
					{
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"name": "fee",
						"type": "int256"
					},
					{
						"name": "t",
						"type": "uint256"
					},
					{
						"name": "beta",
						"type": "int256"
					},
					{
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "fromToken",
						"type": "address"
					},
					{
						"name": "toToken",
						"type": "address"
					},
					{
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "init",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Allows a sender to deposit tokens into the contract to provide liquidity.",
					"params": {
						"x_amount": "The amount of x that should be taken from the sender's balance.",
						"y_amount": "The amount of x that should be taken from the sender's balance."
					}
				},
				"removeLiquidity(uint256)": {
					"details": "Allows a sender to withdraw tokens by burning liquidity tokens.",
					"params": {
						"l_amount": "The amount of liquidity tokens to burn."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b0319163317905561350b806100256000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639cd441da11610076578063df791e501161005b578063df791e5014610165578063e1c7392a14610178578063f2fde38b14610180576100be565b80639cd441da14610131578063afd46eb514610144576100be565b80638da5cb5b116100a75780638da5cb5b14610101578063978ca36f146101165780639c8f9f231461011e576100be565b806370a08231146100c35780637b689036146100ec575b600080fd5b6100d66100d1366004612cff565b610193565b6040516100e3919061349d565b60405180910390f35b6100ff6100fa366004612d1b565b6101bf565b005b6101096101d5565b6040516100e39190612dee565b6100ff6101f1565b6100ff61012c366004612db3565b61022c565b6100ff61013f366004612dcc565b610469565b61014c610722565b6040516100e39d9c9b9a99989796959493929190612efc565b6100d6610173366004612d50565b610777565b6100ff61092e565b6100ff61018e366004612cff565b610958565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60205260409020545b919050565b6101c7610a2a565b6101d18282610a7d565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6001546002546102299173ffffffffffffffffffffffffffffffffffffffff61010090910481169116680410d586a20a4c0000610777565b50565b60055460035460019160009161025d9190610251908690607f1c63ffffffff610bd016565b9063ffffffff610c2d16565b905060006102848360040154610251607f8660030154901c87610bd090919063ffffffff16565b905061029c836002015461029784610c7a565b610cd0565b600284015560038301546102b39061029783610c7a565b6003840155336000908152600a840160205260409020546102da908563ffffffff610d4016565b336000908152600a850160205260409020556004830154610301908563ffffffff610d8216565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb91610363913391879101612ed6565b602060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b59190810190612d91565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906104109033908590600401612ed6565b602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104629190810190612d91565b5050505050565b6001600061047f84670de0b6b3a7640000610dc1565b9050600061049084620f4240610dc1565b90506104a9836002015482610e5b90919063ffffffff16565b60038401546104bf90849063ffffffff610e5b16565b146104ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690612fb9565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9061055c90339030908a90600401612e77565b602060405180830381600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ae9190810190612d91565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061060b90339030908990600401612e77565b602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065d9190810190612d91565b50600083600201546000141561067c57506001600484015560006106a2565b61069f607f8560020154901c610251866004015489610bd090919063ffffffff16565b90505b6106b0846002015484610f19565b600285015560038401546106c49083610f19565b6003850155336000908152600a850160205260409020546106eb908263ffffffff610d8216565b336000908152600a860160205260409020556004840154610712908263ffffffff610d8216565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6000610781612c45565b610789610f25565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156107f95750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610827576000610814868661080e87610fcb565b85610fd8565b905061081f81611354565b9250506108e7565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108955750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156108b55760006108aa868661080e87610fcb565b905061081f81611361565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613129565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161091e959493929190612e36565b60405180910390a1509392505050565b61093a60016002610a7d565b6109456101f4610c7a565b6003556109536103e8610c7a565b600455565b610960610a2a565b73ffffffffffffffffffffffffffffffffffffffff81166109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906132f6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090610a1f9033908490612e0f565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906130bb565b565b60015460ff1615610aba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906130f2565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610b4160636064610dc1565b60065560636007819055610b56906064610dc1565b600855610b666005612710610dc1565b600955610b8e610b7a6001620f424061136e565b610b8261138d565b9063ffffffff610cd016565b600c55610b9f6127156103e861136e565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610bdf57506000610c27565b82820282848281610bec57fe5b0414610c24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613288565b90505b92915050565b600081610c66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613016565b6000828481610c7157fe5b04949350505050565b600080821215610cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061322b565b610c27826f800000000000000000000000000000006113a1565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061339b565b610d398383600003611417565b9392505050565b600082821115610d7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061304d565b50900390565b600082820183811015610c24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690612f82565b600080831215610dfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906133d2565b6000821215610e38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613160565b610d39610e55846f800000000000000000000000000000006113a1565b8361148d565b600080610e8c6f80000000000000000000000000000000610e87610e7e8761155c565b610e878761155c565b6113a1565b90506000610ea5610e9c86611572565b610e878661155c565b90506000610ebe610eb58761155c565b610e8787611572565b90506000610ef0610eda610ed189611572565b610e8789611572565b6f8000000000000000000000000000000061148d565b9050610f0e610f08610f028686611417565b84611417565b82611417565b979650505050505050565b6000610d398383611417565b610f2d612c45565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610c278260126115af565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561103e5750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561105d57505050506060820151608083015160c084015160016110fd565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110cb5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108b55785608001519350856060015192506110fa8660c001516110ee61138d565b9063ffffffff6115be16565b91505b60006111108585858a6101000151611638565b90506000611122868684878d8d6116ee565b9050600061115661113a8a6101200151610b8261138d565b61114a8c8563ffffffff610e5b16565b9063ffffffff610e5b16565b905061116960008263ffffffff610cd016565b9050600061117b6001620186a061136e565b9050600082126111b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906131f4565b806111c8888463ffffffff610f1916565b136111e0576111dd818863ffffffff610cd016565b91505b60006112008b61014001516111f3611855565b8d6101600151888b611859565b6101808c0151909150611219908863ffffffff610e5b16565b81131561123d576101808b0151611236908863ffffffff610e5b16565b9050611276565b866112568c610180015183610e5b90919063ffffffff16565b1215611276576101808b015161127390889063ffffffff6115be16565b90505b61127e611855565b6101408c015285156112c05761129a898d63ffffffff610f1916565b60608c01526112af888463ffffffff610f1916565b60808c015260c08b018190526112fc565b6112d0888463ffffffff610f1916565b60608c01526112e5898d63ffffffff610f1916565b60808c01526112f6816110ee61138d565b60c08c01525b6113058b61193a565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161133893929190612ea8565b60405180910390a150506000039b9a5050505050505050505050565b6000610c2782600661195c565b6000610c2782601261195c565b6000610d39610e55846f800000000000000000000000000000006113a1565b6f8000000000000000000000000000000090565b60008215806113ae575081155b156113bb57506000610c27565b50818102818382816113c957fe5b051415806113e05750828282816113dc57fe5b0514155b15610c27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061332d565b81810160008312801561142a5750600082125b801561143557508281135b80611456575060008313801561144b5750600082135b801561145657508281125b15610c27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613364565b6000816114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061342f565b7f8000000000000000000000000000000000000000000000000000000000000000831480156115145750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b1561154b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613466565b81838161155457fe5b059392505050565b6f80000000000000000000000000000000900590565b6000808213611599576f7fffffffffffffffffffffffffffffff8260000316600003610c27565b506f7fffffffffffffffffffffffffffffff1690565b6000610d398383600a0a610dc1565b6000806115ca8461155c565b905080156116155761160d6115de8561155c565b610e8761160787610e876f800000000000000000000000000000006116028b61155c565b61148d565b8661148d565b915050610c27565b61160d611632856f800000000000000000000000000000006113a1565b8461148d565b60008061164b848763ffffffff610e5b16565b9050600061165f868363ffffffff6115be16565b90506000611673838863ffffffff6115be16565b9050600061168386610b8261138d565b9050600061168f61138d565b8412156116b2576116ab6116a68361114a8761196c565b612056565b90506116d0565b6116cd6116c56116a68461114a8761196c565b6110ee61138d565b90505b6116e0818963ffffffff610e5b16565b9a9950505050505050505050565b60008061174361173661172661170a8a8863ffffffff610e5b16565b61171a8c8c63ffffffff610e5b16565b9063ffffffff610f1916565b6110ee898863ffffffff610e5b16565b899063ffffffff610e5b16565b9050600061176761175a8a8763ffffffff610f1916565b8a9063ffffffff6115be16565b905060006117798a8a8a8a8a8a612664565b9050600061178c8b8b8b8b8b878c612757565b905060006117a08c8c8c8c8c8a8a8e6127f7565b90506117b28282896101200151612890565b1561182a5760006117c6838388888c61292a565b80925081935050506117de83838a6101200151612890565b156118285760006117f384848989868e6129cd565b6101208d0151939750919550935091506118109085908590612890565b1561182657611823848484848b8b612a4f565b93505b505b505b61183382612aff565b9150611845828b63ffffffff610e5b16565b9c9b505050505050505050505050565b4390565b600080611867878703610c7a565b905060006118876116a661187a8861196c565b849063ffffffff610e5b16565b9050600061189782610b8261138d565b905060006118ab878363ffffffff610e5b16565b905060006118bf878563ffffffff610e5b16565b905060006118eb6118d6858a63ffffffff610e5b16565b6118e6878c63ffffffff610e5b16565b610f19565b90506000611903826110ee8c8c63ffffffff610e5b16565b905060006119286119146002612b21565b6110ee8461171a898963ffffffff610f1916565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610d3982600a0a840261155c565b60006f800000000000000000000000000000008213156119b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906131bd565b600082136119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613084565b6f80000000000000000000000000000000821415611a12575060006101ba565b640733048c5a8213611a4557507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006101ba565b60008060006a01c8464f761647600000008513611aa4577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611b02577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611b64577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611bc8577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611c2c577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611c90577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513611cf4577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611d58577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611dbc577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281611e3257fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281611e6357fe5b05840193506f8000000000000000000000000000000081830281611e8357fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611eb457fe5b05840193506f8000000000000000000000000000000081830281611ed457fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611f0557fe5b05840193506f8000000000000000000000000000000081830281611f2557fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611f5657fe5b05840193506f8000000000000000000000000000000081830281611f7657fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611fa757fe5b05840193506f8000000000000000000000000000000081830281611fc757fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611ff857fe5b05840193506f800000000000000000000000000000008183028161201857fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161204957fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215612088575060006101ba565b816120a457506f800000000000000000000000000000006101ba565b60008213156120df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906132bf565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161214b57fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161217857fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816121a457fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816121d057fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816121fc57fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161222757fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161225257fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161227c57fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816122a657fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816122d057fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816122f957fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161232257fe5b05905080621c638002830192506f800000000000000000000000000000008282028161234a57fe5b059050806201c63802830192506f800000000000000000000000000000008282028161237257fe5b05905080611ab802830192506f800000000000000000000000000000008282028161239957fe5b0590508061017c02830192506f80000000000000000000000000000000828202816123c057fe5b05905080601402830192506f80000000000000000000000000000000828202816123e657fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615612455577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615612497577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156124d957701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b70020000000000000000000000000000000084161561251b577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b70010000000000000000000000000000000084161561255d5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f8000000000000000000000000000000084161561259d576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156125dd576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f2000000000000000000000000000000084161561261d576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f1000000000000000000000000000000084161561265d576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806126716002612b21565b905060006126b061269089866101000151610e5b90919063ffffffff16565b610b828961114a8d61114a8a610100015189610cd090919063ffffffff16565b905060006126d66126cd8a61114a8d61114a8d61114a6004612b21565b61171a84612b3d565b905060006126f2846110ee6126ed856110ee61138d565b61196c565b6000039050600080821315612715576127106116c583600003612056565b61271e565b61271e82612056565b90506000612749612735878d63ffffffff610e5b16565b6110ee60008890038563ffffffff610f1916565b905060006119288a83612b49565b60008061278a61277d612770868a63ffffffff610e5b16565b8a9063ffffffff610cd016565b8a9063ffffffff610e5b16565b905060006127a161277d8b8763ffffffff610f1916565b905060006127b86126ed848463ffffffff6115be16565b905060006127d18261114a886101000151610b8261138d565b905060006127e6896110ee8a61114a86612056565b9d9c50505050505050505050505050565b60008061280a848663ffffffff6115be16565b905060006128386128268661114a876101000151610b8261138d565b6101008601519063ffffffff610f1916565b9050600061285c6128548861114a886101000151610b8261138d565b61171a61138d565b90506000612870838363ffffffff6115be16565b905080841261287f57806127e6565b50919b9a5050505050505050505050565b6000806128a3848663ffffffff610cd016565b905060006128b36001600a61136e565b905060006128e36128d66128c988610b8261138d565b879063ffffffff610f1916565b839063ffffffff610e5b16565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612916929190612f74565b60405180910390a190911395945050505050565b60008061293687612b60565b905060006129686129528661114a876101000151610b8261138d565b61010086015161171a908563ffffffff610e5b16565b905060006129956129888a61114a8a61114a8a6101000151610b8261138d565b849063ffffffff610f1916565b905060006129ad826110ee8c8663ffffffff610e5b16565b90508881126129bc57886129be565b805b94505050509550959350505050565b60008060008060006129df8b8b612bff565b905060006129ec82612b60565b90506000612a10612a038c8563ffffffff610e5b16565b8b9063ffffffff610cd016565b9050808213612a3557828c83612a258f612b60565b9650965096509650505050612a42565b508b955090935086925090505b9650965096509692505050565b600080612a98612a75612a68898b63ffffffff610cd016565b859063ffffffff610e5b16565b61171a612a88898b63ffffffff610e5b16565b610b82898d63ffffffff610e5b16565b90506000612acf612abf612ab28a8c63ffffffff610cd016565b879063ffffffff610e5b16565b61171a888a63ffffffff610cd016565b90506000612ae3838363ffffffff6115be16565b9050898113612af257896116e0565b9998505050505050505050565b6000612b0d6009600a61136e565b8212612b195781610c27565b506000919050565b6000610c27826f800000000000000000000000000000006113a1565b6000610c278283610e5b565b600081831315612b595781610d39565b5090919050565b600080612b73838063ffffffff610e5b16565b90506000612b87848363ffffffff610e5b16565b90506000612b9b828063ffffffff610e5b16565b90506000612baf828063ffffffff610e5b16565b90506000612bc3828063ffffffff610e5b16565b90506000612bd7828063ffffffff610e5b16565b90506000612beb828863ffffffff610e5b16565b905060006116e0828063ffffffff610e5b16565b6000610d39612c0e600a612b21565b6110ee612c2b612c1e6006612b21565b869063ffffffff610e5b16565b61171a612c386004612b21565b889063ffffffff610e5b16565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2757600080fd5b600060208284031215612d1157600080fd5b610d398383612cdb565b60008060408385031215612d2e57600080fd5b612d388484612cdb565b9150612d478460208501612cdb565b90509250929050565b600080600060608486031215612d6557600080fd5b8335612d70816134a6565b92506020840135612d80816134a6565b929592945050506040919091013590565b600060208284031215612da357600080fd5b81518015158114610c2457600080fd5b600060208284031215612dc557600080fd5b5035919050565b60008060408385031215612ddf57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461022957600080fdfea365627a7a723058204f76c36c4f175d783ec2982ba391caafeacd5495f4b3c7d6e3aa44137556b1bb6c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x350B DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xDF791E50 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x180 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x144 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x11E JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CFF JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x349D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x2D1B JUMP JUMPDEST PUSH2 0x1BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2DEE JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH2 0xFF PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x14C PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EFC JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D50 JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x92E JUMP JUMPDEST PUSH2 0xFF PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x2CFF JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0xA2A JUMP JUMPDEST PUSH2 0x1D1 DUP3 DUP3 PUSH2 0xA7D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x229 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND PUSH9 0x410D586A20A4C0000 PUSH2 0x777 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0x251 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xBD0 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC2D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x284 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x251 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xBD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x29C DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x297 DUP5 PUSH2 0xC7A JUMP JUMPDEST PUSH2 0xCD0 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x2B3 SWAP1 PUSH2 0x297 DUP4 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2DA SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD40 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x301 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x363 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3B5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x410 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x462 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x47F DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xDC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x490 DUP5 PUSH3 0xF4240 PUSH2 0xDC1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4A9 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x4BF SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST EQ PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x55C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5AE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x60B SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x639 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x65D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x67C JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x69F PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x251 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xBD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x6B0 DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x6C4 SWAP1 DUP4 PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6EB SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x712 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x781 PUSH2 0x2C45 JUMP JUMPDEST PUSH2 0x789 PUSH2 0xF25 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x7F9 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x827 JUMPI PUSH1 0x0 PUSH2 0x814 DUP7 DUP7 PUSH2 0x80E DUP8 PUSH2 0xFCB JUMP JUMPDEST DUP6 PUSH2 0xFD8 JUMP JUMPDEST SWAP1 POP PUSH2 0x81F DUP2 PUSH2 0x1354 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E7 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x895 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8B5 JUMPI PUSH1 0x0 PUSH2 0x8AA DUP7 DUP7 PUSH2 0x80E DUP8 PUSH2 0xFCB JUMP JUMPDEST SWAP1 POP PUSH2 0x81F DUP2 PUSH2 0x1361 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3129 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x91E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x93A PUSH1 0x1 PUSH1 0x2 PUSH2 0xA7D JUMP JUMPDEST PUSH2 0x945 PUSH2 0x1F4 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x953 PUSH2 0x3E8 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x960 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x32F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0xA1F SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x30BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x30F2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB41 PUSH1 0x63 PUSH1 0x64 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xB56 SWAP1 PUSH1 0x64 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xB66 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xB8E PUSH2 0xB7A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x136E JUMP JUMPDEST PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0xB9F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x136E JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBDF JUMPI POP PUSH1 0x0 PUSH2 0xC27 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xBEC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xC24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3288 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3016 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC71 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x322B JUMP JUMPDEST PUSH2 0xC27 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xD2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x339B JUMP JUMPDEST PUSH2 0xD39 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x1417 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xD7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x304D JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x2F82 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x33D2 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH2 0xD39 PUSH2 0xE55 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST DUP4 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE8C PUSH16 0x80000000000000000000000000000000 PUSH2 0xE87 PUSH2 0xE7E DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x13A1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEA5 PUSH2 0xE9C DUP7 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0xE87 DUP7 PUSH2 0x155C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBE PUSH2 0xEB5 DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 DUP8 PUSH2 0x1572 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEF0 PUSH2 0xEDA PUSH2 0xED1 DUP10 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0xE87 DUP10 PUSH2 0x1572 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x148D JUMP JUMPDEST SWAP1 POP PUSH2 0xF0E PUSH2 0xF08 PUSH2 0xF02 DUP7 DUP7 PUSH2 0x1417 JUMP JUMPDEST DUP5 PUSH2 0x1417 JUMP JUMPDEST DUP3 PUSH2 0x1417 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP4 DUP4 PUSH2 0x1417 JUMP JUMPDEST PUSH2 0xF2D PUSH2 0x2C45 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x12 PUSH2 0x15AF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x103E JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x105D JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x10FD JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x10CB JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8B5 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x10FA DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1110 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x1638 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1122 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x16EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1156 PUSH2 0x113A DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x114A DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1169 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x117B PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x136E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT PUSH2 0x11B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x31F4 JUMP JUMPDEST DUP1 PUSH2 0x11C8 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SGT PUSH2 0x11E0 JUMPI PUSH2 0x11DD DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1200 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x11F3 PUSH2 0x1855 JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x1859 JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1219 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x123D JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x1236 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1276 JUMP JUMPDEST DUP7 PUSH2 0x1256 DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x1276 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x1273 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x127E PUSH2 0x1855 JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x12C0 JUMPI PUSH2 0x129A DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x12AF DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x12FC JUMP JUMPDEST PUSH2 0x12D0 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x12E5 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x12F6 DUP2 PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x1305 DUP12 PUSH2 0x193A JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1338 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x6 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x12 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 PUSH2 0xE55 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x13AE JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x13BB JUMPI POP PUSH1 0x0 PUSH2 0xC27 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x13C9 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x13E0 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x13DC JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x332D JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x142A JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1435 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x1456 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x144B JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x1456 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3364 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x14C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x342F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1514 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x154B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3466 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1554 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x1599 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xC27 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15CA DUP5 PUSH2 0x155C JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1615 JUMPI PUSH2 0x160D PUSH2 0x15DE DUP6 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 PUSH2 0x1607 DUP8 PUSH2 0xE87 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1602 DUP12 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x148D JUMP JUMPDEST DUP7 PUSH2 0x148D JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x160D PUSH2 0x1632 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST DUP5 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x164B DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x165F DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1673 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1683 DUP7 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x168F PUSH2 0x138D JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x16B2 JUMPI PUSH2 0x16AB PUSH2 0x16A6 DUP4 PUSH2 0x114A DUP8 PUSH2 0x196C JUMP JUMPDEST PUSH2 0x2056 JUMP JUMPDEST SWAP1 POP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x16CD PUSH2 0x16C5 PUSH2 0x16A6 DUP5 PUSH2 0x114A DUP8 PUSH2 0x196C JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x16E0 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1743 PUSH2 0x1736 PUSH2 0x1726 PUSH2 0x170A DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH2 0x10EE DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1767 PUSH2 0x175A DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1779 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x2664 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x178C DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x2757 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17A0 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x27F7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17B2 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 PUSH2 0x17C6 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x292A JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0x17DE DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 PUSH2 0x17F3 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x29CD JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x1810 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x1826 JUMPI PUSH2 0x1823 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x2A4F JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1833 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x1845 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1867 DUP8 DUP8 SUB PUSH2 0xC7A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1887 PUSH2 0x16A6 PUSH2 0x187A DUP9 PUSH2 0x196C JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1897 DUP3 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18AB DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18BF DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18EB PUSH2 0x18D6 DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x18E6 DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1903 DUP3 PUSH2 0x10EE DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1928 PUSH2 0x1914 PUSH1 0x2 PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x10EE DUP5 PUSH2 0x171A DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x155C JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x19B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x31BD JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x19F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3084 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1A12 JUMPI POP PUSH1 0x0 PUSH2 0x1BA JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1A45 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1AA4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1B02 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1B64 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1BC8 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1C2C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1C90 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x1CF4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1D58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1DBC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E32 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1E63 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E83 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1EB4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1ED4 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1F05 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F25 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1F56 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F76 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1FA7 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1FC7 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1FF8 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x2018 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x2049 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x2088 JUMPI POP PUSH1 0x0 PUSH2 0x1BA JUMP JUMPDEST DUP2 PUSH2 0x20A4 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x20DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x32BF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x214B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2178 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21A4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2227 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2252 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x227C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22A6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22F9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2322 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x234A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2372 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2399 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x23C0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x23E6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2455 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2497 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24D9 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x251B JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x255D JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x259D JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x25DD JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x261D JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x265D JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2671 PUSH1 0x2 PUSH2 0x2B21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26B0 PUSH2 0x2690 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xB82 DUP10 PUSH2 0x114A DUP14 PUSH2 0x114A DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xCD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26D6 PUSH2 0x26CD DUP11 PUSH2 0x114A DUP14 PUSH2 0x114A DUP14 PUSH2 0x114A PUSH1 0x4 PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x171A DUP5 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F2 DUP5 PUSH2 0x10EE PUSH2 0x26ED DUP6 PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST PUSH2 0x196C JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x2715 JUMPI PUSH2 0x2710 PUSH2 0x16C5 DUP4 PUSH1 0x0 SUB PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x271E JUMP JUMPDEST PUSH2 0x271E DUP3 PUSH2 0x2056 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2749 PUSH2 0x2735 DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x10EE PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1928 DUP11 DUP4 PUSH2 0x2B49 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278A PUSH2 0x277D PUSH2 0x2770 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27A1 PUSH2 0x277D DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27B8 PUSH2 0x26ED DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D1 DUP3 PUSH2 0x114A DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27E6 DUP10 PUSH2 0x10EE DUP11 PUSH2 0x114A DUP7 PUSH2 0x2056 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x280A DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2838 PUSH2 0x2826 DUP7 PUSH2 0x114A DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x285C PUSH2 0x2854 DUP9 PUSH2 0x114A DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x171A PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2870 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x287F JUMPI DUP1 PUSH2 0x27E6 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28A3 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28B3 PUSH1 0x1 PUSH1 0xA PUSH2 0x136E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28E3 PUSH2 0x28D6 PUSH2 0x28C9 DUP9 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2916 SWAP3 SWAP2 SWAP1 PUSH2 0x2F74 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2936 DUP8 PUSH2 0x2B60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2968 PUSH2 0x2952 DUP7 PUSH2 0x114A DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x171A SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2995 PUSH2 0x2988 DUP11 PUSH2 0x114A DUP11 PUSH2 0x114A DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29AD DUP3 PUSH2 0x10EE DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x29BC JUMPI DUP9 PUSH2 0x29BE JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29DF DUP12 DUP12 PUSH2 0x2BFF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29EC DUP3 PUSH2 0x2B60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A10 PUSH2 0x2A03 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2A35 JUMPI DUP3 DUP13 DUP4 PUSH2 0x2A25 DUP16 PUSH2 0x2B60 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2A42 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A98 PUSH2 0x2A75 PUSH2 0x2A68 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A PUSH2 0x2A88 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0xB82 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2ACF PUSH2 0x2ABF PUSH2 0x2AB2 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AE3 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2AF2 JUMPI DUP10 PUSH2 0x16E0 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0D PUSH1 0x9 PUSH1 0xA PUSH2 0x136E JUMP JUMPDEST DUP3 SLT PUSH2 0x2B19 JUMPI DUP2 PUSH2 0xC27 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 DUP4 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2B59 JUMPI DUP2 PUSH2 0xD39 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B73 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B87 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B9B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BAF DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BC3 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BD7 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BEB DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16E0 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 PUSH2 0x2C0E PUSH1 0xA PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x2C2B PUSH2 0x2C1E PUSH1 0x6 PUSH2 0x2B21 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A PUSH2 0x2C38 PUSH1 0x4 PUSH2 0x2B21 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD39 DUP4 DUP4 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D38 DUP5 DUP5 PUSH2 0x2CDB JUMP JUMPDEST SWAP2 POP PUSH2 0x2D47 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2CDB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2D70 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2D80 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0x4f PUSH23 0xC36C4F175D783EC2982BA391CAAFEACD5495F4B3C7D6E3 0xaa DIFFICULTY SGT PUSH22 0x56B1BB6C6578706572696D656E74616CF564736F6C63 NUMBER STOP SDIV MULMOD STOP BLOCKHASH ",
				"sourceMap": "154:1081:12:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;154:1081:12;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80639cd441da11610076578063df791e501161005b578063df791e5014610165578063e1c7392a14610178578063f2fde38b14610180576100be565b80639cd441da14610131578063afd46eb514610144576100be565b80638da5cb5b116100a75780638da5cb5b14610101578063978ca36f146101165780639c8f9f231461011e576100be565b806370a08231146100c35780637b689036146100ec575b600080fd5b6100d66100d1366004612cff565b610193565b6040516100e3919061349d565b60405180910390f35b6100ff6100fa366004612d1b565b6101bf565b005b6101096101d5565b6040516100e39190612dee565b6100ff6101f1565b6100ff61012c366004612db3565b61022c565b6100ff61013f366004612dcc565b610469565b61014c610722565b6040516100e39d9c9b9a99989796959493929190612efc565b6100d6610173366004612d50565b610777565b6100ff61092e565b6100ff61018e366004612cff565b610958565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60205260409020545b919050565b6101c7610a2a565b6101d18282610a7d565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6001546002546102299173ffffffffffffffffffffffffffffffffffffffff61010090910481169116680410d586a20a4c0000610777565b50565b60055460035460019160009161025d9190610251908690607f1c63ffffffff610bd016565b9063ffffffff610c2d16565b905060006102848360040154610251607f8660030154901c87610bd090919063ffffffff16565b905061029c836002015461029784610c7a565b610cd0565b600284015560038301546102b39061029783610c7a565b6003840155336000908152600a840160205260409020546102da908563ffffffff610d4016565b336000908152600a850160205260409020556004830154610301908563ffffffff610d8216565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb91610363913391879101612ed6565b602060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b59190810190612d91565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906104109033908590600401612ed6565b602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104629190810190612d91565b5050505050565b6001600061047f84670de0b6b3a7640000610dc1565b9050600061049084620f4240610dc1565b90506104a9836002015482610e5b90919063ffffffff16565b60038401546104bf90849063ffffffff610e5b16565b146104ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690612fb9565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9061055c90339030908a90600401612e77565b602060405180830381600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ae9190810190612d91565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061060b90339030908990600401612e77565b602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065d9190810190612d91565b50600083600201546000141561067c57506001600484015560006106a2565b61069f607f8560020154901c610251866004015489610bd090919063ffffffff16565b90505b6106b0846002015484610f19565b600285015560038401546106c49083610f19565b6003850155336000908152600a850160205260409020546106eb908263ffffffff610d8216565b336000908152600a860160205260409020556004840154610712908263ffffffff610d8216565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6000610781612c45565b610789610f25565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156107f95750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610827576000610814868661080e87610fcb565b85610fd8565b905061081f81611354565b9250506108e7565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108955750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156108b55760006108aa868661080e87610fcb565b905061081f81611361565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613129565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161091e959493929190612e36565b60405180910390a1509392505050565b61093a60016002610a7d565b6109456101f4610c7a565b6003556109536103e8610c7a565b600455565b610960610a2a565b73ffffffffffffffffffffffffffffffffffffffff81166109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906132f6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090610a1f9033908490612e0f565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906130bb565b565b60015460ff1615610aba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906130f2565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610b4160636064610dc1565b60065560636007819055610b56906064610dc1565b600855610b666005612710610dc1565b600955610b8e610b7a6001620f424061136e565b610b8261138d565b9063ffffffff610cd016565b600c55610b9f6127156103e861136e565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610bdf57506000610c27565b82820282848281610bec57fe5b0414610c24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613288565b90505b92915050565b600081610c66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613016565b6000828481610c7157fe5b04949350505050565b600080821215610cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061322b565b610c27826f800000000000000000000000000000006113a1565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061339b565b610d398383600003611417565b9392505050565b600082821115610d7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061304d565b50900390565b600082820183811015610c24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690612f82565b600080831215610dfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906133d2565b6000821215610e38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613160565b610d39610e55846f800000000000000000000000000000006113a1565b8361148d565b600080610e8c6f80000000000000000000000000000000610e87610e7e8761155c565b610e878761155c565b6113a1565b90506000610ea5610e9c86611572565b610e878661155c565b90506000610ebe610eb58761155c565b610e8787611572565b90506000610ef0610eda610ed189611572565b610e8789611572565b6f8000000000000000000000000000000061148d565b9050610f0e610f08610f028686611417565b84611417565b82611417565b979650505050505050565b6000610d398383611417565b610f2d612c45565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610c278260126115af565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561103e5750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561105d57505050506060820151608083015160c084015160016110fd565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110cb5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108b55785608001519350856060015192506110fa8660c001516110ee61138d565b9063ffffffff6115be16565b91505b60006111108585858a6101000151611638565b90506000611122868684878d8d6116ee565b9050600061115661113a8a6101200151610b8261138d565b61114a8c8563ffffffff610e5b16565b9063ffffffff610e5b16565b905061116960008263ffffffff610cd016565b9050600061117b6001620186a061136e565b9050600082126111b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906131f4565b806111c8888463ffffffff610f1916565b136111e0576111dd818863ffffffff610cd016565b91505b60006112008b61014001516111f3611855565b8d6101600151888b611859565b6101808c0151909150611219908863ffffffff610e5b16565b81131561123d576101808b0151611236908863ffffffff610e5b16565b9050611276565b866112568c610180015183610e5b90919063ffffffff16565b1215611276576101808b015161127390889063ffffffff6115be16565b90505b61127e611855565b6101408c015285156112c05761129a898d63ffffffff610f1916565b60608c01526112af888463ffffffff610f1916565b60808c015260c08b018190526112fc565b6112d0888463ffffffff610f1916565b60608c01526112e5898d63ffffffff610f1916565b60808c01526112f6816110ee61138d565b60c08c01525b6113058b61193a565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161133893929190612ea8565b60405180910390a150506000039b9a5050505050505050505050565b6000610c2782600661195c565b6000610c2782601261195c565b6000610d39610e55846f800000000000000000000000000000006113a1565b6f8000000000000000000000000000000090565b60008215806113ae575081155b156113bb57506000610c27565b50818102818382816113c957fe5b051415806113e05750828282816113dc57fe5b0514155b15610c27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061332d565b81810160008312801561142a5750600082125b801561143557508281135b80611456575060008313801561144b5750600082135b801561145657508281125b15610c27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613364565b6000816114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f69061342f565b7f8000000000000000000000000000000000000000000000000000000000000000831480156115145750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b1561154b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613466565b81838161155457fe5b059392505050565b6f80000000000000000000000000000000900590565b6000808213611599576f7fffffffffffffffffffffffffffffff8260000316600003610c27565b506f7fffffffffffffffffffffffffffffff1690565b6000610d398383600a0a610dc1565b6000806115ca8461155c565b905080156116155761160d6115de8561155c565b610e8761160787610e876f800000000000000000000000000000006116028b61155c565b61148d565b8661148d565b915050610c27565b61160d611632856f800000000000000000000000000000006113a1565b8461148d565b60008061164b848763ffffffff610e5b16565b9050600061165f868363ffffffff6115be16565b90506000611673838863ffffffff6115be16565b9050600061168386610b8261138d565b9050600061168f61138d565b8412156116b2576116ab6116a68361114a8761196c565b612056565b90506116d0565b6116cd6116c56116a68461114a8761196c565b6110ee61138d565b90505b6116e0818963ffffffff610e5b16565b9a9950505050505050505050565b60008061174361173661172661170a8a8863ffffffff610e5b16565b61171a8c8c63ffffffff610e5b16565b9063ffffffff610f1916565b6110ee898863ffffffff610e5b16565b899063ffffffff610e5b16565b9050600061176761175a8a8763ffffffff610f1916565b8a9063ffffffff6115be16565b905060006117798a8a8a8a8a8a612664565b9050600061178c8b8b8b8b8b878c612757565b905060006117a08c8c8c8c8c8a8a8e6127f7565b90506117b28282896101200151612890565b1561182a5760006117c6838388888c61292a565b80925081935050506117de83838a6101200151612890565b156118285760006117f384848989868e6129cd565b6101208d0151939750919550935091506118109085908590612890565b1561182657611823848484848b8b612a4f565b93505b505b505b61183382612aff565b9150611845828b63ffffffff610e5b16565b9c9b505050505050505050505050565b4390565b600080611867878703610c7a565b905060006118876116a661187a8861196c565b849063ffffffff610e5b16565b9050600061189782610b8261138d565b905060006118ab878363ffffffff610e5b16565b905060006118bf878563ffffffff610e5b16565b905060006118eb6118d6858a63ffffffff610e5b16565b6118e6878c63ffffffff610e5b16565b610f19565b90506000611903826110ee8c8c63ffffffff610e5b16565b905060006119286119146002612b21565b6110ee8461171a898963ffffffff610f1916565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610d3982600a0a840261155c565b60006f800000000000000000000000000000008213156119b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906131bd565b600082136119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690613084565b6f80000000000000000000000000000000821415611a12575060006101ba565b640733048c5a8213611a4557507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006101ba565b60008060006a01c8464f761647600000008513611aa4577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611b02577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611b64577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611bc8577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611c2c577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611c90577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513611cf4577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611d58577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611dbc577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281611e3257fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281611e6357fe5b05840193506f8000000000000000000000000000000081830281611e8357fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611eb457fe5b05840193506f8000000000000000000000000000000081830281611ed457fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611f0557fe5b05840193506f8000000000000000000000000000000081830281611f2557fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611f5657fe5b05840193506f8000000000000000000000000000000081830281611f7657fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611fa757fe5b05840193506f8000000000000000000000000000000081830281611fc757fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611ff857fe5b05840193506f800000000000000000000000000000008183028161201857fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161204957fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215612088575060006101ba565b816120a457506f800000000000000000000000000000006101ba565b60008213156120df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f6906132bf565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161214b57fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161217857fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816121a457fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816121d057fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816121fc57fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161222757fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161225257fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161227c57fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816122a657fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816122d057fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816122f957fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161232257fe5b05905080621c638002830192506f800000000000000000000000000000008282028161234a57fe5b059050806201c63802830192506f800000000000000000000000000000008282028161237257fe5b05905080611ab802830192506f800000000000000000000000000000008282028161239957fe5b0590508061017c02830192506f80000000000000000000000000000000828202816123c057fe5b05905080601402830192506f80000000000000000000000000000000828202816123e657fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615612455577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615612497577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156124d957701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b70020000000000000000000000000000000084161561251b577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b70010000000000000000000000000000000084161561255d5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f8000000000000000000000000000000084161561259d576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156125dd576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f2000000000000000000000000000000084161561261d576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f1000000000000000000000000000000084161561265d576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806126716002612b21565b905060006126b061269089866101000151610e5b90919063ffffffff16565b610b828961114a8d61114a8a610100015189610cd090919063ffffffff16565b905060006126d66126cd8a61114a8d61114a8d61114a6004612b21565b61171a84612b3d565b905060006126f2846110ee6126ed856110ee61138d565b61196c565b6000039050600080821315612715576127106116c583600003612056565b61271e565b61271e82612056565b90506000612749612735878d63ffffffff610e5b16565b6110ee60008890038563ffffffff610f1916565b905060006119288a83612b49565b60008061278a61277d612770868a63ffffffff610e5b16565b8a9063ffffffff610cd016565b8a9063ffffffff610e5b16565b905060006127a161277d8b8763ffffffff610f1916565b905060006127b86126ed848463ffffffff6115be16565b905060006127d18261114a886101000151610b8261138d565b905060006127e6896110ee8a61114a86612056565b9d9c50505050505050505050505050565b60008061280a848663ffffffff6115be16565b905060006128386128268661114a876101000151610b8261138d565b6101008601519063ffffffff610f1916565b9050600061285c6128548861114a886101000151610b8261138d565b61171a61138d565b90506000612870838363ffffffff6115be16565b905080841261287f57806127e6565b50919b9a5050505050505050505050565b6000806128a3848663ffffffff610cd016565b905060006128b36001600a61136e565b905060006128e36128d66128c988610b8261138d565b879063ffffffff610f1916565b839063ffffffff610e5b16565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612916929190612f74565b60405180910390a190911395945050505050565b60008061293687612b60565b905060006129686129528661114a876101000151610b8261138d565b61010086015161171a908563ffffffff610e5b16565b905060006129956129888a61114a8a61114a8a6101000151610b8261138d565b849063ffffffff610f1916565b905060006129ad826110ee8c8663ffffffff610e5b16565b90508881126129bc57886129be565b805b94505050509550959350505050565b60008060008060006129df8b8b612bff565b905060006129ec82612b60565b90506000612a10612a038c8563ffffffff610e5b16565b8b9063ffffffff610cd016565b9050808213612a3557828c83612a258f612b60565b9650965096509650505050612a42565b508b955090935086925090505b9650965096509692505050565b600080612a98612a75612a68898b63ffffffff610cd016565b859063ffffffff610e5b16565b61171a612a88898b63ffffffff610e5b16565b610b82898d63ffffffff610e5b16565b90506000612acf612abf612ab28a8c63ffffffff610cd016565b879063ffffffff610e5b16565b61171a888a63ffffffff610cd016565b90506000612ae3838363ffffffff6115be16565b9050898113612af257896116e0565b9998505050505050505050565b6000612b0d6009600a61136e565b8212612b195781610c27565b506000919050565b6000610c27826f800000000000000000000000000000006113a1565b6000610c278283610e5b565b600081831315612b595781610d39565b5090919050565b600080612b73838063ffffffff610e5b16565b90506000612b87848363ffffffff610e5b16565b90506000612b9b828063ffffffff610e5b16565b90506000612baf828063ffffffff610e5b16565b90506000612bc3828063ffffffff610e5b16565b90506000612bd7828063ffffffff610e5b16565b90506000612beb828863ffffffff610e5b16565b905060006116e0828063ffffffff610e5b16565b6000610d39612c0e600a612b21565b6110ee612c2b612c1e6006612b21565b869063ffffffff610e5b16565b61171a612c386004612b21565b889063ffffffff610e5b16565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2757600080fd5b600060208284031215612d1157600080fd5b610d398383612cdb565b60008060408385031215612d2e57600080fd5b612d388484612cdb565b9150612d478460208501612cdb565b90509250929050565b600080600060608486031215612d6557600080fd5b8335612d70816134a6565b92506020840135612d80816134a6565b929592945050506040919091013590565b600060208284031215612da357600080fd5b81518015158114610c2457600080fd5b600060208284031215612dc557600080fd5b5035919050565b60008060408385031215612ddf57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461022957600080fdfea365627a7a723058204f76c36c4f175d783ec2982ba391caafeacd5495f4b3c7d6e3aa44137556b1bb6c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xDF791E50 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x180 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x144 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x11E JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CFF JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x349D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x2D1B JUMP JUMPDEST PUSH2 0x1BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2DEE JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH2 0xFF PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x14C PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EFC JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D50 JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x92E JUMP JUMPDEST PUSH2 0xFF PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x2CFF JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0xA2A JUMP JUMPDEST PUSH2 0x1D1 DUP3 DUP3 PUSH2 0xA7D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x229 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND PUSH9 0x410D586A20A4C0000 PUSH2 0x777 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0x251 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xBD0 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC2D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x284 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x251 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xBD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x29C DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x297 DUP5 PUSH2 0xC7A JUMP JUMPDEST PUSH2 0xCD0 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x2B3 SWAP1 PUSH2 0x297 DUP4 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2DA SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD40 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x301 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x363 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3B5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x410 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x462 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x47F DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xDC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x490 DUP5 PUSH3 0xF4240 PUSH2 0xDC1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4A9 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x4BF SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST EQ PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x55C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5AE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x60B SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x639 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x65D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D91 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x67C JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x69F PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x251 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xBD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x6B0 DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x6C4 SWAP1 DUP4 PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6EB SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x712 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xD82 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x781 PUSH2 0x2C45 JUMP JUMPDEST PUSH2 0x789 PUSH2 0xF25 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x7F9 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x827 JUMPI PUSH1 0x0 PUSH2 0x814 DUP7 DUP7 PUSH2 0x80E DUP8 PUSH2 0xFCB JUMP JUMPDEST DUP6 PUSH2 0xFD8 JUMP JUMPDEST SWAP1 POP PUSH2 0x81F DUP2 PUSH2 0x1354 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E7 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x895 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8B5 JUMPI PUSH1 0x0 PUSH2 0x8AA DUP7 DUP7 PUSH2 0x80E DUP8 PUSH2 0xFCB JUMP JUMPDEST SWAP1 POP PUSH2 0x81F DUP2 PUSH2 0x1361 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3129 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x91E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x93A PUSH1 0x1 PUSH1 0x2 PUSH2 0xA7D JUMP JUMPDEST PUSH2 0x945 PUSH2 0x1F4 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x953 PUSH2 0x3E8 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x960 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x32F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0xA1F SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x30BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x30F2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB41 PUSH1 0x63 PUSH1 0x64 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xB56 SWAP1 PUSH1 0x64 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xB66 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xB8E PUSH2 0xB7A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x136E JUMP JUMPDEST PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0xB9F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x136E JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBDF JUMPI POP PUSH1 0x0 PUSH2 0xC27 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xBEC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xC24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3288 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3016 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC71 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x322B JUMP JUMPDEST PUSH2 0xC27 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xD2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x339B JUMP JUMPDEST PUSH2 0xD39 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x1417 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xD7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x304D JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x2F82 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x33D2 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH2 0xD39 PUSH2 0xE55 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST DUP4 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE8C PUSH16 0x80000000000000000000000000000000 PUSH2 0xE87 PUSH2 0xE7E DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x13A1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEA5 PUSH2 0xE9C DUP7 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0xE87 DUP7 PUSH2 0x155C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBE PUSH2 0xEB5 DUP8 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 DUP8 PUSH2 0x1572 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEF0 PUSH2 0xEDA PUSH2 0xED1 DUP10 PUSH2 0x1572 JUMP JUMPDEST PUSH2 0xE87 DUP10 PUSH2 0x1572 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x148D JUMP JUMPDEST SWAP1 POP PUSH2 0xF0E PUSH2 0xF08 PUSH2 0xF02 DUP7 DUP7 PUSH2 0x1417 JUMP JUMPDEST DUP5 PUSH2 0x1417 JUMP JUMPDEST DUP3 PUSH2 0x1417 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP4 DUP4 PUSH2 0x1417 JUMP JUMPDEST PUSH2 0xF2D PUSH2 0x2C45 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x12 PUSH2 0x15AF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x103E JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x105D JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x10FD JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x10CB JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8B5 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x10FA DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1110 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x1638 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1122 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x16EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1156 PUSH2 0x113A DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x114A DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1169 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x117B PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x136E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT PUSH2 0x11B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x31F4 JUMP JUMPDEST DUP1 PUSH2 0x11C8 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SGT PUSH2 0x11E0 JUMPI PUSH2 0x11DD DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1200 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x11F3 PUSH2 0x1855 JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x1859 JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1219 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x123D JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x1236 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1276 JUMP JUMPDEST DUP7 PUSH2 0x1256 DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x1276 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x1273 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x127E PUSH2 0x1855 JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x12C0 JUMPI PUSH2 0x129A DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x12AF DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x12FC JUMP JUMPDEST PUSH2 0x12D0 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x12E5 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x12F6 DUP2 PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x1305 DUP12 PUSH2 0x193A JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1338 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x6 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH1 0x12 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 PUSH2 0xE55 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x13AE JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x13BB JUMPI POP PUSH1 0x0 PUSH2 0xC27 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x13C9 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x13E0 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x13DC JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x332D JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x142A JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1435 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x1456 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x144B JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x1456 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3364 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x14C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x342F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1514 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x154B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3466 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1554 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x1599 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xC27 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15CA DUP5 PUSH2 0x155C JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1615 JUMPI PUSH2 0x160D PUSH2 0x15DE DUP6 PUSH2 0x155C JUMP JUMPDEST PUSH2 0xE87 PUSH2 0x1607 DUP8 PUSH2 0xE87 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1602 DUP12 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x148D JUMP JUMPDEST DUP7 PUSH2 0x148D JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x160D PUSH2 0x1632 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST DUP5 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x164B DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x165F DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1673 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1683 DUP7 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x168F PUSH2 0x138D JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x16B2 JUMPI PUSH2 0x16AB PUSH2 0x16A6 DUP4 PUSH2 0x114A DUP8 PUSH2 0x196C JUMP JUMPDEST PUSH2 0x2056 JUMP JUMPDEST SWAP1 POP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x16CD PUSH2 0x16C5 PUSH2 0x16A6 DUP5 PUSH2 0x114A DUP8 PUSH2 0x196C JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x16E0 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1743 PUSH2 0x1736 PUSH2 0x1726 PUSH2 0x170A DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST PUSH2 0x10EE DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1767 PUSH2 0x175A DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1779 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x2664 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x178C DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x2757 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17A0 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x27F7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17B2 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 PUSH2 0x17C6 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x292A JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0x17DE DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 PUSH2 0x17F3 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x29CD JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x1810 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x2890 JUMP JUMPDEST ISZERO PUSH2 0x1826 JUMPI PUSH2 0x1823 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x2A4F JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1833 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x1845 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1867 DUP8 DUP8 SUB PUSH2 0xC7A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1887 PUSH2 0x16A6 PUSH2 0x187A DUP9 PUSH2 0x196C JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1897 DUP3 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18AB DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18BF DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18EB PUSH2 0x18D6 DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x18E6 DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1903 DUP3 PUSH2 0x10EE DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1928 PUSH2 0x1914 PUSH1 0x2 PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x10EE DUP5 PUSH2 0x171A DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x155C JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x19B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x31BD JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x19F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x3084 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1A12 JUMPI POP PUSH1 0x0 PUSH2 0x1BA JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1A45 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1AA4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1B02 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1B64 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1BC8 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1C2C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1C90 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x1CF4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1D58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1DBC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E32 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1E63 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1E83 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1EB4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1ED4 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1F05 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F25 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1F56 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1F76 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1FA7 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1FC7 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1FF8 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x2018 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x2049 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x2088 JUMPI POP PUSH1 0x0 PUSH2 0x1BA JUMP JUMPDEST DUP2 PUSH2 0x20A4 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x20DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F6 SWAP1 PUSH2 0x32BF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x214B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2178 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21A4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x21FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2227 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2252 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x227C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22A6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22D0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x22F9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2322 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x234A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2372 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2399 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x23C0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x23E6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2455 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2497 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x24D9 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x251B JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x255D JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x259D JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x25DD JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x261D JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x265D JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2671 PUSH1 0x2 PUSH2 0x2B21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26B0 PUSH2 0x2690 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xE5B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xB82 DUP10 PUSH2 0x114A DUP14 PUSH2 0x114A DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xCD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26D6 PUSH2 0x26CD DUP11 PUSH2 0x114A DUP14 PUSH2 0x114A DUP14 PUSH2 0x114A PUSH1 0x4 PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x171A DUP5 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F2 DUP5 PUSH2 0x10EE PUSH2 0x26ED DUP6 PUSH2 0x10EE PUSH2 0x138D JUMP JUMPDEST PUSH2 0x196C JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x2715 JUMPI PUSH2 0x2710 PUSH2 0x16C5 DUP4 PUSH1 0x0 SUB PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x271E JUMP JUMPDEST PUSH2 0x271E DUP3 PUSH2 0x2056 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2749 PUSH2 0x2735 DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x10EE PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1928 DUP11 DUP4 PUSH2 0x2B49 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278A PUSH2 0x277D PUSH2 0x2770 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27A1 PUSH2 0x277D DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27B8 PUSH2 0x26ED DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D1 DUP3 PUSH2 0x114A DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27E6 DUP10 PUSH2 0x10EE DUP11 PUSH2 0x114A DUP7 PUSH2 0x2056 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x280A DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2838 PUSH2 0x2826 DUP7 PUSH2 0x114A DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x285C PUSH2 0x2854 DUP9 PUSH2 0x114A DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x171A PUSH2 0x138D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2870 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x287F JUMPI DUP1 PUSH2 0x27E6 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28A3 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28B3 PUSH1 0x1 PUSH1 0xA PUSH2 0x136E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28E3 PUSH2 0x28D6 PUSH2 0x28C9 DUP9 PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2916 SWAP3 SWAP2 SWAP1 PUSH2 0x2F74 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2936 DUP8 PUSH2 0x2B60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2968 PUSH2 0x2952 DUP7 PUSH2 0x114A DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x171A SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2995 PUSH2 0x2988 DUP11 PUSH2 0x114A DUP11 PUSH2 0x114A DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xB82 PUSH2 0x138D JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF19 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29AD DUP3 PUSH2 0x10EE DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x29BC JUMPI DUP9 PUSH2 0x29BE JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29DF DUP12 DUP12 PUSH2 0x2BFF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29EC DUP3 PUSH2 0x2B60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A10 PUSH2 0x2A03 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2A35 JUMPI DUP3 DUP13 DUP4 PUSH2 0x2A25 DUP16 PUSH2 0x2B60 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2A42 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A98 PUSH2 0x2A75 PUSH2 0x2A68 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A PUSH2 0x2A88 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0xB82 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2ACF PUSH2 0x2ABF PUSH2 0x2AB2 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCD0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AE3 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x15BE AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2AF2 JUMPI DUP10 PUSH2 0x16E0 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0D PUSH1 0x9 PUSH1 0xA PUSH2 0x136E JUMP JUMPDEST DUP3 SLT PUSH2 0x2B19 JUMPI DUP2 PUSH2 0xC27 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC27 DUP3 DUP4 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2B59 JUMPI DUP2 PUSH2 0xD39 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B73 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B87 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B9B DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BAF DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BC3 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BD7 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BEB DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16E0 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 PUSH2 0x2C0E PUSH1 0xA PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x2C2B PUSH2 0x2C1E PUSH1 0x6 PUSH2 0x2B21 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH2 0x171A PUSH2 0x2C38 PUSH1 0x4 PUSH2 0x2B21 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE5B AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD39 DUP4 DUP4 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D38 DUP5 DUP5 PUSH2 0x2CDB JUMP JUMPDEST SWAP2 POP PUSH2 0x2D47 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2CDB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2D70 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2D80 DUP2 PUSH2 0x34A6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0x4f PUSH23 0xC36C4F175D783EC2982BA391CAAFEACD5495F4B3C7D6E3 0xaa DIFFICULTY SGT PUSH22 0x56B1BB6C6578706572696D656E74616CF564736F6C63 NUMBER STOP SDIV MULMOD STOP BLOCKHASH ",
				"sourceMap": "154:1081:12:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;154:1081:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;380:196:1;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;644:457:12;;;:::i;2536:1002:1:-;;;;;;;;;:::i;845:1544::-;;;;;;;;;:::i;264:28:3:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;525:1593:4;;;;;;;;;:::i;285:352:12:-;;;:::i;320:293:2:-;;;;;;;;;:::i;380:196:1:-;538:31;;;461:7;538:31;;;:22;:31;;;;;;380:196;;;;:::o;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;644:457:12:-;740:6;:15;769;;722:97;;740:15;;;;;;;;769;798:11;722:4;:97::i;:::-;;644:457::o;2536:1002:1:-;2843:7;;2818;;2679:6;;2648:28;;2793:58;;2843:7;2793:41;;:8;;2830:3;2810:23;2793:41;:16;:41;:::i;:::-;:49;:58;:49;:58;:::i;:::-;2774:77;;2861:16;2880:58;2930:5;:7;;;2880:41;2917:3;2905:5;:7;;;2897:23;;2880:8;:16;;:41;;;;:::i;:58::-;2861:77;;3003:57;3020:5;:7;;;3029:30;3050:8;3029:20;:30::i;:::-;3003:16;:57::i;:::-;2993:7;;;:67;3097:7;;;;3080:57;;3106:30;3127:8;3106:20;:30::i;3080:57::-;3070:7;;;:67;3248:10;3225:34;;;;:22;;;:34;;;;;;:74;;3281:8;3225:74;:42;:74;:::i;:::-;3211:10;3188:34;;;;:22;;;:34;;;;;:111;3319:7;;;;:25;;3335:8;3319:25;:15;:25;:::i;:::-;3309:7;;;;:35;;;;3422:14;;3415:53;;;;;3422:14;;;;;;;3415:31;;:53;;3447:10;;3459:8;;3415:53;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3415:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3415:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3415:53:1;;;;;;;;;-1:-1:-1;3485:14:1;;;;3478:53;;;;;3485:14;;;;;3478:31;;:53;;3510:10;;3522:8;;3478:53;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3478:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3478:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3478:53:1;;;;;;;;;;2536:1002;;;;:::o;845:1544::-;1003:6;972:28;1041:38;1062:8;1072:6;1041:20;:38::i;:::-;1019:60;;1089:19;1111:37;1132:8;1142:5;1111:20;:37::i;:::-;1089:59;;1296:25;1313:5;:7;;;1296:12;:16;;:25;;;;:::i;:::-;1284:7;;;;1267:25;;:12;;:25;:16;:25;:::i;:::-;:54;1246:143;;;;;;;;;;;;;;;;;;;;;;1485:14;;1478:72;;;;;1485:14;;;;;;;1478:35;;:72;;1514:10;;1534:4;;1541:8;;1478:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1478:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1478:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1478:72:1;;;;;;;;;-1:-1:-1;1567:14:1;;;;1560:72;;;;;1567:14;;;;;1560:35;;:72;;1596:10;;1616:4;;1623:8;;1560:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1560:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1560:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1560:72:1;;;;;;;;;;1769:24;1807:5;:7;;;1818:1;1807:12;1803:196;;;-1:-1:-1;1879:1:1;1869:7;;;:11;1854:1;1803:196;;;1930:58;1984:3;1972:5;:7;;;1964:23;;1930:25;1947:5;:7;;;1930:8;:16;;:25;;;;:::i;:58::-;1911:77;;1803:196;2063:39;2080:5;:7;;;2089:12;2063:16;:39::i;:::-;2053:7;;;:49;2139:7;;;;2122:39;;2148:12;2122:16;:39::i;:::-;2112:7;;;:49;2270:10;2247:34;;;;:22;;;:34;;;;;;:82;;2303:16;2247:82;:42;:82;:::i;:::-;2233:10;2210:34;;;;:22;;;:34;;;;;:119;2349:7;;;;:33;;2365:16;2349:33;:15;:33;:::i;:::-;2339:5;:7;;:43;;;;845:1544;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1593:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;767:5;:14;;;754:27;;:9;:27;;;:56;;;;;796:5;:14;;;785:25;;:7;:25;;;754:56;750:726;;;826:26;855:139;878:9;905:7;930:27;950:6;930:19;:27::i;:::-;975:5;855;:139::i;:::-;826:168;;1025:43;1048:19;1025:22;:43::i;:::-;1008:60;;750:726;;;;1101:5;:14;;;1088:27;;:9;:27;;;:56;;;;;1130:5;:14;;;1119:25;;:7;:25;;;1088:56;1085:391;;;1160:26;1189:139;1212:9;1239:7;1264:27;1284:6;1264:19;:27::i;1189:139::-;1160:168;;1359:42;1381:19;1359:21;:42::i;1085:391::-;1432:33;;;;;;;;;;;1085:391;1941:138;1967:10;1991:9;2014:7;2035:6;2055:14;1941:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1593:4;;;;;:::o;285:352:12:-;333:98;344:42;388;333:10;:98::i;:::-;485:22;493:3;485:20;:22::i;:::-;474:8;:33;568:23;576:4;568:21;:23::i;:::-;557:8;:34;285:352::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;53:282:9:-;139:7;166:6;162:45;;-1:-1:-1;195:1:9;188:8;;162:45;228:5;;;232:1;228;:5;:1;247:5;;;;;:10;243:68;;273:27;;;;;;;;;;;243:68;327:1;-1:-1:-1;53:282:9;;;;;:::o;341:224::-;427:7;454:6;450:64;;476:27;;;;;;;;;;;450:64;523:9;539:1;535;:5;;;;;;;341:224;-1:-1:-1;;;;341:224:9:o;6808:216:8:-;6859:8;6902:1;6890;6883:21;6879:101;;;6920:49;;;;;;;;;;;6879:101;6993:24;7005:1;889:66;6993:4;:24::i;2395:186::-;2451:8;1023:66;2475:1;:18;2471:79;;;2509:30;;;;;;;;;;;2471:79;2563:11;2568:1;2572;2571:2;;2563:4;:11::i;:::-;2559:15;2395:186;-1:-1:-1;;;2395:186:8:o;571:201:9:-;657:7;688:1;684;:5;680:64;;;705:28;;;;;;;;;;;680:64;-1:-1:-1;760:5:9;;;571:201::o;778:223::-;864:7;899:5;;;918;;;914:63;;;939:27;;;;;;;;;;;7174:386:8;7236:8;7279:1;7267;7260:21;7256:116;;;7297:64;;;;;;;;;;;7256:116;7404:1;7392;7385:21;7381:118;;;7422:66;;;;;;;;;;;7381:118;7512:41;7517:24;7529:1;889:66;7517:4;:24::i;:::-;7550:1;7512:4;:41::i;2678:772::-;2734:8;2755:18;2776:47;889:66;2790:32;2795:12;2805:1;2795:9;:12::i;:::-;2809;2819:1;2809:9;:12::i;:::-;2790:4;:32::i;2776:47::-;2755:68;;2911:20;2934:33;2939:13;2950:1;2939:10;:13::i;:::-;2954:12;2964:1;2954:9;:12::i;2934:33::-;2911:56;;2977:20;3000:33;3005:12;3015:1;3005:9;:12::i;:::-;3019:13;3030:1;3019:10;:13::i;3000:33::-;2977:56;;3043:23;3069:49;3074:34;3079:13;3090:1;3079:10;:13::i;:::-;3094;3105:1;3094:10;:13::i;3074:34::-;889:66;3069:4;:49::i;:::-;3043:75;;3136:77;3141:53;3146:32;3151:11;3164:13;3146:4;:32::i;:::-;3180:13;3141:4;:53::i;:::-;3196:16;3136:4;:77::i;:::-;3129:84;2678:772;-1:-1:-1;;;;;;;2678:772:8:o;2207:97::-;2263:8;2287:10;2292:1;2295;2287:4;:10::i;446:148:3:-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;2124:2993:4:-;2488:14;;;;2291:21;;;;;;;;;;2475:27;;;;;;;:56;;;;;2517:5;:14;;;2506:25;;:7;:25;;;2475:56;2471:433;;;-1:-1:-1;;;;2551:7:4;;;;2576;;;;2605:11;;;;2640:4;2471:433;;;2677:5;:14;;;2664:27;;:9;:27;;;:56;;;;;2706:5;:14;;;2695:25;;:7;:25;;;2664:56;2661:243;;;2740:5;:7;;;2736:11;;2765:5;:7;;;2761:11;;2794:35;2817:5;:11;;;2794:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2786:43;;2661:243;3003:9;3015:125;3067:1;3082;3097:5;3116;:14;;;3015:38;:125::i;:::-;3003:137;;3170:12;3185:122;3207:1;3222;3237:2;3253:5;3272:6;3292:5;3185:8;:122::i;:::-;3170:137;;3548:13;3564:112;3629:33;3652:5;:9;;;3629:18;:16;:18::i;:33::-;3564:30;:6;3588:5;3564:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3548:128;-1:-1:-1;3695:21:4;3702:1;3548:128;3695:21;:13;:21;:::i;:::-;3686:30;;3759:14;3776:47;3804:1;3815:6;3776:20;:47::i;:::-;3759:64;;3883:1;3873:6;:11;3869:188;;3926:36;;;;;;;;;;;3869:188;4000:7;3983:13;:1;3989:6;3983:13;:5;:13;:::i;:::-;:24;3979:78;;4032:14;:7;4044:1;4032:14;:11;:14;:::i;:::-;4023:23;;3979:78;4107:15;4125:155;4166:5;:7;;;4187:24;:22;:24::i;:::-;4225:5;:10;;;4249:2;4265:5;4125:27;:155::i;:::-;4306:14;;;;4107:173;;-1:-1:-1;4306:25:4;;4325:5;4306:25;:18;:25;:::i;:::-;4295:8;:36;4291:211;;;4358:14;;;;:25;;4377:5;4358:25;:18;:25;:::i;:::-;4347:36;;4291:211;;;4434:5;4403:28;4416:5;:14;;;4403:8;:12;;:28;;;;:::i;:::-;:36;4400:102;;;4476:14;;;;4466:25;;:5;;:25;:9;:25;:::i;:::-;4455:36;;4400:102;4546:24;:22;:24::i;:::-;4536:7;;;:34;4580:285;;;;4617:13;:1;4623:6;4617:13;:5;:13;:::i;:::-;4607:7;;;:23;4654:13;:1;4660:6;4654:13;:5;:13;:::i;:::-;4644:7;;;:23;4681:11;;;:22;;;4580:285;;;4744:13;:1;4750:6;4744:13;:5;:13;:::i;:::-;4734:7;;;:23;4781:13;:1;4787:6;4781:13;:5;:13;:::i;:::-;4771:7;;;:23;4822:32;4845:8;4822:18;:16;:18::i;:32::-;4808:11;;;:46;4580:285;4899:23;4916:5;4899:16;:23::i;:::-;4938:106;4976:10;5004:6;5028;4938:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5072:7:4;;;2124:2993;-1:-1:-1;;;;;;;;;;;2124:2993:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;6550:116:8:-;6610:8;6634:25;6639:16;6644:1;889:66;6639:4;:16::i;1830:76::-;889:66;;1830:76::o;18907:245::-;18963:8;18987:6;;;:16;;-1:-1:-1;18997:6:8;;18987:16;18983:55;;;-1:-1:-1;19026:1:8;19019:8;;18983:55;-1:-1:-1;19051:5:8;;;19055:1;19051;:5;:1;19070:5;;;;;:10;;:24;;;;19093:1;19088;19084;:5;;;;;;:10;;19070:24;19066:80;;;19111:24;;;;;;;;;;;19559:210;19639:5;;;19615:8;19659:5;;:14;;;;;19672:1;19668;:5;19659:14;:23;;;;;19681:1;19677;:5;19659:23;19658:54;;;;19692:1;19688;:5;:14;;;;;19701:1;19697;:5;19688:14;:23;;;;;19710:1;19706;:5;19688:23;19654:109;;;19728:24;;;;;;;;;;;19239:260;19295:8;19319:6;19315:67;;19341:30;;;;;;;;;;;19315:67;1023:66;19395:1;:18;:29;;;;;19417:1;19422:2;19417:7;19395:29;19391:83;;;19439:24;;;;;;;;;;;19391:83;19491:1;19487;:5;;;;;;;19239:260;-1:-1:-1;;;19239:260:8:o;7623:97::-;889:66;7702:11;;;7623:97::o;7726:138::-;7779:8;7810:1;7806;:5;:51;;798:34;7839:1;7838:2;;:18;7836:21;;7806:51;;;-1:-1:-1;798:34:8;7815:17;;7726:138::o;3998:195:10:-;4102:18;4143:43;4164:6;4176:9;4172:2;:13;4143:20;:43::i;4502:624:8:-;4558:8;4578:15;4596:12;4606:1;4596:9;:12::i;:::-;4578:30;-1:-1:-1;4622:13:8;;4618:179;;4658:65;4663:12;4673:1;4663:9;:12::i;:::-;4677:45;4682:36;4687:1;4690:27;889:66;4704:12;4714:1;4704:9;:12::i;:::-;4690:4;:27::i;4682:36::-;4720:1;4677:4;:45::i;4658:65::-;4651:72;;;;;4618:179;4761:25;4766:16;4771:1;889:66;4766:4;:16::i;:::-;4784:1;4761:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;10848:2006:4:-;11043:6;;11151:102;11170:73;11215:27;11228:13;:1;11234:6;11228:13;:5;:13;:::i;:::-;11215:8;:1;11221;11215:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;11170;:2;11190:6;11170:27;:19;:27;:::i;:73::-;11151:1;;:102;:5;:102;:::i;:::-;11139:114;-1:-1:-1;11263:10:4;11276:42;11295:13;:1;11301:6;11295:13;:5;:13;:::i;:::-;11276:1;;:42;:5;:42;:::i;:::-;11263:55;;11371:12;11386:127;11413:1;11428;11443:2;11459:5;11478:6;11498:5;11386:13;:127::i;:::-;11371:142;;11524:9;11536:146;11563:1;11578;11593:2;11609:5;11628:6;11648:5;11667;11536:13;:146::i;:::-;11524:158;;11693:9;11705:160;11732:1;11747;11762:2;11778:5;11797:6;11817:2;11833:3;11850:5;11705:13;:160::i;:::-;11693:172;;11881:42;11905:2;11909;11913:5;:9;;;11881:23;:42::i;:::-;11877:874;;;11939:9;11973:131;12004:2;12024;12044;12064:3;12085:5;11973:13;:131::i;:::-;11962:142;;;;;;;;12123:42;12147:2;12151;12155:5;:9;;;12123:23;:42::i;:::-;12119:622;;;12185:9;12231:179;12266:2;12290;12314;12338:3;12363:2;12387:5;12231:13;:179::i;:::-;12465:9;;;;12212:198;;-1:-1:-1;12212:198:4;;-1:-1:-1;12212:198:4;-1:-1:-1;12212:198:4;-1:-1:-1;12433:42:4;;12212:198;;;;12433:23;:42::i;:::-;12429:298;;;12504:204;12543:2;12571;12599;12627;12655;12683:3;12504:13;:204::i;:::-;12499:209;;12429:298;12119:622;;11877:874;;12784:17;12798:2;12784:13;:17::i;:::-;12779:22;-1:-1:-1;12837:10:4;12779:22;12844:2;12837:10;:6;:10;:::i;:::-;12830:17;10848:2006;-1:-1:-1;;;;;;;;;;;;10848:2006:4:o;1107:126:12:-;1205:12;1107:126;:::o;1187:785:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:28;:17;1742:5;1720:28;:21;:28;:::i;:::-;1762:20;:12;1779:2;1762:20;:16;:20;:::i;:::-;1690:16;:102::i;:::-;1664:128;-1:-1:-1;1802:12:10;1817:35;1664:128;1817:13;:2;1824:5;1817:13;:6;:13;:::i;:35::-;1802:50;;1862:13;1878:64;1910:31;1938:1;1910:20;:31::i;:::-;1878:27;1899:5;1878:16;:5;1888;1878:16;:9;:16;:::i;:64::-;1862:80;1187:785;-1:-1:-1;;;;;;;;;;;;;;1187:785:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4199:207:10:-;4304:19;4354:44;4375:9;4371:2;:13;4355:6;:30;4354:42;:44::i;7955:5160:8:-;8000:8;889:66;8024:1;:14;8020:74;;;8054:29;;;;;;;;;;;8020:74;8112:1;8107;:6;8103:66;;8129:29;;;;;;;;;;;8103:66;889;8182:1;:12;8178:51;;;-1:-1:-1;8217:1:8;8210:8;;8178:51;1368:66;8242:1;:15;8238:64;;-1:-1:-1;1548:75:8;8273:18;;8238:64;8312:8;8330;8348;8661:66;8649:1;:79;8645:316;;8744:79;;;;;8870:66;889;8849:11;;:88;8845:92;;8645:316;9005:66;8993:1;:79;8989:316;;9088:79;;;;;9214:66;889;9193:11;;:88;9189:92;;8989:316;9348:66;9336:1;:79;9332:314;;9431:79;;;;;9556:66;889;9535:11;;:88;9531:92;;9332:314;9689:66;9677:1;:79;9673:314;;9772:79;;;;;9897:66;889;9876:11;;:88;9872:92;;9673:314;10030:66;10018:1;:79;10014:314;;10113:79;;;;;10238:66;889;10217:11;;:88;10213:92;;10014:314;10371:66;10359:1;:79;10355:314;;10454:79;;;;;10579:66;10466;10558:11;;:88;10554:92;;10355:314;10714:66;10702:1;:79;10698:318;;10797:79;;;;;10924:66;889;10903:11;;:88;10899:92;;10698:318;11062:66;11050:1;:79;11046:320;;11145:79;;;;;11273:66;889;11252:11;;:88;11248:92;;11046:320;11413:66;11401:1;:79;11397:322;;11496:79;;;;;11625:66;889;11604:11;;:88;11600:92;;11397:322;11884:11;;;;-1:-1:-1;11884:11:8;;-1:-1:-1;889:66:8;11909:5;;;:15;;-1:-1:-1;11987:35:8;11944:39;;;11939:45;;:83;11934:88;;;;889:66;12032:1;12028;:5;:15;;;;;;12024:19;;12135:35;12130:1;12092:35;:39;12087:1;:45;:83;;;;;;12082:88;;;;889:66;12180:1;12176;:5;:15;;;;;;12172:19;;12283:35;12278:1;12240:35;:39;12235:1;:45;:83;;;;;;12230:88;;;;889:66;12328:1;12324;:5;:15;;;;;;12320:19;;12431:35;12426:1;12388:35;:39;12383:1;:45;:83;;;;;;12378:88;;;;889:66;12476:1;12472;:5;:15;;;;;;12468:19;;12579:35;12574:1;12536:35;:39;12531:1;:45;:83;;;;;;12526:88;;;;889:66;12624:1;12620;:5;:15;;;;;;12616:19;;12727:35;12722:1;12684:35;:39;12679:1;:45;:83;;;;;;12674:88;;;;889:66;12772:1;12768;:5;:15;;;;;;12764:19;;12875:35;12870:1;12832:35;:39;12827:1;:45;:83;;;;;;12822:88;;;;889:66;12920:1;12916;:5;:15;;;;;;12912:19;;13023:35;13018:1;12980:35;:39;12975:1;:45;:83;;;;;;12970:88;;;;7955:5160;;;;;;:::o;13212:5613::-;13258:8;1548:75;13282:15;;13278:105;;;-1:-1:-1;13371:1:8;13364:8;;13278:105;13396:6;13392:51;;-1:-1:-1;889:66:8;13418:14;;13392:51;1488:1;13456;:15;13452:77;;;13488:30;;;;;;;;;;;13452:77;889:66;13998;13994:70;;14078:5;;;:15;;;14104:18;14100:22;;14095:27;;;;;13994:70;;14162:5;;;:15;14158:19;;14184:1;14188:18;14184:22;14179:27;;;;889:66;14250:1;14246;:5;:15;;;;;;14242:19;;14268:1;14272:18;14268:22;14263:27;;;;889:66;14334:1;14330;:5;:15;;;;;;14326:19;;14352:1;14356:18;14352:22;14347:27;;;;889:66;14418:1;14414;:5;:15;;;;;;14410:19;;14436:1;14440:18;14436:22;14431:27;;;;889:66;14502:1;14498;:5;:15;;;;;;14494:19;;14520:1;14524:18;14520:22;14515:27;;;;889:66;14586:1;14582;:5;:15;;;;;;14578:19;;14604:1;14608:18;14604:22;14599:27;;;;889:66;14670:1;14666;:5;:15;;;;;;14662:19;;14688:1;14692:18;14688:22;14683:27;;;;889:66;14754:1;14750;:5;:15;;;;;;14746:19;;14772:1;14776:18;14772:22;14767:27;;;;889:66;14838:1;14834;:5;:15;;;;;;14830:19;;14856:1;14860:18;14856:22;14851:27;;;;889:66;14922:1;14918;:5;:15;;;;;;14914:19;;14940:1;14944:18;14940:22;14935:27;;;;889:66;15006:1;15002;:5;:15;;;;;;14998:19;;15024:1;15028:18;15024:22;15019:27;;;;889:66;15090:1;15086;:5;:15;;;;;;15082:19;;15108:1;15112:18;15108:22;15103:27;;;;889:66;15174:1;15170;:5;:15;;;;;;15166:19;;15192:1;15196:18;15192:22;15187:27;;;;889:66;15258:1;15254;:5;:15;;;;;;15250:19;;15276:1;15280:18;15276:22;15271:27;;;;889:66;15342:1;15338;:5;:15;;;;;;15334:19;;15360:1;15364:18;15360:22;15355:27;;;;889:66;15426:1;15422;:5;:15;;;;;;15418:19;;15444:1;15448:18;15444:22;15439:27;;;;889:66;15510:1;15506;:5;:15;;;;;;15502:19;;15528:1;15532:18;15528:22;15523:27;;;;889:66;15594:1;15590;:5;:15;;;;;15824:2;;;;;;15678:18;15590:15;;;15607:27;;;15674:22;:26;;889:66;15674:36;;15590:15;-1:-1:-1;15871:66:8;15860:78;;15859:85;15855:304;;16068:66;15975;15964:78;;:171;15960:175;;15855:304;16203:66;16192:78;;16191:85;16187:304;;16400:66;16307;16296:78;;:171;16292:175;;16187:304;16534:66;16523:78;;16522:85;16518:303;;16731:66;16638;16627:78;;:171;16623:175;;16518:303;16864:66;16853:78;;16852:85;16848:303;;17061:66;16968;16957:78;;:171;16953:175;;16848:303;17194:66;17183:78;;17182:85;17178:303;;17391:66;17298;17287:78;;:171;17283:175;;17178:303;17524:66;17513:78;;17512:85;17508:303;;17721:66;17628;17617:78;;:171;17613:175;;17508:303;17856:66;17845:78;;17844:85;17840:305;;18053:66;17960;17949:78;;:171;17945:175;;17840:305;18191:66;18180:78;;18179:85;18175:306;;18388:66;18295;18284:78;;:171;18280:175;;18175:306;18528:66;18517:78;;18516:85;18512:307;;18725:66;18632;18621:78;;:171;18617:175;;18512:307;13212:5613;;;;;:::o;5396:942:4:-;5596:6;5618:10;5631:31;5659:1;5631:20;:31::i;:::-;5618:44;;5672:10;5685:65;5728:21;5747:1;5728:5;:14;;;:18;;:21;;;;:::i;:::-;5685:38;5720:2;5685:30;5713:1;5685:23;5693:5;:14;;;5685:3;:7;;:23;;;;:::i;:65::-;5672:78;;5761:12;5776:132;5806:92;5896:1;5806:72;5876:1;5806:52;5855:2;5806:31;5834:1;5806:20;:31::i;:92::-;5776:12;:3;:10;:12::i;:132::-;5761:147;;5918:12;5935:82;6013:3;5935:60;:42;5971:5;5935:18;:16;:18::i;:42::-;:58;:60::i;:82::-;5933:85;;5918:100;;6030:12;6055:1;6046:5;:10;;6045:121;;6098:68;6138:14;6140:5;6139:6;;6138:12;:14::i;6098:68::-;6045:121;;;6072:11;:5;:9;:11::i;:::-;6030:136;-1:-1:-1;6177:12:4;6192:60;6240:11;:3;6248:2;6240:11;:7;:11;:::i;:::-;6192:30;6193:4;;;;6216:5;6192:30;:23;:30;:::i;:60::-;6177:75;;6263:12;6278:31;6295:6;6303:5;6278:16;:31::i;6344:544::-;6566:6;;6603:27;6609:20;6615:13;:5;6625:2;6615:13;:9;:13;:::i;:::-;6609:1;;:20;:5;:20;:::i;:::-;6603:1;;:27;:5;:27;:::i;:::-;6588:42;-1:-1:-1;6640:12:4;6655:19;6661:12;:1;6667:5;6661:12;:5;:12;:::i;6655:19::-;6640:34;-1:-1:-1;6687:12:4;6702:21;:16;:5;6640:34;6702:16;:9;:16;:::i;:21::-;6687:36;;6736:12;6751:49;6794:5;6751:38;6774:5;:14;;;6751:18;:16;:18::i;:49::-;6736:64;;6810:12;6825:34;6852:6;6825:22;6841:5;6825:11;:5;:9;:11::i;:34::-;6810:49;6344:544;-1:-1:-1;;;;;;;;;;;;;6344:544:4:o;6958:688::-;7197:6;;7234:11;:3;7242:2;7234:11;:7;:11;:::i;:::-;7219:26;;7255:12;7270:115;7302:73;7371:3;7302:51;7338:5;:14;;;7302:18;:16;:18::i;:73::-;7270:14;;;;;:115;:18;:115;:::i;:::-;7255:130;;7395:12;7410:118;7446:72;7515:2;7446:51;7482:5;:14;;;7446:18;:16;:18::i;:72::-;7410:18;:16;:18::i;:118::-;7395:133;-1:-1:-1;7538:12:4;7553:16;:5;7395:133;7553:16;:9;:16;:::i;:::-;7538:31;;7594:5;7586;:13;:53;;7634:5;7586:53;;;-1:-1:-1;7614:5:4;;7579:60;-1:-1:-1;;;;;;;;;;;6958:688:4:o;10340:442::-;10471:27;;10527:10;:2;10534;10527:10;:6;:10;:::i;:::-;10514:23;;10547:10;10560:43;10588:1;10599:2;10560:20;:43::i;:::-;10547:56;;10613:10;10626:96;10647:65;10672:26;10695:2;10672:18;:16;:18::i;:26::-;10647:3;;:65;:7;:65;:::i;:::-;10626:3;;:96;:7;:96;:::i;:::-;10613:109;;10738:10;10740:3;10744;10738:10;;;;;;;;;;;;;;;;10766:9;;;;10340:442;-1:-1:-1;;;;;10340:442:4:o;7652:766::-;7829:12;7843:9;7873:39;7909:2;7873:35;:39::i;:::-;7868:44;;7922:12;7937:152;7994:81;8071:3;7994:55;8034:5;:14;;;7994:18;:16;:18::i;:81::-;7937:14;;;;:22;;7956:2;7937:22;:18;:22;:::i;:152::-;7922:167;;8099:12;8114:156;8151:105;8253:2;8151:80;8228:2;8151:55;8191:5;:14;;;8151:18;:16;:18::i;:105::-;8114:2;;:156;:19;:156;:::i;:::-;8099:171;-1:-1:-1;8280:9:4;8292:24;8099:171;8292:13;:2;8299:5;8292:13;:6;:13;:::i;:24::-;8280:36;;8343:2;8335:5;:10;:47;;8380:2;8335:47;;;8360:5;8335:47;8327:55;-1:-1:-1;;;;7652:766:4;;;;;;;;:::o;8789:844::-;8998:12;9024;9050;9076;9137;9152:17;9162:2;9166;9152:9;:17::i;:::-;9137:32;;9179:11;9193:42;9229:5;9193:35;:42::i;:::-;9179:56;-1:-1:-1;9257:12:4;9272:22;9280:13;:2;9287:5;9280:13;:6;:13;:::i;:::-;9272:3;;:22;:7;:22;:::i;:::-;9257:37;;9316:5;9308:4;:13;9304:323;;9362:5;9385:2;9405:4;9427:39;9463:2;9427:35;:39::i;:::-;9337:143;;;;;;;;;;;;;9304:323;-1:-1:-1;9536:2:4;;-1:-1:-1;9556:5:4;;-1:-1:-1;9579:2:4;;-1:-1:-1;9599:4:4;-1:-1:-1;8789:844:4;;;;;;;;;;;;:::o;9639:490::-;9817:6;;9854:77;9911:19;9919:10;:2;9926;9919:10;:6;:10;:::i;:::-;9911:3;;:19;:7;:19;:::i;:::-;9854:39;9882:10;:2;9889;9882:10;:6;:10;:::i;:::-;9854;:2;9861;9854:10;:6;:10;:::i;:77::-;9839:92;-1:-1:-1;9941:12:4;9956:60;9997:18;10004:10;:2;10011;10004:10;:6;:10;:::i;:::-;9997:2;;:18;:6;:18;:::i;:::-;9956:23;:2;9976;9956:23;:19;:23;:::i;:60::-;9941:75;-1:-1:-1;10026:12:4;10041:16;:5;9941:75;10041:16;:9;:16;:::i;:::-;10026:31;;10083:2;10075:5;:10;:47;;10120:2;10075:47;;;10100:5;10068:54;-1:-1:-1;;;;;;;;;9639:490:4:o;10135:199::-;10217:6;10251:43;10279:1;10290:2;10251:20;:43::i;:::-;10246:2;:48;:81;;10325:2;10246:81;;;-1:-1:-1;10309:1:4;;10135:199;-1:-1:-1;10135:199:4:o;6384:97:8:-;6434:8;6458:16;6463:1;889:66;6458:4;:16::i;2024:92::-;2073:8;2100:9;2104:1;2107;2100:3;:9::i;1912:106::-;1968:8;2001:1;1996;:6;;1995:16;;2010:1;1995:16;;;-1:-1:-1;2006:1:8;;1912:106;-1:-1:-1;1912:106:8:o;2983:614:10:-;3077:6;;3120:14;3129:4;;3120:14;:8;:14;:::i;:::-;3099:35;-1:-1:-1;3144:16:10;3163:21;:4;3099:35;3163:21;:8;:21;:::i;:::-;3144:40;-1:-1:-1;3194:16:10;3213:24;3144:40;;3213:24;:13;:24;:::i;:::-;3194:43;-1:-1:-1;3247:19:10;3269:24;3194:43;;3269:24;:13;:24;:::i;:::-;3247:46;-1:-1:-1;3303:23:10;3329:30;3247:46;;3329:30;:16;:30;:::i;:::-;3303:56;-1:-1:-1;3369:24:10;3396:38;3303:56;;3396:38;:20;:38;:::i;:::-;3369:65;-1:-1:-1;3444:18:10;3465:34;3369:65;3487:11;3465:34;:21;:34;:::i;:::-;3444:55;-1:-1:-1;3509:20:10;3532:28;3444:55;;3532:28;:15;:28;:::i;8523:259:4:-;8598:6;8627:148;8742:32;8770:2;8742:20;:32::i;:::-;8627:97;8684:39;8691:31;8719:1;8691:20;:31::i;:::-;8684:2;;:39;:6;:39;:::i;:::-;8627;8634:31;8662:1;8634:20;:31::i;:::-;8627:2;;:39;:6;:39;:::i;154:1081:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;25054:42;25043:54;;25626:35;;25616:2;;25675:1;;25665:12;414:241;;518:2;506:9;497:7;493:23;489:32;486:2;;;-1:-1;;524:12;486:2;586:53;631:7;607:22;586:53;;662:366;;;783:2;771:9;762:7;758:23;754:32;751:2;;;-1:-1;;789:12;751:2;851:53;896:7;872:22;851:53;;;841:63;;959:53;1004:7;941:2;984:9;980:22;959:53;;;949:63;;745:283;;;;;;1035:491;;;;1173:2;1161:9;1152:7;1148:23;1144:32;1141:2;;;-1:-1;;1179:12;1141:2;85:6;72:20;97:33;124:5;97:33;;;1231:63;-1:-1;1331:2;1370:22;;72:20;97:33;72:20;97:33;;;1135:391;;1339:63;;-1:-1;;;1439:2;1478:22;;;;344:20;;1135:391;1533:257;;1645:2;1633:9;1624:7;1620:23;1616:32;1613:2;;;-1:-1;;1651:12;1613:2;223:6;217:13;25772:5;24877:13;24870:21;25750:5;25747:32;25737:2;;-1:-1;;25783:12;1797:241;;1901:2;1889:9;1880:7;1876:23;1872:32;1869:2;;;-1:-1;;1907:12;1869:2;-1:-1;344:20;;1863:175;-1:-1;1863:175;2045:366;;;2166:2;2154:9;2145:7;2141:23;2137:32;2134:2;;;-1:-1;;2172:12;2134:2;-1:-1;;344:20;;;2324:2;2363:22;;;344:20;;-1:-1;2128:283;11272:213;25054:42;25043:54;;;;2638:37;;11390:2;11375:18;;11361:124;11492:340;25054:42;25043:54;;;2497:58;;25043:54;;11818:2;11803:18;;2638:37;11646:2;11631:18;;11617:215;11839:675;25054:42;25043:54;;;2497:58;;25043:54;;;12250:2;12235:18;;2638:37;25043:54;;;;12333:2;12318:18;;2638:37;12416:2;12401:18;;2867:36;;;;12499:3;12484:19;;2867:36;;;;12077:3;12062:19;;12048:466;12521:451;25054:42;25043:54;;;2497:58;;25043:54;;;;12875:2;12860:18;;2638:37;12958:2;12943:18;;2867:36;;;;12703:2;12688:18;;12674:298;12979:443;25054:42;25043:54;;;;2497:58;;13327:2;13312:18;;2867:36;;;;13408:2;13393:18;;2867:36;13157:2;13142:18;;13128:294;13429:340;25054:42;25043:54;;;;2497:58;;13755:2;13740:18;;2867:36;13583:2;13568:18;;13554:215;13776:1521;24877:13;;24870:21;2752:34;;25054:42;25043:54;;;14372:2;14357:18;;2638:37;25043:54;;;;14455:2;14440:18;;2638:37;14536:2;14521:18;;2867:36;;;;14617:3;14602:19;;2867:36;;;;14701:3;14686:19;;2867:36;;;;14783:3;14768:19;;2867:36;;;;14867:3;14852:19;;2867:36;14949:3;14934:19;;2867:36;15031:3;15016:19;;2867:36;15116:3;15101:19;;2867:36;15199:3;15184:19;;2867:36;;;;15282:3;15267:19;;2867:36;14213:3;14198:19;;14184:1113;15304:316;2867:36;;;15606:2;15591:18;;2867:36;15446:2;15431:18;;15417:203;15627:407;15818:2;15832:47;;;3140:2;15803:18;;;24645:19;3176:66;24685:14;;;3156:87;3262:12;;;15789:245;16041:407;16232:2;16246:47;;;3513:2;16217:18;;;24645:19;3549:66;24685:14;;;3529:87;3650:66;3636:12;;;3629:88;3736:12;;;16203:245;16455:407;16646:2;16660:47;;;3987:2;16631:18;;;24645:19;4023:66;24685:14;;;4003:87;4109:12;;;16617:245;16869:407;17060:2;17074:47;;;4360:2;17045:18;;;24645:19;4396:66;24685:14;;;4376:87;4482:12;;;17031:245;17283:407;17474:2;17488:47;;;4733:2;17459:18;;;24645:19;4769:66;24685:14;;;4749:87;4855:12;;;17445:245;17697:407;17888:2;17902:47;;;5106:2;17873:18;;;24645:19;5142:66;24685:14;;;5122:87;5228:12;;;17859:245;18111:407;18302:2;18316:47;;;5479:2;18287:18;;;24645:19;5515:66;24685:14;;;5495:87;5601:12;;;18273:245;18525:407;18716:2;18730:47;;;5852:2;18701:18;;;24645:19;5888:66;24685:14;;;5868:87;5974:12;;;18687:245;18939:407;19130:2;19144:47;;;6225:2;19115:18;;;24645:19;6261:66;24685:14;;;6241:87;6362:66;6348:12;;;6341:88;6448:12;;;19101:245;19353:407;19544:2;19558:47;;;6699:2;19529:18;;;24645:19;6735:66;24685:14;;;6715:87;6821:12;;;19515:245;19767:407;19958:2;19972:47;;;7072:2;19943:18;;;24645:19;7108:66;24685:14;;;7088:87;7194:12;;;19929:245;20181:407;20372:2;20386:47;;;7445:2;20357:18;;;24645:19;7481:66;24685:14;;;7461:87;7582:66;7568:12;;;7561:88;7668:12;;;20343:245;20595:407;20786:2;20800:47;;;7919:2;20771:18;;;24645:19;7955:66;24685:14;;;7935:87;8041:12;;;20757:245;21009:407;21200:2;21214:47;;;8292:2;21185:18;;;24645:19;8328:66;24685:14;;;8308:87;8414:12;;;21171:245;21423:407;21614:2;21628:47;;;8665:2;21599:18;;;24645:19;8701:66;24685:14;;;8681:87;8787:12;;;21585:245;21837:407;22028:2;22042:47;;;9038:2;22013:18;;;24645:19;9074:66;24685:14;;;9054:87;9160:12;;;21999:245;22251:407;22442:2;22456:47;;;9411:2;22427:18;;;24645:19;9447:66;24685:14;;;9427:87;9533:12;;;22413:245;22665:407;22856:2;22870:47;;;9784:2;22841:18;;;24645:19;9820:66;24685:14;;;9800:87;9906:12;;;22827:245;23079:407;23270:2;23284:47;;;10157:2;23255:18;;;24645:19;10193:66;24685:14;;;10173:87;10294:66;10280:12;;;10273:88;10380:12;;;23241:245;23493:407;23684:2;23698:47;;;10631:2;23669:18;;;24645:19;10667:66;24685:14;;;10647:87;10753:12;;;23655:245;23907:407;24098:2;24112:47;;;11004:2;24083:18;;;24645:19;11040:66;24685:14;;;11020:87;11126:12;;;24069:245;24321:213;2867:36;;;24439:2;24424:18;;24410:124;25567:117;25054:42;25654:5;25043:54;25629:5;25626:35;25616:2;;25675:1;;25665:12"
			}
		}
	},
	"sources": {
		"test/TestScam.sol": {
			"id": 12
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"Scam.sol": {
			"id": 0
		},
		"core/State.sol": {
			"id": 3
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"core/Liquidity.sol": {
			"id": 1
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"interfaces/IERC20.sol": {
			"id": 5
		},
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibToken.sol": {
			"id": 11
		}
	},
	"sourceCodes": {
		"test/TestScam.sol": "pragma solidity 0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../Scam.sol\";\nimport \"../libs/LibFixedMath.sol\";\n\n\ncontract TestScam is\n    Scam\n{\n\n    using LibFixedMath for uint256;\n    using LibFixedMath for int256;\n\n    //uint256 block;\n\n    function init()\n        external\n    {\n         _initState(0x0000000000000000000000000000000000000001, 0x0000000000000000000000000000000000000002);\n\n        // set initial blaances\n        gState.x = uint256(500).toFixed();           // initial balance of Token X\n        gState.y = uint256(1000).toFixed();          // initial balance of Token Y\n    }\n\n     function runBasicTest()\n        external\n    {\n        //block = 570;\n        swap(\n            gState.xAddress,\n            gState.yAddress,\n            75 * 10**18\n        );\n\n/*\n        block = 1570;\n        swap(\n            gState.xAddress,\n            gState.yAddress,\n            400 * 10**18\n        );\n\n        block = 4000;\n        swap(\n            gState.yAddress,\n            gState.xAddress,\n            220 * 10**6\n        );\n        */\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number; // block\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"Scam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./core/State.sol\";\nimport \"./core/Liquidity.sol\";\nimport \"./core/Swapper.sol\";\n\n\ncontract Scam is\n    State,\n    Liquidity,\n    Swapper\n{\n\n    constructor()\n        public\n    {}\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n\n    function getRanges() internal pure returns (int256,int256,int256,int256) {\n        return (LN_MIN_VAL, LN_MAX_VAL, EXP_MIN_VAL, EXP_MAX_VAL);\n    }\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    function pow(int256 base, int256 power) internal pure returns (int256) {\n        // KEY INSIGHT --> e^(0.5*ln(7)) - 1/e^(0.5*ln(1/7))\n        // So I think a^x = e^(xln(a)) = 1/e^(xln(1/a))\n\n        // 1 Sanity check on `ln`\n        int256 ePower;\n        bool invert;\n        if (base <= 0) {\n            revert('Invalid ln() value');\n        } else if (base < FIXED_1) {\n            ePower = mul(power, ln(base));\n        } else {\n            // Make smaller\n            ePower = mul(power, ln(_div(FIXED_1, base)));\n            invert = true;\n        }\n\n        // 2 Sanity check on ePower\\\n        if (ePower < 0) {\n            invert = invert ? false : true;\n            ePower = abs(ePower);\n        }\n\n        // Comput e^ePower\n        // Key Insight --> e^x = 1/e^(-x)\n        /*\n        int256 exp;\n        if (ePower < FIXED_1) {\n            return exp(ePower);\n        } else {\n            return div(FIXED_1, )\n        }\n        */\n        return exp(ePower);\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../core/State.sol\";\n\n\n/// FIXME(jalextowle): Add in the bias factor and ponzi scheme\ncontract Liquidity is\n    State,\n    IStructs\n{\n    using LibSafeMath for uint256;\n    function balanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        IStructs.State storage state = gState;\n        return state.liquidityBalance[account];\n    }\n\n    /// @dev Allows a sender to deposit tokens into the contract to provide liquidity.\n    /// @param x_amount The amount of x that should be taken from the sender's balance.\n    /// @param y_amount The amount of x that should be taken from the sender's balance.\n    function addLiquidity(uint256 x_amount, uint256 y_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n        int256 xAmountFixed = LibFixedMath.toFixed(x_amount, 10**18);\n        int256 yAmountFixed = LibFixedMath.toFixed(y_amount, 10**6);\n\n        // Ensure that the amount of x and y that are being deposited are proportional.\n       require(\n            xAmountFixed.mul(state.y) == yAmountFixed.mul(state.x),\n            \"Liquidty:Amount deposited not proportional\"\n        );\n\n        // Charge the sender the amount of x and y tokens that were specified\n        IERC20(state.xAddress).transferFrom(msg.sender, address(this), x_amount);\n        IERC20(state.yAddress).transferFrom(msg.sender, address(this), y_amount);\n\n        // Grant the sender some liquidity tokens.\n        // FIXME(jalextowle): (Look into whether more precision is needed)\n        uint256 liquidity_reward;\n        if (state.x == 0) {\n            liquidity_reward = 0;\n            state.l = 1;\n        } else {\n            liquidity_reward = x_amount.safeMul(state.l).safeDiv(uint256(state.x) >> 127);\n        }\n\n        // Increase the balances of x and y\n        state.x = LibFixedMath.add(state.x, xAmountFixed);\n        state.y = LibFixedMath.add(state.y, yAmountFixed);\n\n        // Grant the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeAdd(\n            liquidity_reward\n        );\n        state.l = state.l.safeAdd(liquidity_reward);\n    }\n\n    /// @dev Allows a sender to withdraw tokens by burning liquidity tokens.\n    /// @param l_amount The amount of liquidity tokens to burn.\n    function removeLiquidity(uint256 l_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n\n        // Calculate the amounts of tokens that should be sent to the sender.\n        uint256 x_amount = l_amount.safeMul(uint256(state.x) >> 127).safeDiv(state.l);\n        uint256 y_amount = l_amount.safeMul(uint256(state.y) >> 127).safeDiv(state.l);\n\n        // Decrease the balances of x and y\n        state.x = LibFixedMath.sub(state.x, LibFixedMath.toFixed(x_amount));\n        state.y = LibFixedMath.sub(state.y, LibFixedMath.toFixed(y_amount));\n\n        // Destroy the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeSub(\n            l_amount\n        );\n        state.l = state.l.safeAdd(l_amount);\n\n        // Reward sender in the correct amounts of x and y.\n        IERC20(state.xAddress).transfer(msg.sender, x_amount);\n        IERC20(state.yAddress).transfer(msg.sender, y_amount);\n    }\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n",
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000)); // Good for USDC, may vary w token.\n        if (deltaB >= 0) {\n            //deltaB = 0;\n            revert('Tried to purchase too much');\n        } else if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n        }\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA.mul(state.eToKappa) < pBarA) {\n            newPBarA = pBarA.div(state.eToKappa);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = LibScamMath.computeBaseToOneHundred(rl);\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis = LibScamMath.computeBaseToOneHundred(term1);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                LibScamMath.computeBaseToOneHundred(rh)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n        returns (int256)\n    {\n        return rl < LibFixedMath.toFixed(int256(9), int256(10))\n            ? 0\n            : rl;\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n                }\n            }\n        }\n\n        // Step 6\n        rl = _computeStep6(rl);\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}"
	},
	"sourceTreeHashHex": "0xf4b8bbe34374a5ef00124aa156d8f4777c38fc7fea2cf7604accff6a8c59ae81",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.9+commit.e560f70d.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}