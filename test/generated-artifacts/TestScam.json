{
	"schemaVersion": "2.0.0",
	"contractName": "TestScam",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "xAddress",
						"type": "address"
					},
					{
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "runBasicTest",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "l_amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "x_amount",
						"type": "uint256"
					},
					{
						"name": "y_amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"name": "xAddress",
						"type": "address"
					},
					{
						"name": "yAddress",
						"type": "address"
					},
					{
						"name": "x",
						"type": "int256"
					},
					{
						"name": "y",
						"type": "int256"
					},
					{
						"name": "l",
						"type": "uint256"
					},
					{
						"name": "pBarX",
						"type": "int256"
					},
					{
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"name": "fee",
						"type": "int256"
					},
					{
						"name": "feeHigh",
						"type": "int256"
					},
					{
						"name": "t",
						"type": "uint256"
					},
					{
						"name": "beta",
						"type": "int256"
					},
					{
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "fromToken",
						"type": "address"
					},
					{
						"name": "toToken",
						"type": "address"
					},
					{
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "init",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "description",
						"type": "string"
					},
					{
						"indexed": false,
						"name": "val",
						"type": "int256"
					}
				],
				"name": "VALUE",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Allows a sender to deposit tokens into the contract to provide liquidity.",
					"params": {
						"x_amount": "The amount of x that should be taken from the sender's balance.",
						"y_amount": "The amount of x that should be taken from the sender's balance."
					}
				},
				"removeLiquidity(uint256)": {
					"details": "Allows a sender to withdraw tokens by burning liquidity tokens.",
					"params": {
						"l_amount": "The amount of liquidity tokens to burn."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b03191633179055613c1e806100256000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639cd441da11610076578063df791e501161005b578063df791e5014610166578063e1c7392a14610179578063f2fde38b14610181576100be565b80639cd441da14610131578063afd46eb514610144576100be565b80638da5cb5b116100a75780638da5cb5b14610101578063978ca36f146101165780639c8f9f231461011e576100be565b806370a08231146100c35780637b689036146100ec575b600080fd5b6100d66100d136600461302f565b610194565b6040516100e39190613bb0565b60405180910390f35b6100ff6100fa36600461304b565b6101c0565b005b6101096101d6565b6040516100e39190613138565b6100ff6101f2565b6100ff61012c3660046130e3565b61022d565b6100ff61013f3660046130fc565b61046a565b61014c610723565b6040516100e39e9d9c9b9a99989796959493929190613246565b6100d6610174366004613080565b61077c565b6100ff610954565b6100ff61018f36600461302f565b61097e565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c60205260409020545b919050565b6101c8610a50565b6101d28282610aa3565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015460025461022a9173ffffffffffffffffffffffffffffffffffffffff61010090910481169116680410d586a20a4c000061077c565b50565b60055460035460019160009161025e9190610252908690607f1c63ffffffff610bf616565b9063ffffffff610c5316565b905060006102858360040154610252607f8660030154901c87610bf690919063ffffffff16565b905061029d836002015461029884610ca0565b610cf6565b600284015560038301546102b49061029883610ca0565b6003840155336000908152600b840160205260409020546102db908563ffffffff610d6616565b336000908152600b850160205260409020556004830154610302908563ffffffff610da816565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb91610364913391879101613220565b602060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b691908101906130c1565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906104119033908590600401613220565b602060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061046391908101906130c1565b5050505050565b6001600061048084670de0b6b3a7640000610de7565b9050600061049184620f4240610de7565b90506104aa836002015482610e8190919063ffffffff16565b60038401546104c090849063ffffffff610e8116565b14610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613315565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9061055d90339030908a906004016131c1565b602060405180830381600087803b15801561057757600080fd5b505af115801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105af91908101906130c1565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061060c903390309089906004016131c1565b602060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065e91908101906130c1565b50600083600201546000141561067d57506001600484015560006106a3565b6106a0607f8560020154901c610252866004015489610bf690919063ffffffff16565b90505b6106b1846002015484610f3f565b600285015560038401546106c59083610f3f565b6003850155336000908152600b850160205260409020546106ec908263ffffffff610da816565b336000908152600b860160205260409020556004840154610713908263ffffffff610da816565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600b54600d54600e5460ff8d169c73ffffffffffffffffffffffffffffffffffffffff61010090910481169c169a999897969594939291908e565b6000610786612f6e565b61078e610f4b565b9050610798610ffa565b81610160015114156107b1576101408101516101208201525b806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614801561081f5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561084d57600061083a868661083487610ffe565b8561100b565b905061084581611448565b92505061090d565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108bb5750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156108db5760006108d0868661083487610ffe565b905061084581611455565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906134c4565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea3386868686604051610944959493929190613180565b60405180910390a1509392505050565b61096060016002610aa3565b61096b6101f4610ca0565b6003556109796103e8610ca0565b600455565b610986610a50565b73ffffffffffffffffffffffffffffffffffffffff81166109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613829565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090610a459033908490613159565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aa1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613456565b565b60015460ff1615610ae0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061348d565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610b6760636064610de7565b60065560636007819055610b7c906064610de7565b600855610b8c6005612710610de7565b600955610bb4610ba06001620f4240611462565b610ba8611481565b9063ffffffff610cf616565b600d55610bc56127156103e8611462565b600e555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610c0557506000610c4d565b82820282848281610c1257fe5b0414610c4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613662565b90505b92915050565b600081610c8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613372565b6000828481610c9757fe5b04949350505050565b600080821215610cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613605565b610c4d826f80000000000000000000000000000000611495565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610d52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061394c565b610d5f838360000361150b565b9392505050565b600082821115610da2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906133e8565b50900390565b600082820183811015610c4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906132de565b600080831215610e23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613983565b6000821215610e5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061353a565b610d5f610e7b846f80000000000000000000000000000000611495565b83611581565b600080610eb26f80000000000000000000000000000000610ead610ea487611650565b610ead87611650565b611495565b90506000610ecb610ec286611666565b610ead86611650565b90506000610ee4610edb87611650565b610ead87611666565b90506000610f16610f00610ef789611666565b610ead89611666565b6f80000000000000000000000000000000611581565b9050610f34610f2e610f28868661150b565b8461150b565b8261150b565b979650505050505050565b6000610d5f838361150b565b610f53612f6e565b50604080516101c08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600b54610160820152600d54610180820152600e546101a082015290565b4390565b6000610c4d8260126116a3565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156110715750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561109057505050506060820151608083015160c08401516001611130565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110fe5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108db57856080015193508560600151925061112d8660c00151611121611481565b9063ffffffff6116b216565b91505b60006111438585858a610100015161172c565b90506000611155868684878d8d6117e2565b90506000811215611192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613acc565b806111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613b3a565b60006111fb6111df8a6101200151610ba8611481565b6111ef8c8563ffffffff610e8116565b9063ffffffff610e8116565b60009081039150811261123a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906137cc565b600061124a6001620186a0611462565b90508061125d888463ffffffff610f3f16565b1361128857611272818863ffffffff610cf616565b915060008212611283576000611285565b815b91505b6112966001620f4240611462565b82019150600082126112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906135ce565b60006112f48b61016001516112e7610ffa565b8d6101800151888b611baf565b6101a08c015190915061130d908863ffffffff610e8116565b811315611331576101a08b015161132a908863ffffffff610e8116565b905061136a565b8661134a8c6101a0015183610e8190919063ffffffff16565b121561136a576101a08b015161136790889063ffffffff6116b216565b90505b611372610ffa565b6101608c015285156113b45761138e898d63ffffffff610f3f16565b60608c01526113a3888463ffffffff610f3f16565b60808c015260c08b018190526113f0565b6113c4888463ffffffff610f3f16565b60608c01526113d9898d63ffffffff610f3f16565b60808c01526113ea81611121611481565b60c08c01525b6113f98b611c90565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161142c939291906131f2565b60405180910390a150506000039b9a5050505050505050505050565b6000610c4d826006611cb2565b6000610c4d826012611cb2565b6000610d5f610e7b846f80000000000000000000000000000000611495565b6f8000000000000000000000000000000090565b60008215806114a2575081155b156114af57506000610c4d565b50818102818382816114bd57fe5b051415806114d45750828282816114d057fe5b0514155b15610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061389f565b81810160008312801561151e5750600082125b801561152957508281135b8061154a575060008313801561153f5750600082135b801561154a57508281125b15610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613915565b6000816115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613a5e565b7f8000000000000000000000000000000000000000000000000000000000000000831480156116085750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b1561163f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613a95565b81838161164857fe5b059392505050565b6f80000000000000000000000000000000900590565b600080821361168d576f7fffffffffffffffffffffffffffffff8260000316600003610c4d565b506f7fffffffffffffffffffffffffffffff1690565b6000610d5f8383600a0a610de7565b6000806116be84611650565b90508015611709576117016116d285611650565b610ead6116fb87610ead6f800000000000000000000000000000006116f68b611650565b611581565b86611581565b915050610c4d565b611701611726856f80000000000000000000000000000000611495565b84611581565b60008061173f848763ffffffff610e8116565b90506000611753868363ffffffff6116b216565b90506000611767838863ffffffff6116b216565b9050600061177786610ba8611481565b90506000611783611481565b8412156117a65761179f61179a836111ef87611cc2565b6123ac565b90506117c4565b6117c16117b961179a846111ef87611cc2565b611121611481565b90505b6117d4818963ffffffff610e8116565b9a9950505050505050505050565b60008061183761182a61181a6117fe8a8863ffffffff610e8116565b61180e8c8c63ffffffff610e8116565b9063ffffffff610f3f16565b611121898863ffffffff610e8116565b899063ffffffff610e8116565b9050600061185b61184e8a8763ffffffff610f3f16565b8a9063ffffffff6116b216565b9050600061186d8a8a8a8a8a8a6129ba565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68160405161189e91906133a9565b60405180910390a160006118b78b8b8b8b8b878c612aad565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516118e891906139e0565b60405180910390a160006119028c8c8c8c8c8a8a8e612b4d565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051611933919061374e565b60405180910390a161194b8282896101200151612be6565b15611b4057600061195f838388888c612c80565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690611994908490613a1f565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516119cb919061370f565b60405180910390a16119e383838a6101200151612be6565b15611b3e5760006119f884848989868e612d29565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690611a32908690613860565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee683604051611a69919061378d565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee682604051611aa09190613b71565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051611ad791906136d0565b60405180910390a1611aef84848b6101200151612be6565b15611b3c57611b02848484848b8b612db7565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee684604051611b3391906138d6565b60405180910390a15b505b505b611b4982612e67565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6611b7a838c63ffffffff610e8116565b604051611b8791906134fb565b60405180910390a1611b9f828b63ffffffff610e8116565b9c9b505050505050505050505050565b600080611bbd878703610ca0565b90506000611bdd61179a611bd088611cc2565b849063ffffffff610e8116565b90506000611bed82610ba8611481565b90506000611c01878363ffffffff610e8116565b90506000611c15878563ffffffff610e8116565b90506000611c41611c2c858a63ffffffff610e8116565b611c3c878c63ffffffff610e8116565b610f3f565b90506000611c59826111218c8c63ffffffff610e8116565b90506000611c7e611c6a6002612eac565b6111218461180e898963ffffffff610f3f16565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101600151600b55565b6000610d5f82600a0a8402611650565b60006f80000000000000000000000000000000821315611d0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613597565b60008213611d48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061341f565b6f80000000000000000000000000000000821415611d68575060006101bb565b640733048c5a8213611d9b57507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006101bb565b60008060006a01c8464f761647600000008513611dfa577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611e58577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611eba577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611f1e577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611f82577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611fe6577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361204a577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136120ae577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513612112577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161218857fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816121b957fe5b05840193506f80000000000000000000000000000000818302816121d957fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161220a57fe5b05840193506f800000000000000000000000000000008183028161222a57fe5b059150700400000000000000000000000000000000836f924924924924924924924924924924920383028161225b57fe5b05840193506f800000000000000000000000000000008183028161227b57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e038302816122ac57fe5b05840193506f80000000000000000000000000000000818302816122cc57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b038302816122fd57fe5b05840193506f800000000000000000000000000000008183028161231d57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d890383028161234e57fe5b05840193506f800000000000000000000000000000008183028161236e57fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161239f57fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe0100000000000000000000000000000008212156123de575060006101bb565b816123fa57506f800000000000000000000000000000006101bb565b6000821315612435576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613699565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816124a157fe5b05905080670168244fdac7800002830192506f80000000000000000000000000000000828202816124ce57fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816124fa57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161252657fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161255257fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161257d57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816125a857fe5b05905080649c197dcc0002830192506f80000000000000000000000000000000828202816125d257fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816125fc57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161262657fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161264f57fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161267857fe5b05905080621c638002830192506f80000000000000000000000000000000828202816126a057fe5b059050806201c63802830192506f80000000000000000000000000000000828202816126c857fe5b05905080611ab802830192506f80000000000000000000000000000000828202816126ef57fe5b0590508061017c02830192506f800000000000000000000000000000008282028161271657fe5b05905080601402830192506f800000000000000000000000000000008282028161273c57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156127ab577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b7008000000000000000000000000000000008416156127ed577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561282f57701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612871577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156128b35770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156128f3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612933576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612973576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156129b3576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806129c76002612eac565b90506000612a066129e689866101000151610e8190919063ffffffff16565b610ba8896111ef8d6111ef8a610100015189610cf690919063ffffffff16565b90506000612a2c612a238a6111ef8d6111ef8d6111ef6004612eac565b61180e84612ec8565b90506000612a4884611121612a4385611121611481565b611cc2565b6000039050600080821315612a6b57612a666117b9836000036123ac565b612a74565b612a74826123ac565b90506000612a9f612a8b878d63ffffffff610e8116565b61112160008890038563ffffffff610f3f16565b90506000611c7e8a83612ed4565b600080612ae0612ad3612ac6868a63ffffffff610e8116565b8a9063ffffffff610cf616565b8a9063ffffffff610e8116565b90506000612af7612ad38b8763ffffffff610f3f16565b90506000612b0e612a43848463ffffffff6116b216565b90506000612b27826111ef886101000151610ba8611481565b90506000612b3c896111218a6111ef866123ac565b9d9c50505050505050505050505050565b600080612b60848663ffffffff6116b216565b90506000612b8e612b7c866111ef876101000151610ba8611481565b6101008601519063ffffffff610f3f16565b90506000612bb2612baa886111ef886101000151610ba8611481565b61180e611481565b90506000612bc6838363ffffffff6116b216565b9050808412612bd55780612b3c565b50919b9a5050505050505050505050565b600080612bf9848663ffffffff610cf616565b90506000612c096001600a611462565b90506000612c39612c2c612c1f88610ba8611481565b879063ffffffff610f3f16565b839063ffffffff610e8116565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612c6c9291906132d0565b60405180910390a190911395945050505050565b600080612c9287846101000151612eeb565b90506000612cc4612cae866111ef876101000151610ba8611481565b61010086015161180e908563ffffffff610e8116565b90506000612cf1612ce48a6111ef8a6111ef8a6101000151610ba8611481565b849063ffffffff610f3f16565b90506000612d09826111218c8663ffffffff610e8116565b9050888112612d185788612d1a565b805b94505050509550959350505050565b6000806000806000612d3b8b8b612f28565b90506000612d4e82886101000151612eeb565b90506000612d72612d658c8563ffffffff610e8116565b8b9063ffffffff610cf616565b9050808213612d9d57828c83612d8d8f8c6101000151612eeb565b9650965096509650505050612daa565b508b955090935086925090505b9650965096509692505050565b600080612e00612ddd612dd0898b63ffffffff610cf616565b859063ffffffff610e8116565b61180e612df0898b63ffffffff610e8116565b610ba8898d63ffffffff610e8116565b90506000612e37612e27612e1a8a8c63ffffffff610cf616565b879063ffffffff610e8116565b61180e888a63ffffffff610cf616565b90506000612e4b838363ffffffff6116b216565b9050898113612e5a57896117d4565b9998505050505050505050565b612e73605f6064611462565b81121561022a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613b03565b6000610c4d826f80000000000000000000000000000000611495565b6000610c4d8283610e81565b600081831315612ee45781610d5f565b5090919050565b600080612efd6117b984610ba8611481565b90506000612f0a85611cc2565b9050612f1f61179a838363ffffffff610e8116565b95945050505050565b6000610d5f612f37600a612eac565b611121612f54612f476006612eac565b869063ffffffff610e8116565b61180e612f616004612eac565b889063ffffffff610e8116565b604051806101c00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4d57600080fd5b60006020828403121561304157600080fd5b610d5f838361300b565b6000806040838503121561305e57600080fd5b613068848461300b565b9150613077846020850161300b565b90509250929050565b60008060006060848603121561309557600080fd5b83356130a081613bb9565b925060208401356130b081613bb9565b929592945050506040919091013590565b6000602082840312156130d357600080fd5b81518015158114610c4a57600080fd5b6000602082840312156130f557600080fd5b5035919050565b6000806040838503121561310f57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b8e1515815273ffffffffffffffffffffffffffffffffffffffff8e1660208201526101c08101613279604083018f61311e565b606082019c909c52608081019a909a5260a08a019890985260c089019690965260e08801949094526101008701929092526101208601526101408501526101608401526101808301526101a0909101529392505050565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461022a57600080fdfea365627a7a7230582018818618f4c4fbefb6e256ae7a4faa1f0ec09e65a7aadce2ab350cdfef5820806c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x3C1E DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xDF791E50 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x181 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x144 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x11E JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x302F JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x304B JUMP JUMPDEST PUSH2 0x1C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3138 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x30E3 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH2 0xFF PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x30FC JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH2 0x14C PUSH2 0x723 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3246 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x3080 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH2 0xFF PUSH2 0x954 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x302F JUMP JUMPDEST PUSH2 0x97E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xA50 JUMP JUMPDEST PUSH2 0x1D2 DUP3 DUP3 PUSH2 0xAA3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x22A SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND PUSH9 0x410D586A20A4C0000 PUSH2 0x77C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x252 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xBF6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC53 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x285 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x252 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xBF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x29D DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x298 DUP5 PUSH2 0xCA0 JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x2B4 SWAP1 PUSH2 0x298 DUP4 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2DB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD66 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x302 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x364 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x3220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x392 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3B6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x411 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x463 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x480 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xDE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x491 DUP5 PUSH3 0xF4240 PUSH2 0xDE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x4AA DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x4C0 SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST EQ PUSH2 0x500 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x55D SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5AF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x60C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x65E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x67D JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x6A0 PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x252 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xBF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x6B1 DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xF3F JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x6C5 SWAP1 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6EC SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x713 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xFF DUP14 AND SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP13 AND SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x786 PUSH2 0x2F6E JUMP JUMPDEST PUSH2 0x78E PUSH2 0xF4B JUMP JUMPDEST SWAP1 POP PUSH2 0x798 PUSH2 0xFFA JUMP JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD EQ ISZERO PUSH2 0x7B1 JUMPI PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x81F JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x84D JUMPI PUSH1 0x0 PUSH2 0x83A DUP7 DUP7 PUSH2 0x834 DUP8 PUSH2 0xFFE JUMP JUMPDEST DUP6 PUSH2 0x100B JUMP JUMPDEST SWAP1 POP PUSH2 0x845 DUP2 PUSH2 0x1448 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x90D JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x8BB JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8DB JUMPI PUSH1 0x0 PUSH2 0x8D0 DUP7 DUP7 PUSH2 0x834 DUP8 PUSH2 0xFFE JUMP JUMPDEST SWAP1 POP PUSH2 0x845 DUP2 PUSH2 0x1455 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x34C4 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x944 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x960 PUSH1 0x1 PUSH1 0x2 PUSH2 0xAA3 JUMP JUMPDEST PUSH2 0x96B PUSH2 0x1F4 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x979 PUSH2 0x3E8 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x986 PUSH2 0xA50 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3829 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0xA45 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x3159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xAA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3456 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x348D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB67 PUSH1 0x63 PUSH1 0x64 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xB7C SWAP1 PUSH1 0x64 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xB8C PUSH1 0x5 PUSH2 0x2710 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xBB4 PUSH2 0xBA0 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x1462 JUMP JUMPDEST PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST PUSH1 0xD SSTORE PUSH2 0xBC5 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0xE SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC05 JUMPI POP PUSH1 0x0 PUSH2 0xC4D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xC12 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3662 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3372 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC97 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xCDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3605 JUMP JUMPDEST PUSH2 0xC4D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x394C JUMP JUMPDEST PUSH2 0xD5F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x150B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x33E8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xE23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3983 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xE5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x353A JUMP JUMPDEST PUSH2 0xD5F PUSH2 0xE7B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST DUP4 PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB2 PUSH16 0x80000000000000000000000000000000 PUSH2 0xEAD PUSH2 0xEA4 DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0x1495 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECB PUSH2 0xEC2 DUP7 PUSH2 0x1666 JUMP JUMPDEST PUSH2 0xEAD DUP7 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE4 PUSH2 0xEDB DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD DUP8 PUSH2 0x1666 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF16 PUSH2 0xF00 PUSH2 0xEF7 DUP10 PUSH2 0x1666 JUMP JUMPDEST PUSH2 0xEAD DUP10 PUSH2 0x1666 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x1581 JUMP JUMPDEST SWAP1 POP PUSH2 0xF34 PUSH2 0xF2E PUSH2 0xF28 DUP7 DUP7 PUSH2 0x150B JUMP JUMPDEST DUP5 PUSH2 0x150B JUMP JUMPDEST DUP3 PUSH2 0x150B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP4 DUP4 PUSH2 0x150B JUMP JUMPDEST PUSH2 0xF53 PUSH2 0x2F6E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x12 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x1071 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1090 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1130 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x10FE JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8DB JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x112D DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1143 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x172C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1155 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x17E2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1192 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3ACC JUMP JUMPDEST DUP1 PUSH2 0x11C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3B3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FB PUSH2 0x11DF DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x11EF DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x37CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124A PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x1462 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x125D DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SGT PUSH2 0x1288 JUMPI PUSH2 0x1272 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x1283 JUMPI PUSH1 0x0 PUSH2 0x1285 JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x1296 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x1462 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F4 DUP12 PUSH2 0x160 ADD MLOAD PUSH2 0x12E7 PUSH2 0xFFA JUMP JUMPDEST DUP14 PUSH2 0x180 ADD MLOAD DUP9 DUP12 PUSH2 0x1BAF JUMP JUMPDEST PUSH2 0x1A0 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x130D SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x1331 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x132A SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x136A JUMP JUMPDEST DUP7 PUSH2 0x134A DUP13 PUSH2 0x1A0 ADD MLOAD DUP4 PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x136A JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x1367 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1372 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x13B4 JUMPI PUSH2 0x138E DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x13A3 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x13C4 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x13D9 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x13EA DUP2 PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x13F9 DUP12 PUSH2 0x1C90 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x142C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x6 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x12 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F PUSH2 0xE7B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x14A2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x14AF JUMPI POP PUSH1 0x0 PUSH2 0xC4D JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x14BD JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x14D4 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x14D0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x389F JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x151E JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1529 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x154A JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x153F JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x154A JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3915 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3A5E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1608 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x163F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3A95 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1648 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x168D JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xC4D JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x16BE DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1709 JUMPI PUSH2 0x1701 PUSH2 0x16D2 DUP6 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD PUSH2 0x16FB DUP8 PUSH2 0xEAD PUSH16 0x80000000000000000000000000000000 PUSH2 0x16F6 DUP12 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0x1581 JUMP JUMPDEST DUP7 PUSH2 0x1581 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x1701 PUSH2 0x1726 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST DUP5 PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x173F DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1753 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1767 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1777 DUP7 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1783 PUSH2 0x1481 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x17A6 JUMPI PUSH2 0x179F PUSH2 0x179A DUP4 PUSH2 0x11EF DUP8 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x17C1 PUSH2 0x17B9 PUSH2 0x179A DUP5 PUSH2 0x11EF DUP8 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x17D4 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1837 PUSH2 0x182A PUSH2 0x181A PUSH2 0x17FE DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH2 0x1121 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x185B PUSH2 0x184E DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x186D DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x29BA JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x189E SWAP2 SWAP1 PUSH2 0x33A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x18B7 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x2AAD JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x18E8 SWAP2 SWAP1 PUSH2 0x39E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x1902 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2B4D JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1933 SWAP2 SWAP1 PUSH2 0x374E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x194B DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x0 PUSH2 0x195F DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2C80 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0x1994 SWAP1 DUP5 SWAP1 PUSH2 0x3A1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x19CB SWAP2 SWAP1 PUSH2 0x370F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x19E3 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B3E JUMPI PUSH1 0x0 PUSH2 0x19F8 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x2D29 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0x1A32 SWAP1 DUP7 SWAP1 PUSH2 0x3860 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A69 SWAP2 SWAP1 PUSH2 0x378D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1AA0 SWAP2 SWAP1 PUSH2 0x3B71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1AD7 SWAP2 SWAP1 PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1AEF DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B3C JUMPI PUSH2 0x1B02 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x2DB7 JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1B33 SWAP2 SWAP1 PUSH2 0x38D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1B49 DUP3 PUSH2 0x2E67 JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x1B7A DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B87 SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1B9F DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BBD DUP8 DUP8 SUB PUSH2 0xCA0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BDD PUSH2 0x179A PUSH2 0x1BD0 DUP9 PUSH2 0x1CC2 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BED DUP3 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C01 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C15 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C41 PUSH2 0x1C2C DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x1C3C DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C59 DUP3 PUSH2 0x1121 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C7E PUSH2 0x1C6A PUSH1 0x2 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x1121 DUP5 PUSH2 0x180E DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xB SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1D0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3597 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x1D48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x341F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1D68 JUMPI POP PUSH1 0x0 PUSH2 0x1BB JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1D9B JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1DFA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1E58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1EBA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1F1E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1F82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1FE6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x204A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x20AE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x2112 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x2188 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x21B9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x21D9 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x220A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x222A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x225B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x227B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x22AC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x22CC JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x22FD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x231D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x234E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x236E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x239F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x23DE JUMPI POP PUSH1 0x0 PUSH2 0x1BB JUMP JUMPDEST DUP2 PUSH2 0x23FA JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x2435 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3699 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2526 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2552 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x257D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25A8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2626 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x264F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2678 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26C8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26EF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2716 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x273C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x27AB JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x27ED JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x282F JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2871 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x28B3 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x28F3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2933 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2973 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x29B3 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x29C7 PUSH1 0x2 PUSH2 0x2EAC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A06 PUSH2 0x29E6 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xBA8 DUP10 PUSH2 0x11EF DUP14 PUSH2 0x11EF DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xCF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A2C PUSH2 0x2A23 DUP11 PUSH2 0x11EF DUP14 PUSH2 0x11EF DUP14 PUSH2 0x11EF PUSH1 0x4 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x180E DUP5 PUSH2 0x2EC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A48 DUP5 PUSH2 0x1121 PUSH2 0x2A43 DUP6 PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x1CC2 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x2A6B JUMPI PUSH2 0x2A66 PUSH2 0x17B9 DUP4 PUSH1 0x0 SUB PUSH2 0x23AC JUMP JUMPDEST PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x2A74 DUP3 PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A9F PUSH2 0x2A8B DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x1121 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C7E DUP11 DUP4 PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AE0 PUSH2 0x2AD3 PUSH2 0x2AC6 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AF7 PUSH2 0x2AD3 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B0E PUSH2 0x2A43 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B27 DUP3 PUSH2 0x11EF DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B3C DUP10 PUSH2 0x1121 DUP11 PUSH2 0x11EF DUP7 PUSH2 0x23AC JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B60 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B8E PUSH2 0x2B7C DUP7 PUSH2 0x11EF DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BB2 PUSH2 0x2BAA DUP9 PUSH2 0x11EF DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x180E PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BC6 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x2BD5 JUMPI DUP1 PUSH2 0x2B3C JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BF9 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C09 PUSH1 0x1 PUSH1 0xA PUSH2 0x1462 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C39 PUSH2 0x2C2C PUSH2 0x2C1F DUP9 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2C6C SWAP3 SWAP2 SWAP1 PUSH2 0x32D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C92 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CC4 PUSH2 0x2CAE DUP7 PUSH2 0x11EF DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x180E SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CF1 PUSH2 0x2CE4 DUP11 PUSH2 0x11EF DUP11 PUSH2 0x11EF DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D09 DUP3 PUSH2 0x1121 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x2D18 JUMPI DUP9 PUSH2 0x2D1A JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2D3B DUP12 DUP12 PUSH2 0x2F28 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D4E DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D72 PUSH2 0x2D65 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2D9D JUMPI DUP3 DUP13 DUP4 PUSH2 0x2D8D DUP16 DUP13 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2DAA JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E00 PUSH2 0x2DDD PUSH2 0x2DD0 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E PUSH2 0x2DF0 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0xBA8 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E37 PUSH2 0x2E27 PUSH2 0x2E1A DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E4B DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2E5A JUMPI DUP10 PUSH2 0x17D4 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E73 PUSH1 0x5F PUSH1 0x64 PUSH2 0x1462 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x22A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 DUP4 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2EE4 JUMPI DUP2 PUSH2 0xD5F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EFD PUSH2 0x17B9 DUP5 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F0A DUP6 PUSH2 0x1CC2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F1F PUSH2 0x179A DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F PUSH2 0x2F37 PUSH1 0xA PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x1121 PUSH2 0x2F54 PUSH2 0x2F47 PUSH1 0x6 PUSH2 0x2EAC JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E PUSH2 0x2F61 PUSH1 0x4 PUSH2 0x2EAC JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD5F DUP4 DUP4 PUSH2 0x300B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x305E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3068 DUP5 DUP5 PUSH2 0x300B JUMP JUMPDEST SWAP2 POP PUSH2 0x3077 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x300B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x30A0 DUP2 PUSH2 0x3BB9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x30B0 DUP2 PUSH2 0x3BB9 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x310F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP15 ISZERO ISZERO DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C0 DUP2 ADD PUSH2 0x3279 PUSH1 0x40 DUP4 ADD DUP16 PUSH2 0x311E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP13 SWAP1 SWAP13 MSTORE PUSH1 0x80 DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE PUSH1 0xA0 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH2 0x100 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 XOR DUP2 DUP7 XOR DELEGATECALL 0xc4 0xfb 0xef 0xb6 0xe2 JUMP 0xae PUSH27 0x4FAA1F0EC09E65A7AADCE2AB350CDFEF5820806C6578706572696D PUSH6 0x6E74616CF564 PUSH20 0x6F6C634300050900400000000000000000000000 ",
				"sourceMap": "154:1081:12:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;154:1081:12;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80639cd441da11610076578063df791e501161005b578063df791e5014610166578063e1c7392a14610179578063f2fde38b14610181576100be565b80639cd441da14610131578063afd46eb514610144576100be565b80638da5cb5b116100a75780638da5cb5b14610101578063978ca36f146101165780639c8f9f231461011e576100be565b806370a08231146100c35780637b689036146100ec575b600080fd5b6100d66100d136600461302f565b610194565b6040516100e39190613bb0565b60405180910390f35b6100ff6100fa36600461304b565b6101c0565b005b6101096101d6565b6040516100e39190613138565b6100ff6101f2565b6100ff61012c3660046130e3565b61022d565b6100ff61013f3660046130fc565b61046a565b61014c610723565b6040516100e39e9d9c9b9a99989796959493929190613246565b6100d6610174366004613080565b61077c565b6100ff610954565b6100ff61018f36600461302f565b61097e565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c60205260409020545b919050565b6101c8610a50565b6101d28282610aa3565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015460025461022a9173ffffffffffffffffffffffffffffffffffffffff61010090910481169116680410d586a20a4c000061077c565b50565b60055460035460019160009161025e9190610252908690607f1c63ffffffff610bf616565b9063ffffffff610c5316565b905060006102858360040154610252607f8660030154901c87610bf690919063ffffffff16565b905061029d836002015461029884610ca0565b610cf6565b600284015560038301546102b49061029883610ca0565b6003840155336000908152600b840160205260409020546102db908563ffffffff610d6616565b336000908152600b850160205260409020556004830154610302908563ffffffff610da816565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb91610364913391879101613220565b602060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b691908101906130c1565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906104119033908590600401613220565b602060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061046391908101906130c1565b5050505050565b6001600061048084670de0b6b3a7640000610de7565b9050600061049184620f4240610de7565b90506104aa836002015482610e8190919063ffffffff16565b60038401546104c090849063ffffffff610e8116565b14610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613315565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9061055d90339030908a906004016131c1565b602060405180830381600087803b15801561057757600080fd5b505af115801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105af91908101906130c1565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061060c903390309089906004016131c1565b602060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065e91908101906130c1565b50600083600201546000141561067d57506001600484015560006106a3565b6106a0607f8560020154901c610252866004015489610bf690919063ffffffff16565b90505b6106b1846002015484610f3f565b600285015560038401546106c59083610f3f565b6003850155336000908152600b850160205260409020546106ec908263ffffffff610da816565b336000908152600b860160205260409020556004840154610713908263ffffffff610da816565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600b54600d54600e5460ff8d169c73ffffffffffffffffffffffffffffffffffffffff61010090910481169c169a999897969594939291908e565b6000610786612f6e565b61078e610f4b565b9050610798610ffa565b81610160015114156107b1576101408101516101208201525b806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614801561081f5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561084d57600061083a868661083487610ffe565b8561100b565b905061084581611448565b92505061090d565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156108bb5750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156108db5760006108d0868661083487610ffe565b905061084581611455565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906134c4565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea3386868686604051610944959493929190613180565b60405180910390a1509392505050565b61096060016002610aa3565b61096b6101f4610ca0565b6003556109796103e8610ca0565b600455565b610986610a50565b73ffffffffffffffffffffffffffffffffffffffff81166109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613829565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090610a459033908490613159565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aa1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613456565b565b60015460ff1615610ae0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061348d565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610b6760636064610de7565b60065560636007819055610b7c906064610de7565b600855610b8c6005612710610de7565b600955610bb4610ba06001620f4240611462565b610ba8611481565b9063ffffffff610cf616565b600d55610bc56127156103e8611462565b600e555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b600082610c0557506000610c4d565b82820282848281610c1257fe5b0414610c4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613662565b90505b92915050565b600081610c8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613372565b6000828481610c9757fe5b04949350505050565b600080821215610cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613605565b610c4d826f80000000000000000000000000000000611495565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610d52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061394c565b610d5f838360000361150b565b9392505050565b600082821115610da2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906133e8565b50900390565b600082820183811015610c4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906132de565b600080831215610e23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613983565b6000821215610e5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061353a565b610d5f610e7b846f80000000000000000000000000000000611495565b83611581565b600080610eb26f80000000000000000000000000000000610ead610ea487611650565b610ead87611650565b611495565b90506000610ecb610ec286611666565b610ead86611650565b90506000610ee4610edb87611650565b610ead87611666565b90506000610f16610f00610ef789611666565b610ead89611666565b6f80000000000000000000000000000000611581565b9050610f34610f2e610f28868661150b565b8461150b565b8261150b565b979650505050505050565b6000610d5f838361150b565b610f53612f6e565b50604080516101c08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600b54610160820152600d54610180820152600e546101a082015290565b4390565b6000610c4d8260126116a3565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156110715750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561109057505050506060820151608083015160c08401516001611130565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156110fe5750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156108db57856080015193508560600151925061112d8660c00151611121611481565b9063ffffffff6116b216565b91505b60006111438585858a610100015161172c565b90506000611155868684878d8d6117e2565b90506000811215611192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613acc565b806111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613b3a565b60006111fb6111df8a6101200151610ba8611481565b6111ef8c8563ffffffff610e8116565b9063ffffffff610e8116565b60009081039150811261123a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906137cc565b600061124a6001620186a0611462565b90508061125d888463ffffffff610f3f16565b1361128857611272818863ffffffff610cf616565b915060008212611283576000611285565b815b91505b6112966001620f4240611462565b82019150600082126112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906135ce565b60006112f48b61016001516112e7610ffa565b8d6101800151888b611baf565b6101a08c015190915061130d908863ffffffff610e8116565b811315611331576101a08b015161132a908863ffffffff610e8116565b905061136a565b8661134a8c6101a0015183610e8190919063ffffffff16565b121561136a576101a08b015161136790889063ffffffff6116b216565b90505b611372610ffa565b6101608c015285156113b45761138e898d63ffffffff610f3f16565b60608c01526113a3888463ffffffff610f3f16565b60808c015260c08b018190526113f0565b6113c4888463ffffffff610f3f16565b60608c01526113d9898d63ffffffff610f3f16565b60808c01526113ea81611121611481565b60c08c01525b6113f98b611c90565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161142c939291906131f2565b60405180910390a150506000039b9a5050505050505050505050565b6000610c4d826006611cb2565b6000610c4d826012611cb2565b6000610d5f610e7b846f80000000000000000000000000000000611495565b6f8000000000000000000000000000000090565b60008215806114a2575081155b156114af57506000610c4d565b50818102818382816114bd57fe5b051415806114d45750828282816114d057fe5b0514155b15610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061389f565b81810160008312801561151e5750600082125b801561152957508281135b8061154a575060008313801561153f5750600082135b801561154a57508281125b15610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613915565b6000816115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613a5e565b7f8000000000000000000000000000000000000000000000000000000000000000831480156116085750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b1561163f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613a95565b81838161164857fe5b059392505050565b6f80000000000000000000000000000000900590565b600080821361168d576f7fffffffffffffffffffffffffffffff8260000316600003610c4d565b506f7fffffffffffffffffffffffffffffff1690565b6000610d5f8383600a0a610de7565b6000806116be84611650565b90508015611709576117016116d285611650565b610ead6116fb87610ead6f800000000000000000000000000000006116f68b611650565b611581565b86611581565b915050610c4d565b611701611726856f80000000000000000000000000000000611495565b84611581565b60008061173f848763ffffffff610e8116565b90506000611753868363ffffffff6116b216565b90506000611767838863ffffffff6116b216565b9050600061177786610ba8611481565b90506000611783611481565b8412156117a65761179f61179a836111ef87611cc2565b6123ac565b90506117c4565b6117c16117b961179a846111ef87611cc2565b611121611481565b90505b6117d4818963ffffffff610e8116565b9a9950505050505050505050565b60008061183761182a61181a6117fe8a8863ffffffff610e8116565b61180e8c8c63ffffffff610e8116565b9063ffffffff610f3f16565b611121898863ffffffff610e8116565b899063ffffffff610e8116565b9050600061185b61184e8a8763ffffffff610f3f16565b8a9063ffffffff6116b216565b9050600061186d8a8a8a8a8a8a6129ba565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68160405161189e91906133a9565b60405180910390a160006118b78b8b8b8b8b878c612aad565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516118e891906139e0565b60405180910390a160006119028c8c8c8c8c8a8a8e612b4d565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051611933919061374e565b60405180910390a161194b8282896101200151612be6565b15611b4057600061195f838388888c612c80565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690611994908490613a1f565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516119cb919061370f565b60405180910390a16119e383838a6101200151612be6565b15611b3e5760006119f884848989868e612d29565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690611a32908690613860565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee683604051611a69919061378d565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee682604051611aa09190613b71565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051611ad791906136d0565b60405180910390a1611aef84848b6101200151612be6565b15611b3c57611b02848484848b8b612db7565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee684604051611b3391906138d6565b60405180910390a15b505b505b611b4982612e67565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6611b7a838c63ffffffff610e8116565b604051611b8791906134fb565b60405180910390a1611b9f828b63ffffffff610e8116565b9c9b505050505050505050505050565b600080611bbd878703610ca0565b90506000611bdd61179a611bd088611cc2565b849063ffffffff610e8116565b90506000611bed82610ba8611481565b90506000611c01878363ffffffff610e8116565b90506000611c15878563ffffffff610e8116565b90506000611c41611c2c858a63ffffffff610e8116565b611c3c878c63ffffffff610e8116565b610f3f565b90506000611c59826111218c8c63ffffffff610e8116565b90506000611c7e611c6a6002612eac565b6111218461180e898963ffffffff610f3f16565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101600151600b55565b6000610d5f82600a0a8402611650565b60006f80000000000000000000000000000000821315611d0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613597565b60008213611d48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f79061341f565b6f80000000000000000000000000000000821415611d68575060006101bb565b640733048c5a8213611d9b57507fffffffffffffffffffffffffffffffe0100000000000000000000000000000006101bb565b60008060006a01c8464f761647600000008513611dfa577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611e58577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611eba577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611f1e577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611f82577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611fe6577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361204a577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136120ae577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513612112577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161218857fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816121b957fe5b05840193506f80000000000000000000000000000000818302816121d957fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161220a57fe5b05840193506f800000000000000000000000000000008183028161222a57fe5b059150700400000000000000000000000000000000836f924924924924924924924924924924920383028161225b57fe5b05840193506f800000000000000000000000000000008183028161227b57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e038302816122ac57fe5b05840193506f80000000000000000000000000000000818302816122cc57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b038302816122fd57fe5b05840193506f800000000000000000000000000000008183028161231d57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d890383028161234e57fe5b05840193506f800000000000000000000000000000008183028161236e57fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161239f57fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe0100000000000000000000000000000008212156123de575060006101bb565b816123fa57506f800000000000000000000000000000006101bb565b6000821315612435576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613699565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f80000000000000000000000000000000828202816124a157fe5b05905080670168244fdac7800002830192506f80000000000000000000000000000000828202816124ce57fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816124fa57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161252657fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161255257fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161257d57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816125a857fe5b05905080649c197dcc0002830192506f80000000000000000000000000000000828202816125d257fe5b05905080640e30dce40002830192506f80000000000000000000000000000000828202816125fc57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161262657fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161264f57fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161267857fe5b05905080621c638002830192506f80000000000000000000000000000000828202816126a057fe5b059050806201c63802830192506f80000000000000000000000000000000828202816126c857fe5b05905080611ab802830192506f80000000000000000000000000000000828202816126ef57fe5b0590508061017c02830192506f800000000000000000000000000000008282028161271657fe5b05905080601402830192506f800000000000000000000000000000008282028161273c57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156127ab577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b7008000000000000000000000000000000008416156127ed577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561282f57701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612871577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156128b35770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156128f3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612933576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612973576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156129b3576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806129c76002612eac565b90506000612a066129e689866101000151610e8190919063ffffffff16565b610ba8896111ef8d6111ef8a610100015189610cf690919063ffffffff16565b90506000612a2c612a238a6111ef8d6111ef8d6111ef6004612eac565b61180e84612ec8565b90506000612a4884611121612a4385611121611481565b611cc2565b6000039050600080821315612a6b57612a666117b9836000036123ac565b612a74565b612a74826123ac565b90506000612a9f612a8b878d63ffffffff610e8116565b61112160008890038563ffffffff610f3f16565b90506000611c7e8a83612ed4565b600080612ae0612ad3612ac6868a63ffffffff610e8116565b8a9063ffffffff610cf616565b8a9063ffffffff610e8116565b90506000612af7612ad38b8763ffffffff610f3f16565b90506000612b0e612a43848463ffffffff6116b216565b90506000612b27826111ef886101000151610ba8611481565b90506000612b3c896111218a6111ef866123ac565b9d9c50505050505050505050505050565b600080612b60848663ffffffff6116b216565b90506000612b8e612b7c866111ef876101000151610ba8611481565b6101008601519063ffffffff610f3f16565b90506000612bb2612baa886111ef886101000151610ba8611481565b61180e611481565b90506000612bc6838363ffffffff6116b216565b9050808412612bd55780612b3c565b50919b9a5050505050505050505050565b600080612bf9848663ffffffff610cf616565b90506000612c096001600a611462565b90506000612c39612c2c612c1f88610ba8611481565b879063ffffffff610f3f16565b839063ffffffff610e8116565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612c6c9291906132d0565b60405180910390a190911395945050505050565b600080612c9287846101000151612eeb565b90506000612cc4612cae866111ef876101000151610ba8611481565b61010086015161180e908563ffffffff610e8116565b90506000612cf1612ce48a6111ef8a6111ef8a6101000151610ba8611481565b849063ffffffff610f3f16565b90506000612d09826111218c8663ffffffff610e8116565b9050888112612d185788612d1a565b805b94505050509550959350505050565b6000806000806000612d3b8b8b612f28565b90506000612d4e82886101000151612eeb565b90506000612d72612d658c8563ffffffff610e8116565b8b9063ffffffff610cf616565b9050808213612d9d57828c83612d8d8f8c6101000151612eeb565b9650965096509650505050612daa565b508b955090935086925090505b9650965096509692505050565b600080612e00612ddd612dd0898b63ffffffff610cf616565b859063ffffffff610e8116565b61180e612df0898b63ffffffff610e8116565b610ba8898d63ffffffff610e8116565b90506000612e37612e27612e1a8a8c63ffffffff610cf616565b879063ffffffff610e8116565b61180e888a63ffffffff610cf616565b90506000612e4b838363ffffffff6116b216565b9050898113612e5a57896117d4565b9998505050505050505050565b612e73605f6064611462565b81121561022a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790613b03565b6000610c4d826f80000000000000000000000000000000611495565b6000610c4d8283610e81565b600081831315612ee45781610d5f565b5090919050565b600080612efd6117b984610ba8611481565b90506000612f0a85611cc2565b9050612f1f61179a838363ffffffff610e8116565b95945050505050565b6000610d5f612f37600a612eac565b611121612f54612f476006612eac565b869063ffffffff610e8116565b61180e612f616004612eac565b889063ffffffff610e8116565b604051806101c00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4d57600080fd5b60006020828403121561304157600080fd5b610d5f838361300b565b6000806040838503121561305e57600080fd5b613068848461300b565b9150613077846020850161300b565b90509250929050565b60008060006060848603121561309557600080fd5b83356130a081613bb9565b925060208401356130b081613bb9565b929592945050506040919091013590565b6000602082840312156130d357600080fd5b81518015158114610c4a57600080fd5b6000602082840312156130f557600080fd5b5035919050565b6000806040838503121561310f57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b8e1515815273ffffffffffffffffffffffffffffffffffffffff8e1660208201526101c08101613279604083018f61311e565b606082019c909c52608081019a909a5260a08a019890985260c089019690965260e08801949094526101008701929092526101208601526101408501526101608401526101808301526101a0909101529392505050565b918252602082015260400190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461022a57600080fdfea365627a7a7230582018818618f4c4fbefb6e256ae7a4faa1f0ec09e65a7aadce2ab350cdfef5820806c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9CD441DA GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xDF791E50 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x181 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x144 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x978CA36F EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x11E JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x302F JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x304B JUMP JUMPDEST PUSH2 0x1C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x109 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3138 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x30E3 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH2 0xFF PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x30FC JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH2 0x14C PUSH2 0x723 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3246 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x3080 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH2 0xFF PUSH2 0x954 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x302F JUMP JUMPDEST PUSH2 0x97E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xA50 JUMP JUMPDEST PUSH2 0x1D2 DUP3 DUP3 PUSH2 0xAA3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x22A SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND PUSH9 0x410D586A20A4C0000 PUSH2 0x77C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x252 SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0xBF6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC53 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x285 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x252 PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0xBF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x29D DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x298 DUP5 PUSH2 0xCA0 JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x2B4 SWAP1 PUSH2 0x298 DUP4 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2DB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xD66 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x302 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x364 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x3220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x392 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3B6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x411 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x463 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x480 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xDE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x491 DUP5 PUSH3 0xF4240 PUSH2 0xDE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x4AA DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x4C0 SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST EQ PUSH2 0x500 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x55D SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x58B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5AF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x60C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x65E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30C1 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x67D JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x6A0 PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x252 DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0xBF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x6B1 DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xF3F JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x6C5 SWAP1 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6EC SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x713 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDA8 AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xFF DUP14 AND SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP13 AND SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x786 PUSH2 0x2F6E JUMP JUMPDEST PUSH2 0x78E PUSH2 0xF4B JUMP JUMPDEST SWAP1 POP PUSH2 0x798 PUSH2 0xFFA JUMP JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD EQ ISZERO PUSH2 0x7B1 JUMPI PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x81F JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x84D JUMPI PUSH1 0x0 PUSH2 0x83A DUP7 DUP7 PUSH2 0x834 DUP8 PUSH2 0xFFE JUMP JUMPDEST DUP6 PUSH2 0x100B JUMP JUMPDEST SWAP1 POP PUSH2 0x845 DUP2 PUSH2 0x1448 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x90D JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x8BB JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8DB JUMPI PUSH1 0x0 PUSH2 0x8D0 DUP7 DUP7 PUSH2 0x834 DUP8 PUSH2 0xFFE JUMP JUMPDEST SWAP1 POP PUSH2 0x845 DUP2 PUSH2 0x1455 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x34C4 JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x944 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x960 PUSH1 0x1 PUSH1 0x2 PUSH2 0xAA3 JUMP JUMPDEST PUSH2 0x96B PUSH2 0x1F4 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x979 PUSH2 0x3E8 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x986 PUSH2 0xA50 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3829 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0xA45 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x3159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xAA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3456 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x348D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB67 PUSH1 0x63 PUSH1 0x64 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0xB7C SWAP1 PUSH1 0x64 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xB8C PUSH1 0x5 PUSH2 0x2710 PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xBB4 PUSH2 0xBA0 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x1462 JUMP JUMPDEST PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST PUSH1 0xD SSTORE PUSH2 0xBC5 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x1462 JUMP JUMPDEST PUSH1 0xE SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC05 JUMPI POP PUSH1 0x0 PUSH2 0xC4D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xC12 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3662 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3372 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC97 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xCDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3605 JUMP JUMPDEST PUSH2 0xC4D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x394C JUMP JUMPDEST PUSH2 0xD5F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x150B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x33E8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xE23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3983 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xE5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x353A JUMP JUMPDEST PUSH2 0xD5F PUSH2 0xE7B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST DUP4 PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB2 PUSH16 0x80000000000000000000000000000000 PUSH2 0xEAD PUSH2 0xEA4 DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0x1495 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECB PUSH2 0xEC2 DUP7 PUSH2 0x1666 JUMP JUMPDEST PUSH2 0xEAD DUP7 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE4 PUSH2 0xEDB DUP8 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD DUP8 PUSH2 0x1666 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF16 PUSH2 0xF00 PUSH2 0xEF7 DUP10 PUSH2 0x1666 JUMP JUMPDEST PUSH2 0xEAD DUP10 PUSH2 0x1666 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x1581 JUMP JUMPDEST SWAP1 POP PUSH2 0xF34 PUSH2 0xF2E PUSH2 0xF28 DUP7 DUP7 PUSH2 0x150B JUMP JUMPDEST DUP5 PUSH2 0x150B JUMP JUMPDEST DUP3 PUSH2 0x150B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP4 DUP4 PUSH2 0x150B JUMP JUMPDEST PUSH2 0xF53 PUSH2 0x2F6E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x12 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x1071 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1090 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1130 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x10FE JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x8DB JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x112D DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1143 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x172C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1155 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0x17E2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1192 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3ACC JUMP JUMPDEST DUP1 PUSH2 0x11C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3B3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FB PUSH2 0x11DF DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x11EF DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x37CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124A PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x1462 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x125D DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SGT PUSH2 0x1288 JUMPI PUSH2 0x1272 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x1283 JUMPI PUSH1 0x0 PUSH2 0x1285 JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x1296 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x1462 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F4 DUP12 PUSH2 0x160 ADD MLOAD PUSH2 0x12E7 PUSH2 0xFFA JUMP JUMPDEST DUP14 PUSH2 0x180 ADD MLOAD DUP9 DUP12 PUSH2 0x1BAF JUMP JUMPDEST PUSH2 0x1A0 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x130D SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x1331 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x132A SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x136A JUMP JUMPDEST DUP7 PUSH2 0x134A DUP13 PUSH2 0x1A0 ADD MLOAD DUP4 PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x136A JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x1367 SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1372 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x13B4 JUMPI PUSH2 0x138E DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x13A3 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x13C4 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x13D9 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x13EA DUP2 PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x13F9 DUP12 PUSH2 0x1C90 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x142C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x6 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH1 0x12 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F PUSH2 0xE7B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x14A2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x14AF JUMPI POP PUSH1 0x0 PUSH2 0xC4D JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x14BD JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x14D4 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x14D0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x389F JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x151E JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1529 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x154A JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x153F JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x154A JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3915 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3A5E JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1608 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x163F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3A95 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1648 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x168D JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0xC4D JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xDE7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x16BE DUP5 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1709 JUMPI PUSH2 0x1701 PUSH2 0x16D2 DUP6 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0xEAD PUSH2 0x16FB DUP8 PUSH2 0xEAD PUSH16 0x80000000000000000000000000000000 PUSH2 0x16F6 DUP12 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0x1581 JUMP JUMPDEST DUP7 PUSH2 0x1581 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x1701 PUSH2 0x1726 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST DUP5 PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x173F DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1753 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1767 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1777 DUP7 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1783 PUSH2 0x1481 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0x17A6 JUMPI PUSH2 0x179F PUSH2 0x179A DUP4 PUSH2 0x11EF DUP8 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH2 0x17C4 JUMP JUMPDEST PUSH2 0x17C1 PUSH2 0x17B9 PUSH2 0x179A DUP5 PUSH2 0x11EF DUP8 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x17D4 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1837 PUSH2 0x182A PUSH2 0x181A PUSH2 0x17FE DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST PUSH2 0x1121 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x185B PUSH2 0x184E DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x186D DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x29BA JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x189E SWAP2 SWAP1 PUSH2 0x33A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x18B7 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x2AAD JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x18E8 SWAP2 SWAP1 PUSH2 0x39E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x1902 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2B4D JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1933 SWAP2 SWAP1 PUSH2 0x374E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x194B DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x0 PUSH2 0x195F DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2C80 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0x1994 SWAP1 DUP5 SWAP1 PUSH2 0x3A1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x19CB SWAP2 SWAP1 PUSH2 0x370F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x19E3 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B3E JUMPI PUSH1 0x0 PUSH2 0x19F8 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x2D29 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0x1A32 SWAP1 DUP7 SWAP1 PUSH2 0x3860 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A69 SWAP2 SWAP1 PUSH2 0x378D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1AA0 SWAP2 SWAP1 PUSH2 0x3B71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1AD7 SWAP2 SWAP1 PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1AEF DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x2BE6 JUMP JUMPDEST ISZERO PUSH2 0x1B3C JUMPI PUSH2 0x1B02 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x2DB7 JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1B33 SWAP2 SWAP1 PUSH2 0x38D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x1B49 DUP3 PUSH2 0x2E67 JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x1B7A DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B87 SWAP2 SWAP1 PUSH2 0x34FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1B9F DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BBD DUP8 DUP8 SUB PUSH2 0xCA0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BDD PUSH2 0x179A PUSH2 0x1BD0 DUP9 PUSH2 0x1CC2 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BED DUP3 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C01 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C15 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C41 PUSH2 0x1C2C DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x1C3C DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C59 DUP3 PUSH2 0x1121 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C7E PUSH2 0x1C6A PUSH1 0x2 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x1121 DUP5 PUSH2 0x180E DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xB SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1D0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3597 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x1D48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x341F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1D68 JUMPI POP PUSH1 0x0 PUSH2 0x1BB JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1D9B JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1DFA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1E58 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1EBA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1F1E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1F82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1FE6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x204A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x20AE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x2112 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x2188 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x21B9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x21D9 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x220A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x222A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x225B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x227B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x22AC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x22CC JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x22FD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x231D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x234E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x236E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x239F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x23DE JUMPI POP PUSH1 0x0 PUSH2 0x1BB JUMP JUMPDEST DUP2 PUSH2 0x23FA JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x2435 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3699 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24A1 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x24FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2526 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2552 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x257D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25A8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x25FC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2626 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x264F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2678 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26C8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x26EF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x2716 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x273C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x27AB JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x27ED JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x282F JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2871 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x28B3 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x28F3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2933 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2973 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x29B3 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x29C7 PUSH1 0x2 PUSH2 0x2EAC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A06 PUSH2 0x29E6 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xE81 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xBA8 DUP10 PUSH2 0x11EF DUP14 PUSH2 0x11EF DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xCF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A2C PUSH2 0x2A23 DUP11 PUSH2 0x11EF DUP14 PUSH2 0x11EF DUP14 PUSH2 0x11EF PUSH1 0x4 PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x180E DUP5 PUSH2 0x2EC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A48 DUP5 PUSH2 0x1121 PUSH2 0x2A43 DUP6 PUSH2 0x1121 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x1CC2 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x2A6B JUMPI PUSH2 0x2A66 PUSH2 0x17B9 DUP4 PUSH1 0x0 SUB PUSH2 0x23AC JUMP JUMPDEST PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x2A74 DUP3 PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2A9F PUSH2 0x2A8B DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x1121 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C7E DUP11 DUP4 PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AE0 PUSH2 0x2AD3 PUSH2 0x2AC6 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AF7 PUSH2 0x2AD3 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B0E PUSH2 0x2A43 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B27 DUP3 PUSH2 0x11EF DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B3C DUP10 PUSH2 0x1121 DUP11 PUSH2 0x11EF DUP7 PUSH2 0x23AC JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B60 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B8E PUSH2 0x2B7C DUP7 PUSH2 0x11EF DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BB2 PUSH2 0x2BAA DUP9 PUSH2 0x11EF DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x180E PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BC6 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x2BD5 JUMPI DUP1 PUSH2 0x2B3C JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BF9 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C09 PUSH1 0x1 PUSH1 0xA PUSH2 0x1462 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C39 PUSH2 0x2C2C PUSH2 0x2C1F DUP9 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2C6C SWAP3 SWAP2 SWAP1 PUSH2 0x32D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C92 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CC4 PUSH2 0x2CAE DUP7 PUSH2 0x11EF DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x180E SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CF1 PUSH2 0x2CE4 DUP11 PUSH2 0x11EF DUP11 PUSH2 0x11EF DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xF3F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D09 DUP3 PUSH2 0x1121 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x2D18 JUMPI DUP9 PUSH2 0x2D1A JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2D3B DUP12 DUP12 PUSH2 0x2F28 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D4E DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D72 PUSH2 0x2D65 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2D9D JUMPI DUP3 DUP13 DUP4 PUSH2 0x2D8D DUP16 DUP13 PUSH2 0x100 ADD MLOAD PUSH2 0x2EEB JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2DAA JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E00 PUSH2 0x2DDD PUSH2 0x2DD0 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E PUSH2 0x2DF0 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0xBA8 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E37 PUSH2 0x2E27 PUSH2 0x2E1A DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCF6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E4B DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x16B2 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2E5A JUMPI DUP10 PUSH2 0x17D4 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E73 PUSH1 0x5F PUSH1 0x64 PUSH2 0x1462 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x22A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F7 SWAP1 PUSH2 0x3B03 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4D DUP3 DUP4 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2EE4 JUMPI DUP2 PUSH2 0xD5F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EFD PUSH2 0x17B9 DUP5 PUSH2 0xBA8 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F0A DUP6 PUSH2 0x1CC2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F1F PUSH2 0x179A DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F PUSH2 0x2F37 PUSH1 0xA PUSH2 0x2EAC JUMP JUMPDEST PUSH2 0x1121 PUSH2 0x2F54 PUSH2 0x2F47 PUSH1 0x6 PUSH2 0x2EAC JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH2 0x180E PUSH2 0x2F61 PUSH1 0x4 PUSH2 0x2EAC JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE81 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD5F DUP4 DUP4 PUSH2 0x300B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x305E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3068 DUP5 DUP5 PUSH2 0x300B JUMP JUMPDEST SWAP2 POP PUSH2 0x3077 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x300B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x30A0 DUP2 PUSH2 0x3BB9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x30B0 DUP2 PUSH2 0x3BB9 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x310F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP15 ISZERO ISZERO DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C0 DUP2 ADD PUSH2 0x3279 PUSH1 0x40 DUP4 ADD DUP16 PUSH2 0x311E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP13 SWAP1 SWAP13 MSTORE PUSH1 0x80 DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE PUSH1 0xA0 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH2 0x100 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 XOR DUP2 DUP7 XOR DELEGATECALL 0xc4 0xfb 0xef 0xb6 0xe2 JUMP 0xae PUSH27 0x4FAA1F0EC09E65A7AADCE2AB350CDFEF5820806C6578706572696D PUSH6 0x6E74616CF564 PUSH20 0x6F6C634300050900400000000000000000000000 ",
				"sourceMap": "154:1081:12:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;154:1081:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;380:196:1;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;644:457:12;;;:::i;2536:1002:1:-;;;;;;;;;:::i;845:1544::-;;;;;;;;;:::i;264:28:3:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;525:1693:4;;;;;;;;;:::i;285:352:12:-;;;:::i;320:293:2:-;;;;;;;;;:::i;380:196:1:-;538:31;;;461:7;538:31;;;:22;:31;;;;;;380:196;;;;:::o;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;644:457:12:-;740:6;:15;769;;722:97;;740:15;;;;;;;;769;798:11;722:4;:97::i;:::-;;644:457::o;2536:1002:1:-;2843:7;;2818;;2679:6;;2648:28;;2793:58;;2843:7;2793:41;;:8;;2830:3;2810:23;2793:41;:16;:41;:::i;:::-;:49;:58;:49;:58;:::i;:::-;2774:77;;2861:16;2880:58;2930:5;:7;;;2880:41;2917:3;2905:5;:7;;;2897:23;;2880:8;:16;;:41;;;;:::i;:58::-;2861:77;;3003:57;3020:5;:7;;;3029:30;3050:8;3029:20;:30::i;:::-;3003:16;:57::i;:::-;2993:7;;;:67;3097:7;;;;3080:57;;3106:30;3127:8;3106:20;:30::i;3080:57::-;3070:7;;;:67;3248:10;3225:34;;;;:22;;;:34;;;;;;:74;;3281:8;3225:74;:42;:74;:::i;:::-;3211:10;3188:34;;;;:22;;;:34;;;;;:111;3319:7;;;;:25;;3335:8;3319:25;:15;:25;:::i;:::-;3309:7;;;;:35;;;;3422:14;;3415:53;;;;;3422:14;;;;;;;3415:31;;:53;;3447:10;;3459:8;;3415:53;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3415:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3415:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3415:53:1;;;;;;;;;-1:-1:-1;3485:14:1;;;;3478:53;;;;;3485:14;;;;;3478:31;;:53;;3510:10;;3522:8;;3478:53;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3478:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3478:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3478:53:1;;;;;;;;;;2536:1002;;;;:::o;845:1544::-;1003:6;972:28;1041:38;1062:8;1072:6;1041:20;:38::i;:::-;1019:60;;1089:19;1111:37;1132:8;1142:5;1111:20;:37::i;:::-;1089:59;;1296:25;1313:5;:7;;;1296:12;:16;;:25;;;;:::i;:::-;1284:7;;;;1267:25;;:12;;:25;:16;:25;:::i;:::-;:54;1246:143;;;;;;;;;;;;;;;;;;;;;;1485:14;;1478:72;;;;;1485:14;;;;;;;1478:35;;:72;;1514:10;;1534:4;;1541:8;;1478:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1478:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1478:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1478:72:1;;;;;;;;;-1:-1:-1;1567:14:1;;;;1560:72;;;;;1567:14;;;;;1560:35;;:72;;1596:10;;1616:4;;1623:8;;1560:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1560:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1560:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1560:72:1;;;;;;;;;;1769:24;1807:5;:7;;;1818:1;1807:12;1803:196;;;-1:-1:-1;1879:1:1;1869:7;;;:11;1854:1;1803:196;;;1930:58;1984:3;1972:5;:7;;;1964:23;;1930:25;1947:5;:7;;;1930:8;:16;;:25;;;;:::i;:58::-;1911:77;;1803:196;2063:39;2080:5;:7;;;2089:12;2063:16;:39::i;:::-;2053:7;;;:49;2139:7;;;;2122:39;;2148:12;2122:16;:39::i;:::-;2112:7;;;:49;2270:10;2247:34;;;;:22;;;:34;;;;;;:82;;2303:16;2247:82;:42;:82;:::i;:::-;2233:10;2210:34;;;;:22;;;:34;;;;;:119;2349:7;;;;:33;;2365:16;2349:33;:15;:33;:::i;:::-;2339:5;:7;;:43;;;;845:1544;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1693:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;764:24;:22;:24::i;:::-;753:5;:7;;;:35;749:91;;;816:13;;;;804:9;;;:25;749:91;867:5;:14;;;854:27;;:9;:27;;;:56;;;;;896:5;:14;;;885:25;;:7;:25;;;854:56;850:726;;;926:26;955:139;978:9;1005:7;1030:27;1050:6;1030:19;:27::i;:::-;1075:5;955;:139::i;:::-;926:168;;1125:43;1148:19;1125:22;:43::i;:::-;1108:60;;850:726;;;;1201:5;:14;;;1188:27;;:9;:27;;;:56;;;;;1230:5;:14;;;1219:25;;:7;:25;;;1188:56;1185:391;;;1260:26;1289:139;1312:9;1339:7;1364:27;1384:6;1364:19;:27::i;1289:139::-;1260:168;;1459:42;1481:19;1459:21;:42::i;1185:391::-;1532:33;;;;;;;;;;;1185:391;2041:138;2067:10;2091:9;2114:7;2135:6;2155:14;2041:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1693:4;;;;;:::o;285:352:12:-;333:98;344:42;388;333:10;:98::i;:::-;485:22;493:3;485:20;:22::i;:::-;474:8;:33;568:23;576:4;568:21;:23::i;:::-;557:8;:34;285:352::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;53:282:9:-;139:7;166:6;162:45;;-1:-1:-1;195:1:9;188:8;;162:45;228:5;;;232:1;228;:5;:1;247:5;;;;;:10;243:68;;273:27;;;;;;;;;;;243:68;327:1;-1:-1:-1;53:282:9;;;;;:::o;341:224::-;427:7;454:6;450:64;;476:27;;;;;;;;;;;450:64;523:9;539:1;535;:5;;;;;;;341:224;-1:-1:-1;;;;341:224:9:o;6809:216:8:-;6860:8;6903:1;6891;6884:21;6880:101;;;6921:49;;;;;;;;;;;6880:101;6994:24;7006:1;889:66;6994:4;:24::i;2395:186::-;2451:8;1023:66;2475:1;:18;2471:79;;;2509:30;;;;;;;;;;;2471:79;2563:11;2568:1;2572;2571:2;;2563:4;:11::i;:::-;2559:15;2395:186;-1:-1:-1;;;2395:186:8:o;571:201:9:-;657:7;688:1;684;:5;680:64;;;705:28;;;;;;;;;;;680:64;-1:-1:-1;760:5:9;;;571:201::o;778:223::-;864:7;899:5;;;918;;;914:63;;;939:27;;;;;;;;;;;7175:386:8;7237:8;7280:1;7268;7261:21;7257:116;;;7298:64;;;;;;;;;;;7257:116;7405:1;7393;7386:21;7382:118;;;7423:66;;;;;;;;;;;7382:118;7513:41;7518:24;7530:1;889:66;7518:4;:24::i;:::-;7551:1;7513:4;:41::i;2678:772::-;2734:8;2755:18;2776:47;889:66;2790:32;2795:12;2805:1;2795:9;:12::i;:::-;2809;2819:1;2809:9;:12::i;:::-;2790:4;:32::i;2776:47::-;2755:68;;2911:20;2934:33;2939:13;2950:1;2939:10;:13::i;:::-;2954:12;2964:1;2954:9;:12::i;2934:33::-;2911:56;;2977:20;3000:33;3005:12;3015:1;3005:9;:12::i;:::-;3019:13;3030:1;3019:10;:13::i;3000:33::-;2977:56;;3043:23;3069:49;3074:34;3079:13;3090:1;3079:10;:13::i;:::-;3094;3105:1;3094:10;:13::i;3074:34::-;889:66;3069:4;:49::i;:::-;3043:75;;3136:77;3141:53;3146:32;3151:11;3164:13;3146:4;:32::i;:::-;3180:13;3141:4;:53::i;:::-;3196:16;3136:4;:77::i;:::-;3129:84;2678:772;-1:-1:-1;;;;;;;2678:772:8:o;2207:97::-;2263:8;2287:10;2292:1;2295;2287:4;:10::i;446:148:3:-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;1107:126:12:-;1205:12;1107:126;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;2224:3404:4:-;2588:14;;;;2391:21;;;;;;;;;;2575:27;;;;;;;:56;;;;;2617:5;:14;;;2606:25;;:7;:25;;;2575:56;2571:433;;;-1:-1:-1;;;;2651:7:4;;;;2676;;;;2705:11;;;;2740:4;2571:433;;;2777:5;:14;;;2764:27;;:9;:27;;;:56;;;;;2806:5;:14;;;2795:25;;:7;:25;;;2764:56;2761:243;;;2840:5;:7;;;2836:11;;2865:5;:7;;;2861:11;;2894:35;2917:5;:11;;;2894:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2886:43;;2761:243;3103:9;3115:125;3167:1;3182;3197:5;3216;:14;;;3115:38;:125::i;:::-;3103:137;;3270:12;3285:122;3307:1;3322;3337:2;3353:5;3372:6;3392:5;3285:8;:122::i;:::-;3270:137;;3623:1;3615:5;:9;3611:147;;;3641:29;;;;;;;;;;;3611:147;3691:10;3687:71;;3717:30;;;;;;;;;;;3687:71;3807:13;3823:112;3888:33;3911:5;:9;;;3888:18;:16;:18::i;:33::-;3823:30;:6;3847:5;3823:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3954:7;;;;;-1:-1:-1;3976:11:4;;3972:86;;4003:44;;;;;;;;;;;3972:86;4090:14;4107:47;4135:1;4146:6;4107:20;:47::i;:::-;4090:64;-1:-1:-1;4090:64:4;4168:13;:1;4174:6;4168:13;:5;:13;:::i;:::-;:24;4164:126;;4217:14;:7;4229:1;4217:14;:11;:14;:::i;:::-;4208:23;;4264:1;4255:6;:10;4254:25;;4278:1;4254:25;;;4269:6;4254:25;4245:34;;4164:126;4432:46;4460:1;4471:5;4432:20;:46::i;:::-;4422:56;;;;4503:1;4493:6;:11;4489:78;;4520:36;;;;;;;;;;;4489:78;4618:15;4636:155;4677:5;:7;;;4698:24;:22;:24::i;:::-;4736:5;:10;;;4760:2;4776:5;4636:27;:155::i;:::-;4817:14;;;;4618:173;;-1:-1:-1;4817:25:4;;4836:5;4817:25;:18;:25;:::i;:::-;4806:8;:36;4802:211;;;4869:14;;;;:25;;4888:5;4869:25;:18;:25;:::i;:::-;4858:36;;4802:211;;;4945:5;4914:28;4927:5;:14;;;4914:8;:12;;:28;;;;:::i;:::-;:36;4911:102;;;4987:14;;;;4977:25;;:5;;:25;:9;:25;:::i;:::-;4966:36;;4911:102;5057:24;:22;:24::i;:::-;5047:7;;;:34;5091:285;;;;5128:13;:1;5134:6;5128:13;:5;:13;:::i;:::-;5118:7;;;:23;5165:13;:1;5171:6;5165:13;:5;:13;:::i;:::-;5155:7;;;:23;5192:11;;;:22;;;5091:285;;;5255:13;:1;5261:6;5255:13;:5;:13;:::i;:::-;5245:7;;;:23;5292:13;:1;5298:6;5292:13;:5;:13;:::i;:::-;5282:7;;;:23;5333:32;5356:8;5333:18;:16;:18::i;:32::-;5319:11;;;:46;5091:285;5410:23;5427:5;5410:16;:23::i;:::-;5449:106;5487:10;5515:6;5539;5449:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5583:7:4;;;2224:3404;-1:-1:-1;;;;;;;;;;;2224:3404:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;6551:116:8:-;6611:8;6635:25;6640:16;6645:1;889:66;6640:4;:16::i;1830:76::-;889:66;;1830:76::o;18908:245::-;18964:8;18988:6;;;:16;;-1:-1:-1;18998:6:8;;18988:16;18984:55;;;-1:-1:-1;19027:1:8;19020:8;;18984:55;-1:-1:-1;19052:5:8;;;19056:1;19052;:5;:1;19071:5;;;;;:10;;:24;;;;19094:1;19089;19085;:5;;;;;;:10;;19071:24;19067:80;;;19112:24;;;;;;;;;;;19560:210;19640:5;;;19616:8;19660:5;;:14;;;;;19673:1;19669;:5;19660:14;:23;;;;;19682:1;19678;:5;19660:23;19659:54;;;;19693:1;19689;:5;:14;;;;;19702:1;19698;:5;19689:14;:23;;;;;19711:1;19707;:5;19689:23;19655:109;;;19729:24;;;;;;;;;;;19240:260;19296:8;19320:6;19316:67;;19342:30;;;;;;;;;;;19316:67;1023:66;19396:1;:18;:29;;;;;19418:1;19423:2;19418:7;19396:29;19392:83;;;19440:24;;;;;;;;;;;19392:83;19492:1;19488;:5;;;;;;;19240:260;-1:-1:-1;;;19240:260:8:o;7624:97::-;889:66;7703:11;;;7624:97::o;7727:138::-;7780:8;7811:1;7807;:5;:51;;798:34;7840:1;7839:2;;:18;7837:21;;7807:51;;;-1:-1:-1;798:34:8;7816:17;;7727:138::o;3998:195:10:-;4102:18;4143:43;4164:6;4176:9;4172:2;:13;4143:20;:43::i;4503:624:8:-;4559:8;4579:15;4597:12;4607:1;4597:9;:12::i;:::-;4579:30;-1:-1:-1;4623:13:8;;4619:179;;4659:65;4664:12;4674:1;4664:9;:12::i;:::-;4678:45;4683:36;4688:1;4691:27;889:66;4705:12;4715:1;4705:9;:12::i;:::-;4691:4;:27::i;4683:36::-;4721:1;4678:4;:45::i;4659:65::-;4652:72;;;;;4619:179;4762:25;4767:16;4772:1;889:66;4767:4;:16::i;:::-;4785:1;4762:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;11683:2541:4:-;11878:6;;11986:102;12005:73;12050:27;12063:13;:1;12069:6;12063:13;:5;:13;:::i;:::-;12050:8;:1;12056;12050:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;12005;:2;12025:6;12005:27;:19;:27;:::i;:73::-;11986:1;;:102;:5;:102;:::i;:::-;11974:114;-1:-1:-1;12098:10:4;12111:42;12130:13;:1;12136:6;12130:13;:5;:13;:::i;:::-;12111:1;;:42;:5;:42;:::i;:::-;12098:55;;12206:12;12221:127;12248:1;12263;12278:2;12294:5;12313:6;12333:5;12221:13;:127::i;:::-;12206:142;;12364:33;12391:5;12364:33;;;;;;;;;;;;;;;12408:9;12420:146;12447:1;12462;12477:2;12493:5;12512:6;12532:5;12551;12420:13;:146::i;:::-;12408:158;;12582:28;12607:2;12582:28;;;;;;;;;;;;;;;12621:9;12633:160;12660:1;12675;12690:2;12706:5;12725:6;12745:2;12761:3;12778:5;12633:13;:160::i;:::-;12621:172;;12809:28;12834:2;12809:28;;;;;;;;;;;;;;;12853:42;12877:2;12881;12885:5;:9;;;12853:23;:42::i;:::-;12849:1229;;;12911:9;12945:131;12976:2;12996;13016;13036:3;13057:5;12945:13;:131::i;:::-;13095:28;;12934:142;;-1:-1:-1;12934:142:4;-1:-1:-1;13095:28:4;;;;12934:142;;13095:28;;;;;;;;;;13142;13167:2;13142:28;;;;;;;;;;;;;;;13189:42;13213:2;13217;13221:5;:9;;;13189:23;:42::i;:::-;13185:883;;;13251:9;13297:179;13332:2;13356;13380;13404:3;13429:2;13453:5;13297:13;:179::i;:::-;13500:28;;13278:198;;-1:-1:-1;13278:198:4;;-1:-1:-1;13278:198:4;-1:-1:-1;13278:198:4;-1:-1:-1;13500:28:4;;;;13278:198;;13500:28;;;;;;;;;;13551;13576:2;13551:28;;;;;;;;;;;;;;;13602;13627:2;13602:28;;;;;;;;;;;;;;;13653;13678:2;13653:28;;;;;;;;;;;;;;;13704:42;13728:2;13732;13736:5;:9;;;13704:23;:42::i;:::-;13700:354;;;13775:204;13814:2;13842;13870;13898;13926;13954:3;13775:13;:204::i;:::-;13770:209;;14007:28;14032:2;14007:28;;;;;;;;;;;;;;;13700:354;13185:883;;12849:1229;;14106:17;14120:2;14106:13;:17::i;:::-;14139:32;14160:10;:2;14167;14160:10;:6;:10;:::i;:::-;14139:32;;;;;;;;;;;;;;;14207:10;:2;14214;14207:10;:6;:10;:::i;:::-;14200:17;11683:2541;-1:-1:-1;;;;;;;;;;;;11683:2541:4:o;1187:785:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:28;:17;1742:5;1720:28;:21;:28;:::i;:::-;1762:20;:12;1779:2;1762:20;:16;:20;:::i;:::-;1690:16;:102::i;:::-;1664:128;-1:-1:-1;1802:12:10;1817:35;1664:128;1817:13;:2;1824:5;1817:13;:6;:13;:::i;:35::-;1802:50;;1862:13;1878:64;1910:31;1938:1;1910:20;:31::i;:::-;1878:27;1899:5;1878:16;:5;1888;1878:16;:9;:16;:::i;:64::-;1862:80;1187:785;-1:-1:-1;;;;;;;;;;;;;;1187:785:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4199:207:10:-;4304:19;4354:44;4375:9;4371:2;:13;4355:6;:30;4354:42;:44::i;7956:5160:8:-;8001:8;889:66;8025:1;:14;8021:74;;;8055:29;;;;;;;;;;;8021:74;8113:1;8108;:6;8104:66;;8130:29;;;;;;;;;;;8104:66;889;8183:1;:12;8179:51;;;-1:-1:-1;8218:1:8;8211:8;;8179:51;1368:66;8243:1;:15;8239:64;;-1:-1:-1;1548:75:8;8274:18;;8239:64;8313:8;8331;8349;8662:66;8650:1;:79;8646:316;;8745:79;;;;;8871:66;889;8850:11;;:88;8846:92;;8646:316;9006:66;8994:1;:79;8990:316;;9089:79;;;;;9215:66;889;9194:11;;:88;9190:92;;8990:316;9349:66;9337:1;:79;9333:314;;9432:79;;;;;9557:66;889;9536:11;;:88;9532:92;;9333:314;9690:66;9678:1;:79;9674:314;;9773:79;;;;;9898:66;889;9877:11;;:88;9873:92;;9674:314;10031:66;10019:1;:79;10015:314;;10114:79;;;;;10239:66;889;10218:11;;:88;10214:92;;10015:314;10372:66;10360:1;:79;10356:314;;10455:79;;;;;10580:66;10467;10559:11;;:88;10555:92;;10356:314;10715:66;10703:1;:79;10699:318;;10798:79;;;;;10925:66;889;10904:11;;:88;10900:92;;10699:318;11063:66;11051:1;:79;11047:320;;11146:79;;;;;11274:66;889;11253:11;;:88;11249:92;;11047:320;11414:66;11402:1;:79;11398:322;;11497:79;;;;;11626:66;889;11605:11;;:88;11601:92;;11398:322;11885:11;;;;-1:-1:-1;11885:11:8;;-1:-1:-1;889:66:8;11910:5;;;:15;;-1:-1:-1;11988:35:8;11945:39;;;11940:45;;:83;11935:88;;;;889:66;12033:1;12029;:5;:15;;;;;;12025:19;;12136:35;12131:1;12093:35;:39;12088:1;:45;:83;;;;;;12083:88;;;;889:66;12181:1;12177;:5;:15;;;;;;12173:19;;12284:35;12279:1;12241:35;:39;12236:1;:45;:83;;;;;;12231:88;;;;889:66;12329:1;12325;:5;:15;;;;;;12321:19;;12432:35;12427:1;12389:35;:39;12384:1;:45;:83;;;;;;12379:88;;;;889:66;12477:1;12473;:5;:15;;;;;;12469:19;;12580:35;12575:1;12537:35;:39;12532:1;:45;:83;;;;;;12527:88;;;;889:66;12625:1;12621;:5;:15;;;;;;12617:19;;12728:35;12723:1;12685:35;:39;12680:1;:45;:83;;;;;;12675:88;;;;889:66;12773:1;12769;:5;:15;;;;;;12765:19;;12876:35;12871:1;12833:35;:39;12828:1;:45;:83;;;;;;12823:88;;;;889:66;12921:1;12917;:5;:15;;;;;;12913:19;;13024:35;13019:1;12981:35;:39;12976:1;:45;:83;;;;;;12971:88;;;;7956:5160;;;;;;:::o;13213:5613::-;13259:8;1548:75;13283:15;;13279:105;;;-1:-1:-1;13372:1:8;13365:8;;13279:105;13397:6;13393:51;;-1:-1:-1;889:66:8;13419:14;;13393:51;1488:1;13457;:15;13453:77;;;13489:30;;;;;;;;;;;13453:77;889:66;13999;13995:70;;14079:5;;;:15;;;14105:18;14101:22;;14096:27;;;;;13995:70;;14163:5;;;:15;14159:19;;14185:1;14189:18;14185:22;14180:27;;;;889:66;14251:1;14247;:5;:15;;;;;;14243:19;;14269:1;14273:18;14269:22;14264:27;;;;889:66;14335:1;14331;:5;:15;;;;;;14327:19;;14353:1;14357:18;14353:22;14348:27;;;;889:66;14419:1;14415;:5;:15;;;;;;14411:19;;14437:1;14441:18;14437:22;14432:27;;;;889:66;14503:1;14499;:5;:15;;;;;;14495:19;;14521:1;14525:18;14521:22;14516:27;;;;889:66;14587:1;14583;:5;:15;;;;;;14579:19;;14605:1;14609:18;14605:22;14600:27;;;;889:66;14671:1;14667;:5;:15;;;;;;14663:19;;14689:1;14693:18;14689:22;14684:27;;;;889:66;14755:1;14751;:5;:15;;;;;;14747:19;;14773:1;14777:18;14773:22;14768:27;;;;889:66;14839:1;14835;:5;:15;;;;;;14831:19;;14857:1;14861:18;14857:22;14852:27;;;;889:66;14923:1;14919;:5;:15;;;;;;14915:19;;14941:1;14945:18;14941:22;14936:27;;;;889:66;15007:1;15003;:5;:15;;;;;;14999:19;;15025:1;15029:18;15025:22;15020:27;;;;889:66;15091:1;15087;:5;:15;;;;;;15083:19;;15109:1;15113:18;15109:22;15104:27;;;;889:66;15175:1;15171;:5;:15;;;;;;15167:19;;15193:1;15197:18;15193:22;15188:27;;;;889:66;15259:1;15255;:5;:15;;;;;;15251:19;;15277:1;15281:18;15277:22;15272:27;;;;889:66;15343:1;15339;:5;:15;;;;;;15335:19;;15361:1;15365:18;15361:22;15356:27;;;;889:66;15427:1;15423;:5;:15;;;;;;15419:19;;15445:1;15449:18;15445:22;15440:27;;;;889:66;15511:1;15507;:5;:15;;;;;;15503:19;;15529:1;15533:18;15529:22;15524:27;;;;889:66;15595:1;15591;:5;:15;;;;;15825:2;;;;;;15679:18;15591:15;;;15608:27;;;15675:22;:26;;889:66;15675:36;;15591:15;-1:-1:-1;15872:66:8;15861:78;;15860:85;15856:304;;16069:66;15976;15965:78;;:171;15961:175;;15856:304;16204:66;16193:78;;16192:85;16188:304;;16401:66;16308;16297:78;;:171;16293:175;;16188:304;16535:66;16524:78;;16523:85;16519:303;;16732:66;16639;16628:78;;:171;16624:175;;16519:303;16865:66;16854:78;;16853:85;16849:303;;17062:66;16969;16958:78;;:171;16954:175;;16849:303;17195:66;17184:78;;17183:85;17179:303;;17392:66;17299;17288:78;;:171;17284:175;;17179:303;17525:66;17514:78;;17513:85;17509:303;;17722:66;17629;17618:78;;:171;17614:175;;17509:303;17857:66;17846:78;;17845:85;17841:305;;18054:66;17961;17950:78;;:171;17946:175;;17841:305;18192:66;18181:78;;18180:85;18176:306;;18389:66;18296;18285:78;;:171;18281:175;;18176:306;18529:66;18518:78;;18517:85;18513:307;;18726:66;18633;18622:78;;:171;18618:175;;18513:307;13213:5613;;;;;:::o;5907:942:4:-;6107:6;6129:10;6142:31;6170:1;6142:20;:31::i;:::-;6129:44;;6183:10;6196:65;6239:21;6258:1;6239:5;:14;;;:18;;:21;;;;:::i;:::-;6196:38;6231:2;6196:30;6224:1;6196:23;6204:5;:14;;;6196:3;:7;;:23;;;;:::i;:65::-;6183:78;;6272:12;6287:132;6317:92;6407:1;6317:72;6387:1;6317:52;6366:2;6317:31;6345:1;6317:20;:31::i;:92::-;6287:12;:3;:10;:12::i;:132::-;6272:147;;6429:12;6446:82;6524:3;6446:60;:42;6482:5;6446:18;:16;:18::i;:42::-;:58;:60::i;:82::-;6444:85;;6429:100;;6541:12;6566:1;6557:5;:10;;6556:121;;6609:68;6649:14;6651:5;6650:6;;6649:12;:14::i;6609:68::-;6556:121;;;6583:11;:5;:9;:11::i;:::-;6541:136;-1:-1:-1;6688:12:4;6703:60;6751:11;:3;6759:2;6751:11;:7;:11;:::i;:::-;6703:30;6704:4;;;;6727:5;6703:30;:23;:30;:::i;:60::-;6688:75;;6774:12;6789:31;6806:6;6814:5;6789:16;:31::i;6855:544::-;7077:6;;7114:27;7120:20;7126:13;:5;7136:2;7126:13;:9;:13;:::i;:::-;7120:1;;:20;:5;:20;:::i;:::-;7114:1;;:27;:5;:27;:::i;:::-;7099:42;-1:-1:-1;7151:12:4;7166:19;7172:12;:1;7178:5;7172:12;:5;:12;:::i;7166:19::-;7151:34;-1:-1:-1;7198:12:4;7213:21;:16;:5;7151:34;7213:16;:9;:16;:::i;:21::-;7198:36;;7247:12;7262:49;7305:5;7262:38;7285:5;:14;;;7262:18;:16;:18::i;:49::-;7247:64;;7321:12;7336:34;7363:6;7336:22;7352:5;7336:11;:5;:9;:11::i;:34::-;7321:49;6855:544;-1:-1:-1;;;;;;;;;;;;;6855:544:4:o;7469:688::-;7708:6;;7745:11;:3;7753:2;7745:11;:7;:11;:::i;:::-;7730:26;;7766:12;7781:115;7813:73;7882:3;7813:51;7849:5;:14;;;7813:18;:16;:18::i;:73::-;7781:14;;;;;:115;:18;:115;:::i;:::-;7766:130;;7906:12;7921:118;7957:72;8026:2;7957:51;7993:5;:14;;;7957:18;:16;:18::i;:72::-;7921:18;:16;:18::i;:118::-;7906:133;-1:-1:-1;8049:12:4;8064:16;:5;7906:133;8064:16;:9;:16;:::i;:::-;8049:31;;8105:5;8097;:13;:53;;8145:5;8097:53;;;-1:-1:-1;8125:5:4;;8090:60;-1:-1:-1;;;;;;;;;;;7469:688:4:o;11103:442::-;11234:27;;11290:10;:2;11297;11290:10;:6;:10;:::i;:::-;11277:23;;11310:10;11323:43;11351:1;11362:2;11323:20;:43::i;:::-;11310:56;;11376:10;11389:96;11410:65;11435:26;11458:2;11435:18;:16;:18::i;:26::-;11410:3;;:65;:7;:65;:::i;:::-;11389:3;;:96;:7;:96;:::i;:::-;11376:109;;11501:10;11503:3;11507;11501:10;;;;;;;;;;;;;;;;11529:9;;;;11103:442;-1:-1:-1;;;;;11103:442:4:o;8457:755::-;8634:12;8648:9;8678:27;8686:2;8690:5;:14;;;8678:7;:27::i;:::-;8673:32;;8716:12;8731:152;8788:81;8865:3;8788:55;8828:5;:14;;;8788:18;:16;:18::i;:81::-;8731:14;;;;:22;;8750:2;8731:22;:18;:22;:::i;:152::-;8716:167;;8893:12;8908:156;8945:105;9047:2;8945:80;9022:2;8945:55;8985:5;:14;;;8945:18;:16;:18::i;:105::-;8908:2;;:156;:19;:156;:::i;:::-;8893:171;-1:-1:-1;9074:9:4;9086:24;8893:171;9086:13;:2;9093:5;9086:13;:6;:13;:::i;:24::-;9074:36;;9137:2;9129:5;:10;:47;;9174:2;9129:47;;;9154:5;9129:47;9121:55;-1:-1:-1;;;;8457:755:4;;;;;;;;:::o;9583:821::-;9792:12;9818;9844;9870;9931;9946:17;9956:2;9960;9946:9;:17::i;:::-;9931:32;;9973:11;9988:30;9996:5;10003;:14;;;9988:7;:30::i;:::-;9973:45;-1:-1:-1;10040:12:4;10055:22;10063:13;:2;10070:5;10063:13;:6;:13;:::i;:::-;10055:3;;:22;:7;:22;:::i;:::-;10040:37;;10099:5;10091:4;:13;10087:311;;10145:5;10168:2;10188:4;10210:27;10218:2;10222:5;:14;;;10210:7;:27::i;:::-;10120:131;;;;;;;;;;;;;10087:311;-1:-1:-1;10307:2:4;;-1:-1:-1;10327:5:4;;-1:-1:-1;10350:2:4;;-1:-1:-1;10370:4:4;-1:-1:-1;9583:821:4;;;;;;;;;;;;:::o;10410:490::-;10588:6;;10625:77;10682:19;10690:10;:2;10697;10690:10;:6;:10;:::i;:::-;10682:3;;:19;:7;:19;:::i;:::-;10625:39;10653:10;:2;10660;10653:10;:6;:10;:::i;:::-;10625;:2;10632;10625:10;:6;:10;:::i;:77::-;10610:92;-1:-1:-1;10712:12:4;10727:60;10768:18;10775:10;:2;10782;10775:10;:6;:10;:::i;:::-;10768:2;;:18;:6;:18;:::i;:::-;10727:23;:2;10747;10727:23;:19;:23;:::i;:60::-;10712:75;-1:-1:-1;10797:12:4;10812:16;:5;10712:75;10812:16;:9;:16;:::i;:::-;10797:31;;10854:2;10846:5;:10;:47;;10891:2;10846:47;;;10871:5;10839:54;-1:-1:-1;;;;;;;;;10410:490:4:o;10906:191::-;10994:45;11022:2;11034:3;10994:20;:45::i;:::-;10989:2;:50;10985:106;;;11055:25;;;;;;;;;;;6385:97:8;6435:8;6459:16;6464:1;889:66;6459:4;:16::i;2024:92::-;2073:8;2100:9;2104:1;2107;2100:3;:9::i;1912:106::-;1968:8;2001:1;1996;:6;;1995:16;;2010:1;1995:16;;;-1:-1:-1;2006:1:8;;1912:106;-1:-1:-1;1912:106:8:o;8163:288:4:-;8261:6;8283:12;8298:73;8334:27;8357:3;8334:18;:16;:18::i;8298:73::-;8283:88;;8381:12;8396:9;:4;:7;:9::i;:::-;8381:24;-1:-1:-1;8422:22:4;:16;:5;8381:24;8422:16;:9;:16;:::i;:22::-;8415:29;8163:288;-1:-1:-1;;;;;8163:288:4:o;9317:259::-;9392:6;9421:148;9536:32;9564:2;9536:20;:32::i;:::-;9421:97;9478:39;9485:31;9513:1;9485:20;:31::i;:::-;9478:2;;:39;:6;:39;:::i;:::-;9421;9428:31;9456:1;9428:20;:31::i;:::-;9421:2;;:39;:6;:39;:::i;154:1081:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;38247:42;38236:54;;38819:35;;38809:2;;38868:1;;38858:12;414:241;;518:2;506:9;497:7;493:23;489:32;486:2;;;-1:-1;;524:12;486:2;586:53;631:7;607:22;586:53;;662:366;;;783:2;771:9;762:7;758:23;754:32;751:2;;;-1:-1;;789:12;751:2;851:53;896:7;872:22;851:53;;;841:63;;959:53;1004:7;941:2;984:9;980:22;959:53;;;949:63;;745:283;;;;;;1035:491;;;;1173:2;1161:9;1152:7;1148:23;1144:32;1141:2;;;-1:-1;;1179:12;1141:2;85:6;72:20;97:33;124:5;97:33;;;1231:63;-1:-1;1331:2;1370:22;;72:20;97:33;72:20;97:33;;;1135:391;;1339:63;;-1:-1;;;1439:2;1478:22;;;;344:20;;1135:391;1533:257;;1645:2;1633:9;1624:7;1620:23;1616:32;1613:2;;;-1:-1;;1651:12;1613:2;223:6;217:13;38965:5;38070:13;38063:21;38943:5;38940:32;38930:2;;-1:-1;;38976:12;1797:241;;1901:2;1889:9;1880:7;1876:23;1872:32;1869:2;;;-1:-1;;1907:12;1869:2;-1:-1;344:20;;1863:175;-1:-1;1863:175;2045:366;;;2166:2;2154:9;2145:7;2141:23;2137:32;2134:2;;;-1:-1;;2172:12;2134:2;-1:-1;;344:20;;;2324:2;2363:22;;;344:20;;-1:-1;2128:283;2567:113;38247:42;38236:54;2638:37;;2632:48;16968:213;38247:42;38236:54;;;;2638:37;;17086:2;17071:18;;17057:124;17188:340;38247:42;38236:54;;;2497:58;;38236:54;;17514:2;17499:18;;2638:37;17342:2;17327:18;;17313:215;17535:675;38247:42;38236:54;;;2497:58;;38236:54;;;17946:2;17931:18;;2638:37;38236:54;;;;18029:2;18014:18;;2638:37;18112:2;18097:18;;2867:36;;;;18195:3;18180:19;;2867:36;;;;17773:3;17758:19;;17744:466;18217:451;38247:42;38236:54;;;2497:58;;38236:54;;;;18571:2;18556:18;;2638:37;18654:2;18639:18;;2867:36;;;;18399:2;18384:18;;18370:298;18675:443;38247:42;38236:54;;;;2497:58;;19023:2;19008:18;;2867:36;;;;19104:2;19089:18;;2867:36;18853:2;18838:18;;18824:294;19125:340;38247:42;38236:54;;;;2497:58;;19451:2;19436:18;;2867:36;19279:2;19264:18;;19250:215;19472:1631;38070:13;;38063:21;2752:34;;38247:42;38236:54;;20095:2;20080:18;;2638:37;19936:3;19921:19;;20110:72;20178:2;20163:18;;20154:6;20110:72;;;20259:2;20244:18;;2867:36;;;;20340:3;20325:19;;2867:36;;;;20424:3;20409:19;;2867:36;;;;20506:3;20491:19;;2867:36;;;;20590:3;20575:19;;2867:36;;;;20672:3;20657:19;;2867:36;;;;20754:3;20739:19;;2867:36;20837:3;20822:19;;2867:36;20922:3;20907:19;;2867:36;21005:3;20990:19;;2867:36;21088:3;21073:19;;;2867:36;19907:1196;;-1:-1;;;19907:1196;21110:316;2867:36;;;21412:2;21397:18;;2867:36;21252:2;21237:18;;21223:203;21433:407;21624:2;21638:47;;;3140:2;21609:18;;;37838:19;3176:66;37878:14;;;3156:87;3262:12;;;21595:245;21847:407;22038:2;22052:47;;;3513:2;22023:18;;;37838:19;3549:66;37878:14;;;3529:87;3650:66;3636:12;;;3629:88;3736:12;;;22009:245;22261:407;22452:2;22466:47;;;3987:2;22437:18;;;37838:19;4023:66;37878:14;;;4003:87;4109:12;;;22423:245;22675:514;22892:2;22906:47;;;4360:2;22877:18;;;37838:19;4396:66;37878:14;;;4376:87;37887:4;23160:18;;2867:36;;;;4482:12;;;22863:326;23196:407;23387:2;23401:47;;;4733:2;23372:18;;;37838:19;4769:66;37878:14;;;4749:87;4855:12;;;23358:245;23610:407;23801:2;23815:47;;;5106:2;23786:18;;;37838:19;5142:66;37878:14;;;5122:87;5228:12;;;23772:245;24024:407;24215:2;24229:47;;;5479:2;24200:18;;;37838:19;5515:66;37878:14;;;5495:87;5601:12;;;24186:245;24438:407;24629:2;24643:47;;;5852:2;24614:18;;;37838:19;5888:66;37878:14;;;5868:87;5974:12;;;24600:245;24852:407;25043:2;25057:47;;;6225:2;25028:18;;;37838:19;6261:66;37878:14;;;6241:87;6347:12;;;25014:245;25266:514;25483:2;25497:47;;;6598:2;25468:18;;;37838:19;6634:66;37878:14;;;6614:87;37887:4;25751:18;;2867:36;;;;6720:12;;;25454:326;25787:407;25978:2;25992:47;;;6971:2;25963:18;;;37838:19;7007:66;37878:14;;;6987:87;7108:66;7094:12;;;7087:88;7194:12;;;25949:245;26201:407;26392:2;26406:47;;;7445:2;26377:18;;;37838:19;7481:66;37878:14;;;7461:87;7567:12;;;26363:245;26615:407;26806:2;26820:47;;;7818:2;26791:18;;;37838:19;7854:66;37878:14;;;7834:87;7940:12;;;26777:245;27029:407;27220:2;27234:47;;;8191:2;27205:18;;;37838:19;8227:66;37878:14;;;8207:87;8328:66;8314:12;;;8307:88;8414:12;;;27191:245;27443:407;27634:2;27648:47;;;8665:2;27619:18;;;37838:19;8701:66;37878:14;;;8681:87;8787:12;;;27605:245;27857:407;28048:2;28062:47;;;9038:2;28033:18;;;37838:19;9074:66;37878:14;;;9054:87;9160:12;;;28019:245;28271:514;28488:2;28502:47;;;9411:2;28473:18;;;37838:19;9447:66;37878:14;;;9427:87;37887:4;28756:18;;2867:36;;;;9533:12;;;28459:326;28792:514;29009:2;29023:47;;;9784:2;28994:18;;;37838:19;9820:66;37878:14;;;9800:87;37887:4;29277:18;;2867:36;;;;9906:12;;;28980:326;29313:514;29530:2;29544:47;;;10157:2;29515:18;;;37838:19;10193:66;37878:14;;;10173:87;37887:4;29798:18;;2867:36;;;;10279:12;;;29501:326;29834:514;30051:2;30065:47;;;10530:2;30036:18;;;37838:19;10566:66;37878:14;;;10546:87;37887:4;30319:18;;2867:36;;;;10652:12;;;30022:326;30355:407;30546:2;30560:47;;;10903:2;30531:18;;;37838:19;10939:66;37878:14;;;10919:87;11040:66;11026:12;;;11019:88;11126:12;;;30517:245;30769:407;30960:2;30974:47;;;11377:2;30945:18;;;37838:19;11413:66;37878:14;;;11393:87;11499:12;;;30931:245;31183:514;31400:2;31414:47;;;11750:2;31385:18;;;37838:19;11786:66;37878:14;;;11766:87;37887:4;31668:18;;2867:36;;;;11872:12;;;31371:326;31704:407;31895:2;31909:47;;;12123:2;31880:18;;;37838:19;12159:66;37878:14;;;12139:87;12245:12;;;31866:245;32118:514;32335:2;32349:47;;;12496:2;32320:18;;;37838:19;12532:66;37878:14;;;12512:87;37887:4;32603:18;;2867:36;;;;12618:12;;;32306:326;32639:407;32830:2;32844:47;;;12869:2;32815:18;;;37838:19;12905:66;37878:14;;;12885:87;12991:12;;;32801:245;33053:407;33244:2;33258:47;;;13242:2;33229:18;;;37838:19;13278:66;37878:14;;;13258:87;13364:12;;;33215:245;33467:407;33658:2;33672:47;;;13615:2;33643:18;;;37838:19;13651:66;37878:14;;;13631:87;13752:66;13738:12;;;13731:88;13838:12;;;33629:245;33881:514;34098:2;34112:47;;;14089:2;34083:18;;;37838:19;14125:66;37878:14;;;14105:87;37887:4;34366:18;;2867:36;;;;14211:12;;;34069:326;34402:514;34619:2;34633:47;;;14462:2;34604:18;;;37838:19;14498:66;37878:14;;;14478:87;37887:4;34887:18;;2867:36;;;;14584:12;;;34590:326;34923:407;35114:2;35128:47;;;14835:2;35099:18;;;37838:19;14871:66;37878:14;;;14851:87;14957:12;;;35085:245;35337:407;35528:2;35542:47;;;15208:2;35513:18;;;37838:19;15244:66;37878:14;;;15224:87;15330:12;;;35499:245;35751:407;35942:2;35956:47;;;15581:2;35927:18;;;37838:19;15617:66;37878:14;;;15597:87;15703:12;;;35913:245;36165:407;36356:2;36370:47;;;15954:2;36341:18;;;37838:19;15990:66;37878:14;;;15970:87;16076:12;;;36327:245;36579:407;36770:2;36784:47;;;16327:2;36755:18;;;37838:19;16363:66;37878:14;;;16343:87;16449:12;;;36741:245;36993:514;37210:2;37224:47;;;16700:2;37195:18;;;37838:19;16736:66;37878:14;;;16716:87;37887:4;37478:18;;2867:36;;;;16822:12;;;37181:326;37514:213;2867:36;;;37632:2;37617:18;;37603:124;38760:117;38247:42;38847:5;38236:54;38822:5;38819:35;38809:2;;38868:1;;38858:12"
			}
		}
	},
	"sources": {
		"test/TestScam.sol": {
			"id": 12
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"Scam.sol": {
			"id": 0
		},
		"core/State.sol": {
			"id": 3
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"core/Liquidity.sol": {
			"id": 1
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"interfaces/IERC20.sol": {
			"id": 5
		},
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibToken.sol": {
			"id": 11
		}
	},
	"sourceCodes": {
		"test/TestScam.sol": "pragma solidity 0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../Scam.sol\";\nimport \"../libs/LibFixedMath.sol\";\n\n\ncontract TestScam is\n    Scam\n{\n\n    using LibFixedMath for uint256;\n    using LibFixedMath for int256;\n\n    //uint256 block;\n\n    function init()\n        external\n    {\n         _initState(0x0000000000000000000000000000000000000001, 0x0000000000000000000000000000000000000002);\n\n        // set initial blaances\n        gState.x = uint256(500).toFixed();           // initial balance of Token X\n        gState.y = uint256(1000).toFixed();          // initial balance of Token Y\n    }\n\n     function runBasicTest()\n        external\n    {\n        //block = 570;\n        swap(\n            gState.xAddress,\n            gState.yAddress,\n            75 * 10**18\n        );\n\n/*\n        block = 1570;\n        swap(\n            gState.xAddress,\n            gState.yAddress,\n            400 * 10**18\n        );\n\n        block = 4000;\n        swap(\n            gState.yAddress,\n            gState.xAddress,\n            220 * 10**6\n        );\n        */\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number; // block\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        int256 feeHigh;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"Scam.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./core/State.sol\";\nimport \"./core/Liquidity.sol\";\nimport \"./core/Swapper.sol\";\n\n\ncontract Scam is\n    State,\n    Liquidity,\n    Swapper\n{\n\n    constructor()\n        public\n    {}\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n\n    function getRanges() internal pure returns (int256,int256,int256,int256) {\n        return (LN_MIN_VAL, LN_MAX_VAL, EXP_MIN_VAL, EXP_MAX_VAL);\n    }\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    function pow(int256 base, int256 power) internal pure returns (int256) {\n        // KEY INSIGHT --> e^(0.5*ln(7)) - 1/e^(0.5*ln(1/7))\n        // So I think x^a = e^(a*ln(x)) = 1/e^(a*ln(1/x))\n\n        // 1 Sanity check on `ln`\n        int256 ePower;\n        bool invert;\n        if (base <= 0) {\n            revert('Invalid ln() value');\n        } else if (base < FIXED_1) {\n            ePower = mul(power, ln(base));\n        } else {\n            // Make smaller\n            ePower = mul(power, ln(div(FIXED_1, base)));\n            invert = true;\n        }\n\n        // 2 Sanity check on ePower\\\n        if (ePower > 0) {\n            invert = invert ? false : true;\n            ePower = abs(ePower);\n        }\n\n        // Comput e^ePower\n        // Key Insight --> e^x = 1/e^(-x)\n        /*\n        int256 exp;\n        if (ePower < FIXED_1) {\n            return exp(ePower);\n        } else {\n            return div(FIXED_1, )\n        }\n        */\n        return exp(ePower);\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../core/State.sol\";\n\n\n/// FIXME(jalextowle): Add in the bias factor and ponzi scheme\ncontract Liquidity is\n    State,\n    IStructs\n{\n    using LibSafeMath for uint256;\n    function balanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        IStructs.State storage state = gState;\n        return state.liquidityBalance[account];\n    }\n\n    /// @dev Allows a sender to deposit tokens into the contract to provide liquidity.\n    /// @param x_amount The amount of x that should be taken from the sender's balance.\n    /// @param y_amount The amount of x that should be taken from the sender's balance.\n    function addLiquidity(uint256 x_amount, uint256 y_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n        int256 xAmountFixed = LibFixedMath.toFixed(x_amount, 10**18);\n        int256 yAmountFixed = LibFixedMath.toFixed(y_amount, 10**6);\n\n        // Ensure that the amount of x and y that are being deposited are proportional.\n       require(\n            xAmountFixed.mul(state.y) == yAmountFixed.mul(state.x),\n            \"Liquidty:Amount deposited not proportional\"\n        );\n\n        // Charge the sender the amount of x and y tokens that were specified\n        IERC20(state.xAddress).transferFrom(msg.sender, address(this), x_amount);\n        IERC20(state.yAddress).transferFrom(msg.sender, address(this), y_amount);\n\n        // Grant the sender some liquidity tokens.\n        // FIXME(jalextowle): (Look into whether more precision is needed)\n        uint256 liquidity_reward;\n        if (state.x == 0) {\n            liquidity_reward = 0;\n            state.l = 1;\n        } else {\n            liquidity_reward = x_amount.safeMul(state.l).safeDiv(uint256(state.x) >> 127);\n        }\n\n        // Increase the balances of x and y\n        state.x = LibFixedMath.add(state.x, xAmountFixed);\n        state.y = LibFixedMath.add(state.y, yAmountFixed);\n\n        // Grant the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeAdd(\n            liquidity_reward\n        );\n        state.l = state.l.safeAdd(liquidity_reward);\n    }\n\n    /// @dev Allows a sender to withdraw tokens by burning liquidity tokens.\n    /// @param l_amount The amount of liquidity tokens to burn.\n    function removeLiquidity(uint256 l_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n\n        // Calculate the amounts of tokens that should be sent to the sender.\n        uint256 x_amount = l_amount.safeMul(uint256(state.x) >> 127).safeDiv(state.l);\n        uint256 y_amount = l_amount.safeMul(uint256(state.y) >> 127).safeDiv(state.l);\n\n        // Decrease the balances of x and y\n        state.x = LibFixedMath.sub(state.x, LibFixedMath.toFixed(x_amount));\n        state.y = LibFixedMath.sub(state.y, LibFixedMath.toFixed(y_amount));\n\n        // Destroy the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeSub(\n            l_amount\n        );\n        state.l = state.l.safeAdd(l_amount);\n\n        // Reward sender in the correct amounts of x and y.\n        IERC20(state.xAddress).transfer(msg.sender, x_amount);\n        IERC20(state.yAddress).transfer(msg.sender, y_amount);\n    }\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n",
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n        if (state.t == _getCurrentBlockNumber()) {\n            state.fee = state.feeHigh;\n        }\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        if (price < 0)  {\n            revert('price cannot be < 0');\n        } else if (price == 0) {\n            revert('price cannot be zero');\n        }\n\n        // Compute about of `tokenB`\n\n\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = -deltaB;\n\n        if (deltaB >= 0) {\n            revert('deltaB is greater or equal to zero');\n        }\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000));\n        if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n            deltaB = (deltaB < 0) ? deltaB : 0;\n        }\n\n        // Round up to favor the contract\n        // We impose a dust amount of 1/10^6. This is the minimum token amount.\n        deltaB += LibFixedMath.toFixed(int256(1), int256(10**6));\n\n        if (deltaB >= 0) {\n            revert('Tried to purchase too much');\n        }\n\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA.mul(state.eToKappa) < pBarA) {\n            newPBarA = pBarA.div(state.eToKappa);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _rhoPow(\n        int256 base,\n        int256 rho\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = LibFixedMath.one().div(\n            LibFixedMath.one().sub(rho)\n        );\n        int256 term2 = base.ln();\n        return term1.mul(term2).exp();\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = _rhoPow(rl, state.rhoRatio);\n\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis =  _rhoPow(term1, state.rhoRatio);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                _rhoPow(rh, state.rhoRatio)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n    {\n        if (rl < LibFixedMath.toFixed(int256(95), int256(100))) {\n            revert('Order too large');\n        }\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    event VALUE(\n        string description,\n        int256 val\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        emit VALUE(\"delta after step0\", delta);\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        emit VALUE(\"rl after step 1\", rl);\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n        emit VALUE(\"rh after step 2\", rh);\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n            emit VALUE(\"rh after step 3\", rh);\n            emit VALUE(\"yl after step 3\", yl);\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                emit VALUE(\"rl after step 4\", rl);\n                emit VALUE(\"rh after step 4\", rh);\n                emit VALUE(\"yl after step 4\", yl);\n                emit VALUE(\"yh after step 4\", yh);\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n\n                    emit VALUE(\"rl after step 5\", rl);\n                }\n            }\n        }\n\n        // Step 6\n        _computeStep6(rl);\n\n        emit VALUE(\"final price\", rl.mul(pA));\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}"
	},
	"sourceTreeHashHex": "0xf554ca2e2bed35261f5d16e727de4e69534ad827c672e5ba497c348d8e8f7176",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.9+commit.e560f70d.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}