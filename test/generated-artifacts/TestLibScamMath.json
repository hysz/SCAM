{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibScamMath",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "y",
						"type": "uint256"
					}
				],
				"name": "fastExpontentiationFn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610119806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bdd010a214602d575b600080fd5b604d60048036036040811015604157600080fd5b5080359060200135605f565b60408051918252519081900360200190f35b6000606f838363ffffffff607816565b90505b92915050565b6000816085575060016072565b816001141560935750816072565b6002820660ae5760a88380026002845b046078565b90506072565b60dc83800260027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850160a3565b83029050607256fea265627a7a72315820904092225288ab448d1fe0b6ea75a6aefdc1536639ac1460424fa224cd6d537a64736f6c634300050d0032",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBDD010A2 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x6F DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH1 0x78 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x85 JUMPI POP PUSH1 0x1 PUSH1 0x72 JUMP JUMPDEST DUP2 PUSH1 0x1 EQ ISZERO PUSH1 0x93 JUMPI POP DUP2 PUSH1 0x72 JUMP JUMPDEST PUSH1 0x2 DUP3 MOD PUSH1 0xAE JUMPI PUSH1 0xA8 DUP4 DUP1 MUL PUSH1 0x2 DUP5 JUMPDEST DIV PUSH1 0x78 JUMP JUMPDEST SWAP1 POP PUSH1 0x72 JUMP JUMPDEST PUSH1 0xDC DUP4 DUP1 MUL PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD PUSH1 0xA3 JUMP JUMPDEST DUP4 MUL SWAP1 POP PUSH1 0x72 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 BLOCKHASH SWAP3 0x22 MSTORE DUP9 0xAB DIFFICULTY DUP14 0x1F 0xE0 0xB6 0xEA PUSH22 0xA6AEFDC1536639AC1460424FA224CD6D537A64736F6C PUSH4 0x4300050D STOP ORIGIN ",
				"sourceMap": "61:252:11:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;61:252:11;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063bdd010a214602d575b600080fd5b604d60048036036040811015604157600080fd5b5080359060200135605f565b60408051918252519081900360200190f35b6000606f838363ffffffff607816565b90505b92915050565b6000816085575060016072565b816001141560935750816072565b6002820660ae5760a88380026002845b046078565b90506072565b60dc83800260027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850160a3565b83029050607256fea265627a7a72315820904092225288ab448d1fe0b6ea75a6aefdc1536639ac1460424fa224cd6d537a64736f6c634300050d0032",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBDD010A2 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x6F DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH1 0x78 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x85 JUMPI POP PUSH1 0x1 PUSH1 0x72 JUMP JUMPDEST DUP2 PUSH1 0x1 EQ ISZERO PUSH1 0x93 JUMPI POP DUP2 PUSH1 0x72 JUMP JUMPDEST PUSH1 0x2 DUP3 MOD PUSH1 0xAE JUMPI PUSH1 0xA8 DUP4 DUP1 MUL PUSH1 0x2 DUP5 JUMPDEST DIV PUSH1 0x78 JUMP JUMPDEST SWAP1 POP PUSH1 0x72 JUMP JUMPDEST PUSH1 0xDC DUP4 DUP1 MUL PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD PUSH1 0xA3 JUMP JUMPDEST DUP4 MUL SWAP1 POP PUSH1 0x72 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 BLOCKHASH SWAP3 0x22 MSTORE DUP9 0xAB DIFFICULTY DUP14 0x1F 0xE0 0xB6 0xEA PUSH22 0xA6AEFDC1536639AC1460424FA224CD6D537A64736F6C PUSH4 0x4300050D STOP ORIGIN ",
				"sourceMap": "61:252:11:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;61:252:11;;;;;;;;;;;;;;;;;;;129:182;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;129:182:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;251:7;281:23;:1;302;281:23;:20;:23;:::i;:::-;274:30;;129:182;;;;;:::o;87:389:10:-;184:7;212:6;208:262;;-1:-1:-1;241:1:10;234:8;;208:262;263:1;268;263:6;259:211;;;-1:-1:-1;292:1:10;285:8;;259:211;318:1;314;:5;310:160;;347:32;366:5;;;377:1;373;:5;;347:18;:32::i;:::-;340:39;;;;310:160;421:38;440:5;;;457:1;448:5;;;447:11;;421:38;417:1;:42;410:49;;;"
			}
		}
	},
	"sources": {
		"test/TestLibScamMath.sol": {
			"id": 11
		},
		"libs/LibScamMath.sol": {
			"id": 10
		}
	},
	"sourceCodes": {
		"test/TestLibScamMath.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\ncontract TestLibScamMath {\n\n    using LibScamMath for uint256;\n\n    function fastExpontentiationFn(\n        uint256 x,\n        uint256 y\n    )\n        external\n        pure\n        returns (uint256)\n    {\n        return x.fastExponentiation(y);\n    }\n}\n",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\nlibrary LibScamMath {\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x7e9fe28320db851c5e1e5ca7fe0a6da059d5e1b6c7962f2b89671b3f133ae57e",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}