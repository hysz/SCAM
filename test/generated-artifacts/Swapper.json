{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "val",
						"type": "int256"
					}
				],
				"name": "VALUE",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "feeHigh",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b031916331790556132f4806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063afd46eb511610050578063afd46eb51461009f578063df791e50146100c1578063f2fde38b146100e157610067565b80637b6890361461006c5780638da5cb5b14610081575b600080fd5b61007f61007a366004612910565b6100f4565b005b61008961010a565b604051610096919061299e565b60405180910390f35b6100a7610126565b6040516100969e9d9c9b9a99989796959493929190612a55565b6100d46100cf366004612944565b61017f565b6040516100969190613286565b61007f6100ef3660046128f5565b610360565b6100fc610433565b6101068282610486565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600b54600d54600e5460ff8d169c73ffffffffffffffffffffffffffffffffffffffff61010090910481169c169a999897969594939291908e565b6000610189612834565b6101916105d9565b905061019b610688565b81610160015114156101b4576101408101516101208201525b806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102225750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561025057600061023d86866102378761068c565b856106a1565b905061024881610ade565b925050610319565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102be5750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156102de5760006102d386866102378761068c565b905061024881610aeb565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612bd1565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea33868686866040516103509594939291906129e6565b60405180910390a1509392505050565b610368610433565b73ffffffffffffffffffffffffffffffffffffffff81166103b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612eff565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061042790339084906129bf565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b63565b565b60015460ff16156104c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b9a565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905561054a60636064610af8565b6006556063600781905561055f906064610af8565b60085561056f6005612710610af8565b6009556105976105836001620f4240610b99565b61058b610bb8565b9063ffffffff610bcc16565b600d556105a86127156103e8610b99565b600e555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6105e1612834565b50604080516101c08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600b54610160820152600d54610180820152600e546101a082015290565b4390565b6000610699826012610c35565b90505b919050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156107075750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561072657505050506060820151608083015160c084015160016107c6565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156107945750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102de5785608001519350856060015192506107c38660c001516107b7610bb8565b9063ffffffff610c4a16565b91505b60006107d98585858a6101000151610cc9565b905060006107eb868684878d8d610d7f565b90506000811215610828576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610310906131a2565b8061085f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613210565b60006108916108758a610120015161058b610bb8565b6108858c8563ffffffff61114c16565b9063ffffffff61114c16565b6000908103915081126108d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612ea2565b60006108e06001620186a0610b99565b9050806108f3888463ffffffff61120516565b1361091e57610908818863ffffffff610bcc16565b91506000821261091957600061091b565b815b91505b61092c6001620f4240610b99565b820191506000821261096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612cdb565b600061098a8b610160015161097d610688565b8d6101800151888b611211565b6101a08c01519091506109a3908863ffffffff61114c16565b8113156109c7576101a08b01516109c0908863ffffffff61114c16565b9050610a00565b866109e08c6101a001518361114c90919063ffffffff16565b1215610a00576101a08b01516109fd90889063ffffffff610c4a16565b90505b610a08610688565b6101608c01528515610a4a57610a24898d63ffffffff61120516565b60608c0152610a39888463ffffffff61120516565b60808c015260c08b01819052610a86565b610a5a888463ffffffff61120516565b60608c0152610a6f898d63ffffffff61120516565b60808c0152610a80816107b7610bb8565b60c08c01525b610a8f8b6112f2565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d85604051610ac293929190612a27565b60405180910390a150506000039b9a5050505050505050505050565b6000610699826006611314565b6000610699826012611314565b600080831215610b34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613059565b6000821215610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612c47565b610b92610b8c846f80000000000000000000000000000000611324565b8361139a565b9392505050565b6000610b92610b8c846f80000000000000000000000000000000611324565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610c28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613022565b610b928383600003611469565b6000610b928383600a0a610af8565b92915050565b600080610c56846114df565b90508015610ca657610c9e610c6a856114df565b610c93610c9887610c936f80000000000000000000000000000000610c8e8b6114df565b61139a565b611324565b8661139a565b915050610c44565b610c9e610cc3856f80000000000000000000000000000000611324565b8461139a565b600080610cdc848763ffffffff61114c16565b90506000610cf0868363ffffffff610c4a16565b90506000610d04838863ffffffff610c4a16565b90506000610d148661058b610bb8565b90506000610d20610bb8565b841215610d4357610d3c610d3783610885876114f5565b611bdf565b9050610d61565b610d5e610d56610d3784610885876114f5565b6107b7610bb8565b90505b610d71818963ffffffff61114c16565b9a9950505050505050505050565b600080610dd4610dc7610db7610d9b8a8863ffffffff61114c16565b610dab8c8c63ffffffff61114c16565b9063ffffffff61120516565b6107b7898863ffffffff61114c16565b899063ffffffff61114c16565b90506000610df8610deb8a8763ffffffff61120516565b8a9063ffffffff610c4a16565b90506000610e0a8a8a8a8a8a8a6121ed565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e3b9190612aed565b60405180910390a16000610e548b8b8b8b8b878c6122e0565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e8591906130b6565b60405180910390a16000610e9f8c8c8c8c8c8a8a8e612380565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610ed09190612e24565b60405180910390a1610ee88282896101200151612419565b156110dd576000610efc838388888c6124b3565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610f319084906130f5565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610f689190612de5565b60405180910390a1610f8083838a6101200151612419565b156110db576000610f9584848989868e61255c565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610fcf908690612f36565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6836040516110069190612e63565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68260405161103d9190613247565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516110749190612da6565b60405180910390a161108c84848b6101200151612419565b156110d95761109f848484848b8b6125ea565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6846040516110d09190612fac565b60405180910390a15b505b505b6110e68261269a565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6611117838c63ffffffff61114c16565b6040516111249190612c08565b60405180910390a161113c828b63ffffffff61114c16565b9c9b505050505050505050505050565b6000806111786f80000000000000000000000000000000610c9361116f876114df565b610c93876114df565b90506000611191611188866126df565b610c93866114df565b905060006111aa6111a1876114df565b610c93876126df565b905060006111dc6111c66111bd896126df565b610c93896126df565b6f8000000000000000000000000000000061139a565b90506111fa6111f46111ee8686611469565b84611469565b82611469565b979650505050505050565b6000610b928383611469565b60008061121f87870361271c565b9050600061123f610d37611232886114f5565b849063ffffffff61114c16565b9050600061124f8261058b610bb8565b90506000611263878363ffffffff61114c16565b90506000611277878563ffffffff61114c16565b905060006112a361128e858a63ffffffff61114c16565b61129e878c63ffffffff61114c16565b611205565b905060006112bb826107b78c8c63ffffffff61114c16565b905060006112e06112cc6002612772565b6107b784610dab898963ffffffff61120516565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101600151600b55565b6000610b9282600a0a84026114df565b6000821580611331575081155b1561133e57506000610c44565b508181028183828161134c57fe5b0514158061136357508282828161135f57fe5b0514155b15610c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612f75565b6000816113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613134565b7f8000000000000000000000000000000000000000000000000000000000000000831480156114215750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15611458576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103109061316b565b81838161146157fe5b059392505050565b81810160008312801561147c5750600082125b801561148757508281135b806114a8575060008313801561149d5750600082135b80156114a857508281125b15610c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612feb565b6f80000000000000000000000000000000900590565b60006f80000000000000000000000000000000821315611541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612ca4565b6000821361157b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b2c565b6f8000000000000000000000000000000082141561159b5750600061069c565b640733048c5a82136115ce57507fffffffffffffffffffffffffffffffe01000000000000000000000000000000061069c565b60008060006a01c8464f76164760000000851361162d577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361168b577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136116ed577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611751577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc00000000000000000085136117b5577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611819577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361187d577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136118e1577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611945577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f80000000000000000000000000000000818302816119bb57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816119ec57fe5b05840193506f8000000000000000000000000000000081830281611a0c57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611a3d57fe5b05840193506f8000000000000000000000000000000081830281611a5d57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611a8e57fe5b05840193506f8000000000000000000000000000000081830281611aae57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611adf57fe5b05840193506f8000000000000000000000000000000081830281611aff57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611b3057fe5b05840193506f8000000000000000000000000000000081830281611b5057fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611b8157fe5b05840193506f8000000000000000000000000000000081830281611ba157fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611bd257fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611c115750600061069c565b81611c2d57506f8000000000000000000000000000000061069c565b6000821315611c68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612d6f565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281611cd457fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281611d0157fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281611d2d57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281611d5957fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281611d8557fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611db057fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611ddb57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611e0557fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611e2f57fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611e5957fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611e8257fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611eab57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611ed357fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611efb57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611f2257fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611f4957fe5b05905080601402830192506f8000000000000000000000000000000082820281611f6f57fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611fde577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615612020577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561206257701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156120a4577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156120e65770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615612126576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612166576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156121a6576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156121e6576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806121fa6002612772565b905060006122396122198986610100015161114c90919063ffffffff16565b61058b896108858d6108858a610100015189610bcc90919063ffffffff16565b9050600061225f6122568a6108858d6108858d6108856004612772565b610dab8461278e565b9050600061227b846107b7612276856107b7610bb8565b6114f5565b600003905060008082131561229e57612299610d5683600003611bdf565b6122a7565b6122a782611bdf565b905060006122d26122be878d63ffffffff61114c16565b6107b760008890038563ffffffff61120516565b905060006112e08a8361279a565b6000806123136123066122f9868a63ffffffff61114c16565b8a9063ffffffff610bcc16565b8a9063ffffffff61114c16565b9050600061232a6123068b8763ffffffff61120516565b90506000612341612276848463ffffffff610c4a16565b9050600061235a8261088588610100015161058b610bb8565b9050600061236f896107b78a61088586611bdf565b9d9c50505050505050505050505050565b600080612393848663ffffffff610c4a16565b905060006123c16123af8661088587610100015161058b610bb8565b6101008601519063ffffffff61120516565b905060006123e56123dd8861088588610100015161058b610bb8565b610dab610bb8565b905060006123f9838363ffffffff610c4a16565b9050808412612408578061236f565b50919b9a5050505050505050505050565b60008061242c848663ffffffff610bcc16565b9050600061243c6001600a610b99565b9050600061246c61245f6124528861058b610bb8565b879063ffffffff61120516565b839063ffffffff61114c16565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a822838260405161249f929190612adf565b60405180910390a190911395945050505050565b6000806124c5878461010001516127b1565b905060006124f76124e18661088587610100015161058b610bb8565b610100860151610dab908563ffffffff61114c16565b905060006125246125178a6108858a6108858a610100015161058b610bb8565b849063ffffffff61120516565b9050600061253c826107b78c8663ffffffff61114c16565b905088811261254b578861254d565b805b94505050509550959350505050565b600080600080600061256e8b8b6127ee565b90506000612581828861010001516127b1565b905060006125a56125988c8563ffffffff61114c16565b8b9063ffffffff610bcc16565b90508082136125d057828c836125c08f8c61010001516127b1565b96509650965096505050506125dd565b508b955090935086925090505b9650965096509692505050565b600080612633612610612603898b63ffffffff610bcc16565b859063ffffffff61114c16565b610dab612623898b63ffffffff61114c16565b61058b898d63ffffffff61114c16565b9050600061266a61265a61264d8a8c63ffffffff610bcc16565b879063ffffffff61114c16565b610dab888a63ffffffff610bcc16565b9050600061267e838363ffffffff610c4a16565b905089811361268d5789610d71565b9998505050505050505050565b6126a6605f6064610b99565b811215610430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610310906131d9565b6000808213612706576f7fffffffffffffffffffffffffffffff8260000316600003610699565b506f7fffffffffffffffffffffffffffffff1690565b600080821215612758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612d12565b610699826f80000000000000000000000000000000611324565b6000610699826f80000000000000000000000000000000611324565b6000610699828361114c565b6000818313156127aa5781610b92565b5090919050565b6000806127c3610d568461058b610bb8565b905060006127d0856114f5565b90506127e5610d37838363ffffffff61114c16565b95945050505050565b6000610b926127fd600a612772565b6107b761281a61280d6006612772565b869063ffffffff61114c16565b610dab6128276004612772565b889063ffffffff61114c16565b604051806101c00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4457600080fd5b600060208284031215612906578081fd5b610b9283836128d1565b60008060408385031215612922578081fd5b61292c84846128d1565b915061293b84602085016128d1565b90509250929050565b600080600060608486031215612958578081fd5b83356129638161328f565b925060208401356129738161328f565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b8e1515815273ffffffffffffffffffffffffffffffffffffffff8e1660208201526101c08101612a88604083018f612984565b606082019c909c52608081019a909a5260a08a019890985260c089019690965260e08801949094526101008701929092526101208601526101408501526101608401526101808301526101a0909101529392505050565b918252602082015260400190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461043057600080fdfea365627a7a72315820e5d252d5633e19e3b6b8ec796a1b671e29f9121c9861b797815f50d116e3d8546c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x32F4 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE1 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0xF4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x10A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x299E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x126 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x2944 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x3286 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x28F5 JUMP JUMPDEST PUSH2 0x360 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x433 JUMP JUMPDEST PUSH2 0x106 DUP3 DUP3 PUSH2 0x486 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xFF DUP14 AND SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP13 AND SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x189 PUSH2 0x2834 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x5D9 JUMP JUMPDEST SWAP1 POP PUSH2 0x19B PUSH2 0x688 JUMP JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD EQ ISZERO PUSH2 0x1B4 JUMPI PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x222 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 PUSH2 0x23D DUP7 DUP7 PUSH2 0x237 DUP8 PUSH2 0x68C JUMP JUMPDEST DUP6 PUSH2 0x6A1 JUMP JUMPDEST SWAP1 POP PUSH2 0x248 DUP2 PUSH2 0xADE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x319 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2BE JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 PUSH2 0x2D3 DUP7 DUP7 PUSH2 0x237 DUP8 PUSH2 0x68C JUMP JUMPDEST SWAP1 POP PUSH2 0x248 DUP2 PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2BD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x350 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x368 PUSH2 0x433 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x3B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x427 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x29BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B63 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B9A JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x54A PUSH1 0x63 PUSH1 0x64 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x55F SWAP1 PUSH1 0x64 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x56F PUSH1 0x5 PUSH2 0x2710 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x597 PUSH2 0x583 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB99 JUMP JUMPDEST PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST PUSH1 0xD SSTORE PUSH2 0x5A8 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0xE SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5E1 PUSH2 0x2834 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x12 PUSH2 0xC35 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x707 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x726 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x7C6 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x794 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2DE JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x7C3 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7D9 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xCC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7EB DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x31A2 JUMP JUMPDEST DUP1 PUSH2 0x85F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3210 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x891 PUSH2 0x875 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x885 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2EA2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E0 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xB99 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8F3 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SGT PUSH2 0x91E JUMPI PUSH2 0x908 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x919 JUMPI PUSH1 0x0 PUSH2 0x91B JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x92C PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB99 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98A DUP12 PUSH2 0x160 ADD MLOAD PUSH2 0x97D PUSH2 0x688 JUMP JUMPDEST DUP14 PUSH2 0x180 ADD MLOAD DUP9 DUP12 PUSH2 0x1211 JUMP JUMPDEST PUSH2 0x1A0 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x9A3 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x9C7 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x9C0 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH2 0xA00 JUMP JUMPDEST DUP7 PUSH2 0x9E0 DUP13 PUSH2 0x1A0 ADD MLOAD DUP4 PUSH2 0x114C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0xA00 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x9FD SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xA08 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0xA4A JUMPI PUSH2 0xA24 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA39 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0xA86 JUMP JUMPDEST PUSH2 0xA5A DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA6F DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0xA80 DUP2 PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0xA8F DUP12 PUSH2 0x12F2 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0xAC2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x6 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x12 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2C47 JUMP JUMPDEST PUSH2 0xB92 PUSH2 0xB8C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST DUP4 PUSH2 0x139A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 PUSH2 0xB8C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xC28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3022 JUMP JUMPDEST PUSH2 0xB92 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xAF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC56 DUP5 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xC9E PUSH2 0xC6A DUP6 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 PUSH2 0xC98 DUP8 PUSH2 0xC93 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC8E DUP12 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0x139A JUMP JUMPDEST PUSH2 0x1324 JUMP JUMPDEST DUP7 PUSH2 0x139A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC44 JUMP JUMPDEST PUSH2 0xC9E PUSH2 0xCC3 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST DUP5 PUSH2 0x139A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCDC DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCF0 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD04 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD14 DUP7 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD20 PUSH2 0xBB8 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xD43 JUMPI PUSH2 0xD3C PUSH2 0xD37 DUP4 PUSH2 0x885 DUP8 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST SWAP1 POP PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xD5E PUSH2 0xD56 PUSH2 0xD37 DUP5 PUSH2 0x885 DUP8 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xD71 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDD4 PUSH2 0xDC7 PUSH2 0xDB7 PUSH2 0xD9B DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH2 0x7B7 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDF8 PUSH2 0xDEB DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0A DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE3B SWAP2 SWAP1 PUSH2 0x2AED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE54 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x22E0 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE85 SWAP2 SWAP1 PUSH2 0x30B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE9F DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2380 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xED0 SWAP2 SWAP1 PUSH2 0x2E24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xEE8 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10DD JUMPI PUSH1 0x0 PUSH2 0xEFC DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xF31 SWAP1 DUP5 SWAP1 PUSH2 0x30F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF68 SWAP2 SWAP1 PUSH2 0x2DE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xF80 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10DB JUMPI PUSH1 0x0 PUSH2 0xF95 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xFCF SWAP1 DUP7 SWAP1 PUSH2 0x2F36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1006 SWAP2 SWAP1 PUSH2 0x2E63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x103D SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1074 SWAP2 SWAP1 PUSH2 0x2DA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x108C DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10D9 JUMPI PUSH2 0x109F DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x25EA JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x10D0 SWAP2 SWAP1 PUSH2 0x2FAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x10E6 DUP3 PUSH2 0x269A JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x1117 DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1124 SWAP2 SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x113C DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1178 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC93 PUSH2 0x116F DUP8 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 DUP8 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1191 PUSH2 0x1188 DUP7 PUSH2 0x26DF JUMP JUMPDEST PUSH2 0xC93 DUP7 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11AA PUSH2 0x11A1 DUP8 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 DUP8 PUSH2 0x26DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11DC PUSH2 0x11C6 PUSH2 0x11BD DUP10 PUSH2 0x26DF JUMP JUMPDEST PUSH2 0xC93 DUP10 PUSH2 0x26DF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x139A JUMP JUMPDEST SWAP1 POP PUSH2 0x11FA PUSH2 0x11F4 PUSH2 0x11EE DUP7 DUP7 PUSH2 0x1469 JUMP JUMPDEST DUP5 PUSH2 0x1469 JUMP JUMPDEST DUP3 PUSH2 0x1469 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP4 DUP4 PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x121F DUP8 DUP8 SUB PUSH2 0x271C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x123F PUSH2 0xD37 PUSH2 0x1232 DUP9 PUSH2 0x14F5 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x124F DUP3 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1263 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1277 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12A3 PUSH2 0x128E DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x129E DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x1205 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12BB DUP3 PUSH2 0x7B7 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12E0 PUSH2 0x12CC PUSH1 0x2 PUSH2 0x2772 JUMP JUMPDEST PUSH2 0x7B7 DUP5 PUSH2 0xDAB DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xB SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1331 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x133E JUMPI POP PUSH1 0x0 PUSH2 0xC44 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x134C JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1363 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x135F JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2F75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x13D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3134 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1421 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x1458 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x316B JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1461 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x147C JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1487 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x14A8 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x149D JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x14A8 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2FEB JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1541 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2CA4 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x157B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B2C JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x159B JUMPI POP PUSH1 0x0 PUSH2 0x69C JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x15CE JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x162D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x168B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x16ED JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1751 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x17B5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1819 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x187D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x18E1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1945 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x19BB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x19EC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A0C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1A3D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A5D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1A8E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AAE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1ADF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AFF JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1B30 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B50 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1B81 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1BA1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1BD2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1C11 JUMPI POP PUSH1 0x0 PUSH2 0x69C JUMP JUMPDEST DUP2 PUSH2 0x1C2D JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1C68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2D6F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CD4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D01 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D2D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D59 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D85 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DB0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DDB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E05 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E2F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E59 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E82 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EAB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ED3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EFB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F22 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F49 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F6F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FDE JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2020 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2062 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20A4 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20E6 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2126 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2166 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21A6 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21E6 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21FA PUSH1 0x2 PUSH2 0x2772 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2239 PUSH2 0x2219 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x114C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x58B DUP10 PUSH2 0x885 DUP14 PUSH2 0x885 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xBCC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x225F PUSH2 0x2256 DUP11 PUSH2 0x885 DUP14 PUSH2 0x885 DUP14 PUSH2 0x885 PUSH1 0x4 PUSH2 0x2772 JUMP JUMPDEST PUSH2 0xDAB DUP5 PUSH2 0x278E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x227B DUP5 PUSH2 0x7B7 PUSH2 0x2276 DUP6 PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x229E JUMPI PUSH2 0x2299 PUSH2 0xD56 DUP4 PUSH1 0x0 SUB PUSH2 0x1BDF JUMP JUMPDEST PUSH2 0x22A7 JUMP JUMPDEST PUSH2 0x22A7 DUP3 PUSH2 0x1BDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22D2 PUSH2 0x22BE DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x7B7 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12E0 DUP11 DUP4 PUSH2 0x279A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2313 PUSH2 0x2306 PUSH2 0x22F9 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x232A PUSH2 0x2306 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2341 PUSH2 0x2276 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x235A DUP3 PUSH2 0x885 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x236F DUP10 PUSH2 0x7B7 DUP11 PUSH2 0x885 DUP7 PUSH2 0x1BDF JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2393 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23C1 PUSH2 0x23AF DUP7 PUSH2 0x885 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23E5 PUSH2 0x23DD DUP9 PUSH2 0x885 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xDAB PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23F9 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x2408 JUMPI DUP1 PUSH2 0x236F JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x242C DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x243C PUSH1 0x1 PUSH1 0xA PUSH2 0xB99 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x246C PUSH2 0x245F PUSH2 0x2452 DUP9 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x249F SWAP3 SWAP2 SWAP1 PUSH2 0x2ADF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x24C5 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24F7 PUSH2 0x24E1 DUP7 PUSH2 0x885 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xDAB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2524 PUSH2 0x2517 DUP11 PUSH2 0x885 DUP11 PUSH2 0x885 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x253C DUP3 PUSH2 0x7B7 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x254B JUMPI DUP9 PUSH2 0x254D JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x256E DUP12 DUP12 PUSH2 0x27EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2581 DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x25A5 PUSH2 0x2598 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x25D0 JUMPI DUP3 DUP13 DUP4 PUSH2 0x25C0 DUP16 DUP13 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x25DD JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2633 PUSH2 0x2610 PUSH2 0x2603 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB PUSH2 0x2623 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x58B DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x266A PUSH2 0x265A PUSH2 0x264D DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x267E DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x268D JUMPI DUP10 PUSH2 0xD71 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x26A6 PUSH1 0x5F PUSH1 0x64 PUSH2 0xB99 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x430 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x31D9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x2706 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x699 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2758 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2D12 JUMP JUMPDEST PUSH2 0x699 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 DUP4 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x27AA JUMPI DUP2 PUSH2 0xB92 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27C3 PUSH2 0xD56 DUP5 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D0 DUP6 PUSH2 0x14F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x27E5 PUSH2 0xD37 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 PUSH2 0x27FD PUSH1 0xA PUSH2 0x2772 JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x281A PUSH2 0x280D PUSH1 0x6 PUSH2 0x2772 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB PUSH2 0x2827 PUSH1 0x4 PUSH2 0x2772 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2906 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB92 DUP4 DUP4 PUSH2 0x28D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2922 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x292C DUP5 DUP5 PUSH2 0x28D1 JUMP JUMPDEST SWAP2 POP PUSH2 0x293B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x28D1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2958 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2963 DUP2 PUSH2 0x328F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2973 DUP2 PUSH2 0x328F JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP15 ISZERO ISZERO DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C0 DUP2 ADD PUSH2 0x2A88 PUSH1 0x40 DUP4 ADD DUP16 PUSH2 0x2984 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP13 SWAP1 SWAP13 MSTORE PUSH1 0x80 DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE PUSH1 0xA0 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH2 0x100 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xe5 0xd2 MSTORE 0xd5 PUSH4 0x3E19E3B6 0xb8 0xec PUSH26 0x6A1B671E29F9121C9861B797815F50D116E3D8546C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x634300050C0040000000000000 ",
				"sourceMap": "331:14937:4:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;331:14937:4;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063afd46eb511610050578063afd46eb51461009f578063df791e50146100c1578063f2fde38b146100e157610067565b80637b6890361461006c5780638da5cb5b14610081575b600080fd5b61007f61007a366004612910565b6100f4565b005b61008961010a565b604051610096919061299e565b60405180910390f35b6100a7610126565b6040516100969e9d9c9b9a99989796959493929190612a55565b6100d46100cf366004612944565b61017f565b6040516100969190613286565b61007f6100ef3660046128f5565b610360565b6100fc610433565b6101068282610486565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600b54600d54600e5460ff8d169c73ffffffffffffffffffffffffffffffffffffffff61010090910481169c169a999897969594939291908e565b6000610189612834565b6101916105d9565b905061019b610688565b81610160015114156101b4576101408101516101208201525b806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102225750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561025057600061023d86866102378761068c565b856106a1565b905061024881610ade565b925050610319565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102be5750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156102de5760006102d386866102378761068c565b905061024881610aeb565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612bd1565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea33868686866040516103509594939291906129e6565b60405180910390a1509392505050565b610368610433565b73ffffffffffffffffffffffffffffffffffffffff81166103b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612eff565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061042790339084906129bf565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b63565b565b60015460ff16156104c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b9a565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905561054a60636064610af8565b6006556063600781905561055f906064610af8565b60085561056f6005612710610af8565b6009556105976105836001620f4240610b99565b61058b610bb8565b9063ffffffff610bcc16565b600d556105a86127156103e8610b99565b600e555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6105e1612834565b50604080516101c08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600b54610160820152600d54610180820152600e546101a082015290565b4390565b6000610699826012610c35565b90505b919050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156107075750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561072657505050506060820151608083015160c084015160016107c6565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156107945750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102de5785608001519350856060015192506107c38660c001516107b7610bb8565b9063ffffffff610c4a16565b91505b60006107d98585858a6101000151610cc9565b905060006107eb868684878d8d610d7f565b90506000811215610828576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610310906131a2565b8061085f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613210565b60006108916108758a610120015161058b610bb8565b6108858c8563ffffffff61114c16565b9063ffffffff61114c16565b6000908103915081126108d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612ea2565b60006108e06001620186a0610b99565b9050806108f3888463ffffffff61120516565b1361091e57610908818863ffffffff610bcc16565b91506000821261091957600061091b565b815b91505b61092c6001620f4240610b99565b820191506000821261096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612cdb565b600061098a8b610160015161097d610688565b8d6101800151888b611211565b6101a08c01519091506109a3908863ffffffff61114c16565b8113156109c7576101a08b01516109c0908863ffffffff61114c16565b9050610a00565b866109e08c6101a001518361114c90919063ffffffff16565b1215610a00576101a08b01516109fd90889063ffffffff610c4a16565b90505b610a08610688565b6101608c01528515610a4a57610a24898d63ffffffff61120516565b60608c0152610a39888463ffffffff61120516565b60808c015260c08b01819052610a86565b610a5a888463ffffffff61120516565b60608c0152610a6f898d63ffffffff61120516565b60808c0152610a80816107b7610bb8565b60c08c01525b610a8f8b6112f2565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d85604051610ac293929190612a27565b60405180910390a150506000039b9a5050505050505050505050565b6000610699826006611314565b6000610699826012611314565b600080831215610b34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613059565b6000821215610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612c47565b610b92610b8c846f80000000000000000000000000000000611324565b8361139a565b9392505050565b6000610b92610b8c846f80000000000000000000000000000000611324565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610c28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613022565b610b928383600003611469565b6000610b928383600a0a610af8565b92915050565b600080610c56846114df565b90508015610ca657610c9e610c6a856114df565b610c93610c9887610c936f80000000000000000000000000000000610c8e8b6114df565b61139a565b611324565b8661139a565b915050610c44565b610c9e610cc3856f80000000000000000000000000000000611324565b8461139a565b600080610cdc848763ffffffff61114c16565b90506000610cf0868363ffffffff610c4a16565b90506000610d04838863ffffffff610c4a16565b90506000610d148661058b610bb8565b90506000610d20610bb8565b841215610d4357610d3c610d3783610885876114f5565b611bdf565b9050610d61565b610d5e610d56610d3784610885876114f5565b6107b7610bb8565b90505b610d71818963ffffffff61114c16565b9a9950505050505050505050565b600080610dd4610dc7610db7610d9b8a8863ffffffff61114c16565b610dab8c8c63ffffffff61114c16565b9063ffffffff61120516565b6107b7898863ffffffff61114c16565b899063ffffffff61114c16565b90506000610df8610deb8a8763ffffffff61120516565b8a9063ffffffff610c4a16565b90506000610e0a8a8a8a8a8a8a6121ed565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e3b9190612aed565b60405180910390a16000610e548b8b8b8b8b878c6122e0565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e8591906130b6565b60405180910390a16000610e9f8c8c8c8c8c8a8a8e612380565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610ed09190612e24565b60405180910390a1610ee88282896101200151612419565b156110dd576000610efc838388888c6124b3565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610f319084906130f5565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610f689190612de5565b60405180910390a1610f8083838a6101200151612419565b156110db576000610f9584848989868e61255c565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610fcf908690612f36565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6836040516110069190612e63565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68260405161103d9190613247565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516110749190612da6565b60405180910390a161108c84848b6101200151612419565b156110d95761109f848484848b8b6125ea565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6846040516110d09190612fac565b60405180910390a15b505b505b6110e68261269a565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6611117838c63ffffffff61114c16565b6040516111249190612c08565b60405180910390a161113c828b63ffffffff61114c16565b9c9b505050505050505050505050565b6000806111786f80000000000000000000000000000000610c9361116f876114df565b610c93876114df565b90506000611191611188866126df565b610c93866114df565b905060006111aa6111a1876114df565b610c93876126df565b905060006111dc6111c66111bd896126df565b610c93896126df565b6f8000000000000000000000000000000061139a565b90506111fa6111f46111ee8686611469565b84611469565b82611469565b979650505050505050565b6000610b928383611469565b60008061121f87870361271c565b9050600061123f610d37611232886114f5565b849063ffffffff61114c16565b9050600061124f8261058b610bb8565b90506000611263878363ffffffff61114c16565b90506000611277878563ffffffff61114c16565b905060006112a361128e858a63ffffffff61114c16565b61129e878c63ffffffff61114c16565b611205565b905060006112bb826107b78c8c63ffffffff61114c16565b905060006112e06112cc6002612772565b6107b784610dab898963ffffffff61120516565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101600151600b55565b6000610b9282600a0a84026114df565b6000821580611331575081155b1561133e57506000610c44565b508181028183828161134c57fe5b0514158061136357508282828161135f57fe5b0514155b15610c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612f75565b6000816113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090613134565b7f8000000000000000000000000000000000000000000000000000000000000000831480156114215750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15611458576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103109061316b565b81838161146157fe5b059392505050565b81810160008312801561147c5750600082125b801561148757508281135b806114a8575060008313801561149d5750600082135b80156114a857508281125b15610c44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612feb565b6f80000000000000000000000000000000900590565b60006f80000000000000000000000000000000821315611541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612ca4565b6000821361157b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612b2c565b6f8000000000000000000000000000000082141561159b5750600061069c565b640733048c5a82136115ce57507fffffffffffffffffffffffffffffffe01000000000000000000000000000000061069c565b60008060006a01c8464f76164760000000851361162d577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361168b577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136116ed577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611751577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc00000000000000000085136117b5577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513611819577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361187d577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136118e1577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611945577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f80000000000000000000000000000000818302816119bb57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816119ec57fe5b05840193506f8000000000000000000000000000000081830281611a0c57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611a3d57fe5b05840193506f8000000000000000000000000000000081830281611a5d57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611a8e57fe5b05840193506f8000000000000000000000000000000081830281611aae57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611adf57fe5b05840193506f8000000000000000000000000000000081830281611aff57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611b3057fe5b05840193506f8000000000000000000000000000000081830281611b5057fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611b8157fe5b05840193506f8000000000000000000000000000000081830281611ba157fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611bd257fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611c115750600061069c565b81611c2d57506f8000000000000000000000000000000061069c565b6000821315611c68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612d6f565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281611cd457fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281611d0157fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281611d2d57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281611d5957fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281611d8557fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611db057fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611ddb57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611e0557fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611e2f57fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611e5957fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611e8257fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611eab57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611ed357fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611efb57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611f2257fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611f4957fe5b05905080601402830192506f8000000000000000000000000000000082820281611f6f57fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611fde577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615612020577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561206257701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156120a4577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156120e65770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615612126576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612166576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156121a6576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156121e6576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806121fa6002612772565b905060006122396122198986610100015161114c90919063ffffffff16565b61058b896108858d6108858a610100015189610bcc90919063ffffffff16565b9050600061225f6122568a6108858d6108858d6108856004612772565b610dab8461278e565b9050600061227b846107b7612276856107b7610bb8565b6114f5565b600003905060008082131561229e57612299610d5683600003611bdf565b6122a7565b6122a782611bdf565b905060006122d26122be878d63ffffffff61114c16565b6107b760008890038563ffffffff61120516565b905060006112e08a8361279a565b6000806123136123066122f9868a63ffffffff61114c16565b8a9063ffffffff610bcc16565b8a9063ffffffff61114c16565b9050600061232a6123068b8763ffffffff61120516565b90506000612341612276848463ffffffff610c4a16565b9050600061235a8261088588610100015161058b610bb8565b9050600061236f896107b78a61088586611bdf565b9d9c50505050505050505050505050565b600080612393848663ffffffff610c4a16565b905060006123c16123af8661088587610100015161058b610bb8565b6101008601519063ffffffff61120516565b905060006123e56123dd8861088588610100015161058b610bb8565b610dab610bb8565b905060006123f9838363ffffffff610c4a16565b9050808412612408578061236f565b50919b9a5050505050505050505050565b60008061242c848663ffffffff610bcc16565b9050600061243c6001600a610b99565b9050600061246c61245f6124528861058b610bb8565b879063ffffffff61120516565b839063ffffffff61114c16565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a822838260405161249f929190612adf565b60405180910390a190911395945050505050565b6000806124c5878461010001516127b1565b905060006124f76124e18661088587610100015161058b610bb8565b610100860151610dab908563ffffffff61114c16565b905060006125246125178a6108858a6108858a610100015161058b610bb8565b849063ffffffff61120516565b9050600061253c826107b78c8663ffffffff61114c16565b905088811261254b578861254d565b805b94505050509550959350505050565b600080600080600061256e8b8b6127ee565b90506000612581828861010001516127b1565b905060006125a56125988c8563ffffffff61114c16565b8b9063ffffffff610bcc16565b90508082136125d057828c836125c08f8c61010001516127b1565b96509650965096505050506125dd565b508b955090935086925090505b9650965096509692505050565b600080612633612610612603898b63ffffffff610bcc16565b859063ffffffff61114c16565b610dab612623898b63ffffffff61114c16565b61058b898d63ffffffff61114c16565b9050600061266a61265a61264d8a8c63ffffffff610bcc16565b879063ffffffff61114c16565b610dab888a63ffffffff610bcc16565b9050600061267e838363ffffffff610c4a16565b905089811361268d5789610d71565b9998505050505050505050565b6126a6605f6064610b99565b811215610430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610310906131d9565b6000808213612706576f7fffffffffffffffffffffffffffffff8260000316600003610699565b506f7fffffffffffffffffffffffffffffff1690565b600080821215612758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090612d12565b610699826f80000000000000000000000000000000611324565b6000610699826f80000000000000000000000000000000611324565b6000610699828361114c565b6000818313156127aa5781610b92565b5090919050565b6000806127c3610d568461058b610bb8565b905060006127d0856114f5565b90506127e5610d37838363ffffffff61114c16565b95945050505050565b6000610b926127fd600a612772565b6107b761281a61280d6006612772565b869063ffffffff61114c16565b610dab6128276004612772565b889063ffffffff61114c16565b604051806101c00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4457600080fd5b600060208284031215612906578081fd5b610b9283836128d1565b60008060408385031215612922578081fd5b61292c84846128d1565b915061293b84602085016128d1565b90509250929050565b600080600060608486031215612958578081fd5b83356129638161328f565b925060208401356129738161328f565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b8e1515815273ffffffffffffffffffffffffffffffffffffffff8e1660208201526101c08101612a88604083018f612984565b606082019c909c52608081019a909a5260a08a019890985260c089019690965260e08801949094526101008701929092526101208601526101408501526101608401526101808301526101a0909101529392505050565b918252602082015260400190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461043057600080fdfea365627a7a72315820e5d252d5633e19e3b6b8ec796a1b671e29f9121c9861b797815f50d116e3d8546c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE1 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0xF4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x10A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x299E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x126 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x2944 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x3286 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x28F5 JUMP JUMPDEST PUSH2 0x360 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x433 JUMP JUMPDEST PUSH2 0x106 DUP3 DUP3 PUSH2 0x486 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0xD SLOAD PUSH1 0xE SLOAD PUSH1 0xFF DUP14 AND SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP13 AND SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x189 PUSH2 0x2834 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x5D9 JUMP JUMPDEST SWAP1 POP PUSH2 0x19B PUSH2 0x688 JUMP JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD EQ ISZERO PUSH2 0x1B4 JUMPI PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x222 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 PUSH2 0x23D DUP7 DUP7 PUSH2 0x237 DUP8 PUSH2 0x68C JUMP JUMPDEST DUP6 PUSH2 0x6A1 JUMP JUMPDEST SWAP1 POP PUSH2 0x248 DUP2 PUSH2 0xADE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x319 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2BE JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 PUSH2 0x2D3 DUP7 DUP7 PUSH2 0x237 DUP8 PUSH2 0x68C JUMP JUMPDEST SWAP1 POP PUSH2 0x248 DUP2 PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2BD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x350 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x368 PUSH2 0x433 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x3B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x427 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x29BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B63 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B9A JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x54A PUSH1 0x63 PUSH1 0x64 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x55F SWAP1 PUSH1 0x64 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x56F PUSH1 0x5 PUSH2 0x2710 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x597 PUSH2 0x583 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB99 JUMP JUMPDEST PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST PUSH1 0xD SSTORE PUSH2 0x5A8 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0xE SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5E1 PUSH2 0x2834 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x12 PUSH2 0xC35 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x707 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x726 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x7C6 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x794 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2DE JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x7C3 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7D9 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xCC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7EB DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x31A2 JUMP JUMPDEST DUP1 PUSH2 0x85F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3210 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x891 PUSH2 0x875 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x885 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2EA2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E0 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xB99 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8F3 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SGT PUSH2 0x91E JUMPI PUSH2 0x908 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x919 JUMPI PUSH1 0x0 PUSH2 0x91B JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x92C PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB99 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98A DUP12 PUSH2 0x160 ADD MLOAD PUSH2 0x97D PUSH2 0x688 JUMP JUMPDEST DUP14 PUSH2 0x180 ADD MLOAD DUP9 DUP12 PUSH2 0x1211 JUMP JUMPDEST PUSH2 0x1A0 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x9A3 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x9C7 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x9C0 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH2 0xA00 JUMP JUMPDEST DUP7 PUSH2 0x9E0 DUP13 PUSH2 0x1A0 ADD MLOAD DUP4 PUSH2 0x114C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0xA00 JUMPI PUSH2 0x1A0 DUP12 ADD MLOAD PUSH2 0x9FD SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xA08 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0xA4A JUMPI PUSH2 0xA24 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA39 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0xA86 JUMP JUMPDEST PUSH2 0xA5A DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA6F DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0xA80 DUP2 PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0xA8F DUP12 PUSH2 0x12F2 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0xAC2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x6 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH1 0x12 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2C47 JUMP JUMPDEST PUSH2 0xB92 PUSH2 0xB8C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST DUP4 PUSH2 0x139A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 PUSH2 0xB8C DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xC28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3022 JUMP JUMPDEST PUSH2 0xB92 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xAF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC56 DUP5 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xC9E PUSH2 0xC6A DUP6 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 PUSH2 0xC98 DUP8 PUSH2 0xC93 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC8E DUP12 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0x139A JUMP JUMPDEST PUSH2 0x1324 JUMP JUMPDEST DUP7 PUSH2 0x139A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC44 JUMP JUMPDEST PUSH2 0xC9E PUSH2 0xCC3 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST DUP5 PUSH2 0x139A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCDC DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCF0 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD04 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD14 DUP7 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD20 PUSH2 0xBB8 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xD43 JUMPI PUSH2 0xD3C PUSH2 0xD37 DUP4 PUSH2 0x885 DUP8 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST SWAP1 POP PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xD5E PUSH2 0xD56 PUSH2 0xD37 DUP5 PUSH2 0x885 DUP8 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xD71 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDD4 PUSH2 0xDC7 PUSH2 0xDB7 PUSH2 0xD9B DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST PUSH2 0x7B7 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDF8 PUSH2 0xDEB DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0A DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21ED JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE3B SWAP2 SWAP1 PUSH2 0x2AED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE54 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x22E0 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE85 SWAP2 SWAP1 PUSH2 0x30B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE9F DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2380 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xED0 SWAP2 SWAP1 PUSH2 0x2E24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xEE8 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10DD JUMPI PUSH1 0x0 PUSH2 0xEFC DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xF31 SWAP1 DUP5 SWAP1 PUSH2 0x30F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF68 SWAP2 SWAP1 PUSH2 0x2DE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xF80 DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10DB JUMPI PUSH1 0x0 PUSH2 0xF95 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xFCF SWAP1 DUP7 SWAP1 PUSH2 0x2F36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1006 SWAP2 SWAP1 PUSH2 0x2E63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x103D SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1074 SWAP2 SWAP1 PUSH2 0x2DA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x108C DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x2419 JUMP JUMPDEST ISZERO PUSH2 0x10D9 JUMPI PUSH2 0x109F DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x25EA JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x10D0 SWAP2 SWAP1 PUSH2 0x2FAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x10E6 DUP3 PUSH2 0x269A JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x1117 DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1124 SWAP2 SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x113C DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1178 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC93 PUSH2 0x116F DUP8 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 DUP8 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1191 PUSH2 0x1188 DUP7 PUSH2 0x26DF JUMP JUMPDEST PUSH2 0xC93 DUP7 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11AA PUSH2 0x11A1 DUP8 PUSH2 0x14DF JUMP JUMPDEST PUSH2 0xC93 DUP8 PUSH2 0x26DF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11DC PUSH2 0x11C6 PUSH2 0x11BD DUP10 PUSH2 0x26DF JUMP JUMPDEST PUSH2 0xC93 DUP10 PUSH2 0x26DF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x139A JUMP JUMPDEST SWAP1 POP PUSH2 0x11FA PUSH2 0x11F4 PUSH2 0x11EE DUP7 DUP7 PUSH2 0x1469 JUMP JUMPDEST DUP5 PUSH2 0x1469 JUMP JUMPDEST DUP3 PUSH2 0x1469 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP4 DUP4 PUSH2 0x1469 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x121F DUP8 DUP8 SUB PUSH2 0x271C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x123F PUSH2 0xD37 PUSH2 0x1232 DUP9 PUSH2 0x14F5 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x124F DUP3 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1263 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1277 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12A3 PUSH2 0x128E DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x129E DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x1205 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12BB DUP3 PUSH2 0x7B7 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12E0 PUSH2 0x12CC PUSH1 0x2 PUSH2 0x2772 JUMP JUMPDEST PUSH2 0x7B7 DUP5 PUSH2 0xDAB DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xB SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1331 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x133E JUMPI POP PUSH1 0x0 PUSH2 0xC44 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x134C JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1363 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x135F JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2F75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x13D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x3134 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1421 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x1458 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x316B JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1461 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x147C JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1487 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x14A8 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x149D JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x14A8 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2FEB JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1541 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2CA4 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x157B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2B2C JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x159B JUMPI POP PUSH1 0x0 PUSH2 0x69C JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x15CE JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x162D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x168B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x16ED JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1751 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x17B5 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x1819 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x187D JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x18E1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1945 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x19BB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x19EC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A0C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1A3D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A5D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1A8E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AAE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1ADF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AFF JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1B30 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B50 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1B81 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1BA1 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1BD2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1C11 JUMPI POP PUSH1 0x0 PUSH2 0x69C JUMP JUMPDEST DUP2 PUSH2 0x1C2D JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1C68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2D6F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CD4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D01 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D2D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D59 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D85 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DB0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DDB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E05 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E2F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E59 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E82 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EAB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ED3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EFB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F22 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F49 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F6F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FDE JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2020 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2062 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20A4 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20E6 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2126 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2166 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21A6 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21E6 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21FA PUSH1 0x2 PUSH2 0x2772 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2239 PUSH2 0x2219 DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x114C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x58B DUP10 PUSH2 0x885 DUP14 PUSH2 0x885 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xBCC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x225F PUSH2 0x2256 DUP11 PUSH2 0x885 DUP14 PUSH2 0x885 DUP14 PUSH2 0x885 PUSH1 0x4 PUSH2 0x2772 JUMP JUMPDEST PUSH2 0xDAB DUP5 PUSH2 0x278E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x227B DUP5 PUSH2 0x7B7 PUSH2 0x2276 DUP6 PUSH2 0x7B7 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x229E JUMPI PUSH2 0x2299 PUSH2 0xD56 DUP4 PUSH1 0x0 SUB PUSH2 0x1BDF JUMP JUMPDEST PUSH2 0x22A7 JUMP JUMPDEST PUSH2 0x22A7 DUP3 PUSH2 0x1BDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22D2 PUSH2 0x22BE DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x7B7 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12E0 DUP11 DUP4 PUSH2 0x279A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2313 PUSH2 0x2306 PUSH2 0x22F9 DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x232A PUSH2 0x2306 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2341 PUSH2 0x2276 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x235A DUP3 PUSH2 0x885 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x236F DUP10 PUSH2 0x7B7 DUP11 PUSH2 0x885 DUP7 PUSH2 0x1BDF JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2393 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23C1 PUSH2 0x23AF DUP7 PUSH2 0x885 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23E5 PUSH2 0x23DD DUP9 PUSH2 0x885 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xDAB PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23F9 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x2408 JUMPI DUP1 PUSH2 0x236F JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x242C DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x243C PUSH1 0x1 PUSH1 0xA PUSH2 0xB99 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x246C PUSH2 0x245F PUSH2 0x2452 DUP9 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x249F SWAP3 SWAP2 SWAP1 PUSH2 0x2ADF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x24C5 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24F7 PUSH2 0x24E1 DUP7 PUSH2 0x885 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xDAB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2524 PUSH2 0x2517 DUP11 PUSH2 0x885 DUP11 PUSH2 0x885 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1205 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x253C DUP3 PUSH2 0x7B7 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x254B JUMPI DUP9 PUSH2 0x254D JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x256E DUP12 DUP12 PUSH2 0x27EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2581 DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x25A5 PUSH2 0x2598 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x25D0 JUMPI DUP3 DUP13 DUP4 PUSH2 0x25C0 DUP16 DUP13 PUSH2 0x100 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x25DD JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2633 PUSH2 0x2610 PUSH2 0x2603 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB PUSH2 0x2623 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0x58B DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x266A PUSH2 0x265A PUSH2 0x264D DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xBCC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x267E DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC4A AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x268D JUMPI DUP10 PUSH2 0xD71 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x26A6 PUSH1 0x5F PUSH1 0x64 PUSH2 0xB99 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x430 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x31D9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x2706 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x699 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2758 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x310 SWAP1 PUSH2 0x2D12 JUMP JUMPDEST PUSH2 0x699 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x699 DUP3 DUP4 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x27AA JUMPI DUP2 PUSH2 0xB92 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27C3 PUSH2 0xD56 DUP5 PUSH2 0x58B PUSH2 0xBB8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D0 DUP6 PUSH2 0x14F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x27E5 PUSH2 0xD37 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB92 PUSH2 0x27FD PUSH1 0xA PUSH2 0x2772 JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x281A PUSH2 0x280D PUSH1 0x6 PUSH2 0x2772 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH2 0xDAB PUSH2 0x2827 PUSH1 0x4 PUSH2 0x2772 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x114C AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2906 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB92 DUP4 DUP4 PUSH2 0x28D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2922 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x292C DUP5 DUP5 PUSH2 0x28D1 JUMP JUMPDEST SWAP2 POP PUSH2 0x293B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x28D1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2958 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2963 DUP2 PUSH2 0x328F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2973 DUP2 PUSH2 0x328F JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP15 ISZERO ISZERO DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C0 DUP2 ADD PUSH2 0x2A88 PUSH1 0x40 DUP4 ADD DUP16 PUSH2 0x2984 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP13 SWAP1 SWAP13 MSTORE PUSH1 0x80 DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE PUSH1 0xA0 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP10 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH2 0x100 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xe5 0xd2 MSTORE 0xd5 PUSH4 0x3E19E3B6 0xb8 0xec PUSH26 0x6A1B671E29F9121C9861B797815F50D116E3D8546C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x634300050C0040000000000000 ",
				"sourceMap": "331:14937:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;331:14937:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;264:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;525:1693:4;;;;;;;;;:::i;:::-;;;;;;;;320:293:2;;;;;;;;;:::i;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1693:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;764:24;:22;:24::i;:::-;753:5;:7;;;:35;749:91;;;816:13;;;;804:9;;;:25;749:91;867:5;:14;;;854:27;;:9;:27;;;:56;;;;;896:5;:14;;;885:25;;:7;:25;;;854:56;850:726;;;926:26;955:139;978:9;1005:7;1030:27;1050:6;1030:19;:27::i;:::-;1075:5;955;:139::i;:::-;926:168;;1125:43;1148:19;1125:22;:43::i;:::-;1108:60;;850:726;;;;1201:5;:14;;;1188:27;;:9;:27;;;:56;;;;;1230:5;:14;;;1219:25;;:7;:25;;;1188:56;1185:391;;;1260:26;1289:139;1312:9;1339:7;1364:27;1384:6;1364:19;:27::i;1289:139::-;1260:168;;1459:42;1481:19;1459:21;:42::i;1185:391::-;1532:33;;;;;;;;;;;;;;;;;;;1185:391;2041:138;2067:10;2091:9;2114:7;2135:6;2155:14;2041:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1693:4;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;412:195;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;446:148::-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;15149:117:4:-;15247:12;15149:117;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;:::-;299:53;;182:177;;;;:::o;2224:3404:4:-;2588:14;;;;2391:21;;;;;;;;;;2575:27;;;;;;;:56;;;;;2617:5;:14;;;2606:25;;:7;:25;;;2575:56;2571:433;;;-1:-1:-1;;;;2651:7:4;;;;2676;;;;2705:11;;;;2740:4;2571:433;;;2777:5;:14;;;2764:27;;:9;:27;;;:56;;;;;2806:5;:14;;;2795:25;;:7;:25;;;2764:56;2761:243;;;2840:5;:7;;;2836:11;;2865:5;:7;;;2861:11;;2894:35;2917:5;:11;;;2894:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2886:43;;2761:243;3103:9;3115:125;3167:1;3182;3197:5;3216;:14;;;3115:38;:125::i;:::-;3103:137;;3270:12;3285:122;3307:1;3322;3337:2;3353:5;3372:6;3392:5;3285:8;:122::i;:::-;3270:137;;3623:1;3615:5;:9;3611:147;;;3641:29;;;;;;;;;;;3611:147;3691:10;3687:71;;3717:30;;;;;;;;;;;3687:71;3807:13;3823:112;3888:33;3911:5;:9;;;3888:18;:16;:18::i;:33::-;3823:30;:6;3847:5;3823:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3954:7;;;;;-1:-1:-1;3976:11:4;;3972:86;;4003:44;;;;;;;;;;;3972:86;4090:14;4107:47;4135:1;4146:6;4107:20;:47::i;:::-;4090:64;-1:-1:-1;4090:64:4;4168:13;:1;4174:6;4168:13;:5;:13;:::i;:::-;:24;4164:126;;4217:14;:7;4229:1;4217:14;:11;:14;:::i;:::-;4208:23;;4264:1;4255:6;:10;4254:25;;4278:1;4254:25;;;4269:6;4254:25;4245:34;;4164:126;4432:46;4460:1;4471:5;4432:20;:46::i;:::-;4422:56;;;;4503:1;4493:6;:11;4489:78;;4520:36;;;;;;;;;;;4489:78;4618:15;4636:155;4677:5;:7;;;4698:24;:22;:24::i;:::-;4736:5;:10;;;4760:2;4776:5;4636:27;:155::i;:::-;4817:14;;;;4618:173;;-1:-1:-1;4817:25:4;;4836:5;4817:25;:18;:25;:::i;:::-;4806:8;:36;4802:211;;;4869:14;;;;:25;;4888:5;4869:25;:18;:25;:::i;:::-;4858:36;;4802:211;;;4945:5;4914:28;4927:5;:14;;;4914:8;:12;;:28;;;;:::i;:::-;:36;4911:102;;;4987:14;;;;4977:25;;:5;;:25;:9;:25;:::i;:::-;4966:36;;4911:102;5057:24;:22;:24::i;:::-;5047:7;;;:34;5091:285;;;;5128:13;:1;5134:6;5128:13;:5;:13;:::i;:::-;5118:7;;;:23;5165:13;:1;5171:6;5165:13;:5;:13;:::i;:::-;5155:7;;;:23;5192:11;;;:22;;;5091:285;;;5255:13;:1;5261:6;5255:13;:5;:13;:::i;:::-;5245:7;;;:23;5292:13;:1;5298:6;5292:13;:5;:13;:::i;:::-;5282:7;;;:23;5333:32;5356:8;5333:18;:16;:18::i;:32::-;5319:11;;;:46;5091:285;5410:23;5427:5;5410:16;:23::i;:::-;5449:106;5487:10;5515:6;5539;5449:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5583:7:4;;;2224:3404;-1:-1:-1;;;;;;;;;;;2224:3404:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;7175:386:8:-;7237:8;7280:1;7268;7261:21;7257:116;;;7298:64;;;;;;;;;;;7257:116;7405:1;7393;7386:21;7382:118;;;7423:66;;;;;;;;;;;7382:118;7513:41;7518:24;7530:1;889:66;7518:4;:24::i;:::-;7551:1;7513:4;:41::i;:::-;7509:45;7175:386;-1:-1:-1;;;7175:386:8:o;6551:116::-;6611:8;6635:25;6640:16;6645:1;889:66;6640:4;:16::i;1830:76::-;889:66;;1830:76::o;2395:186::-;2451:8;1023:66;2475:1;:18;2471:79;;;2509:30;;;;;;;;;;;2471:79;2563:11;2568:1;2572;2571:2;;2563:4;:11::i;3998:195:10:-;4102:18;4143:43;4164:6;4176:9;4172:2;:13;4143:20;:43::i;3998:195::-;;;;;:::o;4503:624:8:-;4559:8;4579:15;4597:12;4607:1;4597:9;:12::i;:::-;4579:30;-1:-1:-1;4623:13:8;;4619:179;;4659:65;4664:12;4674:1;4664:9;:12::i;:::-;4678:45;4683:36;4688:1;4691:27;889:66;4705:12;4715:1;4705:9;:12::i;:::-;4691:4;:27::i;:::-;4683:4;:36::i;:::-;4721:1;4678:4;:45::i;4659:65::-;4652:72;;;;;4619:179;4762:25;4767:16;4772:1;889:66;4767:4;:16::i;:::-;4785:1;4762:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;11683:2541:4:-;11878:6;;11986:102;12005:73;12050:27;12063:13;:1;12069:6;12063:13;:5;:13;:::i;:::-;12050:8;:1;12056;12050:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;12005;:2;12025:6;12005:27;:19;:27;:::i;:73::-;11986:1;;:102;:5;:102;:::i;:::-;11974:114;-1:-1:-1;12098:10:4;12111:42;12130:13;:1;12136:6;12130:13;:5;:13;:::i;:::-;12111:1;;:42;:5;:42;:::i;:::-;12098:55;;12206:12;12221:127;12248:1;12263;12278:2;12294:5;12313:6;12333:5;12221:13;:127::i;:::-;12206:142;;12364:33;12391:5;12364:33;;;;;;;;;;;;;;;12408:9;12420:146;12447:1;12462;12477:2;12493:5;12512:6;12532:5;12551;12420:13;:146::i;:::-;12408:158;;12582:28;12607:2;12582:28;;;;;;;;;;;;;;;12621:9;12633:160;12660:1;12675;12690:2;12706:5;12725:6;12745:2;12761:3;12778:5;12633:13;:160::i;:::-;12621:172;;12809:28;12834:2;12809:28;;;;;;;;;;;;;;;12853:42;12877:2;12881;12885:5;:9;;;12853:23;:42::i;:::-;12849:1229;;;12911:9;12945:131;12976:2;12996;13016;13036:3;13057:5;12945:13;:131::i;:::-;13095:28;;12934:142;;-1:-1:-1;12934:142:4;-1:-1:-1;13095:28:4;;;;12934:142;;13095:28;;;;;;;;;;13142;13167:2;13142:28;;;;;;;;;;;;;;;13189:42;13213:2;13217;13221:5;:9;;;13189:23;:42::i;:::-;13185:883;;;13251:9;13297:179;13332:2;13356;13380;13404:3;13429:2;13453:5;13297:13;:179::i;:::-;13500:28;;13278:198;;-1:-1:-1;13278:198:4;;-1:-1:-1;13278:198:4;-1:-1:-1;13278:198:4;-1:-1:-1;13500:28:4;;;;13278:198;;13500:28;;;;;;;;;;13551;13576:2;13551:28;;;;;;;;;;;;;;;13602;13627:2;13602:28;;;;;;;;;;;;;;;13653;13678:2;13653:28;;;;;;;;;;;;;;;13704:42;13728:2;13732;13736:5;:9;;;13704:23;:42::i;:::-;13700:354;;;13775:204;13814:2;13842;13870;13898;13926;13954:3;13775:13;:204::i;:::-;13770:209;;14007:28;14032:2;14007:28;;;;;;;;;;;;;;;13700:354;13185:883;;12849:1229;;14106:17;14120:2;14106:13;:17::i;:::-;14139:32;14160:10;:2;14167;14160:10;:6;:10;:::i;:::-;14139:32;;;;;;;;;;;;;;;14207:10;:2;14214;14207:10;:6;:10;:::i;:::-;14200:17;11683:2541;-1:-1:-1;;;;;;;;;;;;11683:2541:4:o;2678:772:8:-;2734:8;2755:18;2776:47;889:66;2790:32;2795:12;2805:1;2795:9;:12::i;:::-;2809;2819:1;2809:9;:12::i;2776:47::-;2755:68;;2911:20;2934:33;2939:13;2950:1;2939:10;:13::i;:::-;2954:12;2964:1;2954:9;:12::i;2934:33::-;2911:56;;2977:20;3000:33;3005:12;3015:1;3005:9;:12::i;:::-;3019:13;3030:1;3019:10;:13::i;3000:33::-;2977:56;;3043:23;3069:49;3074:34;3079:13;3090:1;3079:10;:13::i;:::-;3094;3105:1;3094:10;:13::i;3074:34::-;889:66;3069:4;:49::i;:::-;3043:75;;3136:77;3141:53;3146:32;3151:11;3164:13;3146:4;:32::i;:::-;3180:13;3141:4;:53::i;:::-;3196:16;3136:4;:77::i;:::-;3129:84;2678:772;-1:-1:-1;;;;;;;2678:772:8:o;2207:97::-;2263:8;2287:10;2292:1;2295;2287:4;:10::i;1187:785:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:28;:17;1742:5;1720:28;:21;:28;:::i;:::-;1762:20;:12;1779:2;1762:20;:16;:20;:::i;:::-;1690:16;:102::i;:::-;1664:128;-1:-1:-1;1802:12:10;1817:35;1664:128;1817:13;:2;1824:5;1817:13;:6;:13;:::i;:35::-;1802:50;;1862:13;1878:64;1910:31;1938:1;1910:20;:31::i;:::-;1878:27;1899:5;1878:16;:5;1888;1878:16;:9;:16;:::i;:64::-;1862:80;1187:785;-1:-1:-1;;;;;;;;;;;;;;1187:785:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4199:207:10:-;4304:19;4354:44;4375:9;4371:2;:13;4355:6;:30;4354:42;:44::i;18908:245:8:-;18964:8;18988:6;;;:16;;-1:-1:-1;18998:6:8;;18988:16;18984:55;;;-1:-1:-1;19027:1:8;19020:8;;18984:55;-1:-1:-1;19052:5:8;;;19056:1;19052;:5;:1;19071:5;;;;;:10;;:24;;;;19094:1;19089;19085;:5;;;;;;:10;;19071:24;19067:80;;;19112:24;;;;;;;;;;;19240:260;19296:8;19320:6;19316:67;;19342:30;;;;;;;;;;;19316:67;1023:66;19396:1;:18;:29;;;;;19418:1;19423:2;19418:7;19396:29;19392:83;;;19440:24;;;;;;;;;;;19392:83;19492:1;19488;:5;;;;;;;19240:260;-1:-1:-1;;;19240:260:8:o;19560:210::-;19640:5;;;19616:8;19660:5;;:14;;;;;19673:1;19669;:5;19660:14;:23;;;;;19682:1;19678;:5;19660:23;19659:54;;;;19693:1;19689;:5;:14;;;;;19702:1;19698;:5;19689:14;:23;;;;;19711:1;19707;:5;19689:23;19655:109;;;19729:24;;;;;;;;;;;7624:97;889:66;7703:11;;;7624:97::o;7956:5160::-;8001:8;889:66;8025:1;:14;8021:74;;;8055:29;;;;;;;;;;;8021:74;8113:1;8108;:6;8104:66;;8130:29;;;;;;;;;;;8104:66;889;8183:1;:12;8179:51;;;-1:-1:-1;8218:1:8;8211:8;;8179:51;1368:66;8243:1;:15;8239:64;;-1:-1:-1;1548:75:8;8274:18;;8239:64;8313:8;8331;8349;8662:66;8650:1;:79;8646:316;;8745:79;;;;;8871:66;889;8850:11;;:88;8846:92;;8646:316;9006:66;8994:1;:79;8990:316;;9089:79;;;;;9215:66;889;9194:11;;:88;9190:92;;8990:316;9349:66;9337:1;:79;9333:314;;9432:79;;;;;9557:66;889;9536:11;;:88;9532:92;;9333:314;9690:66;9678:1;:79;9674:314;;9773:79;;;;;9898:66;889;9877:11;;:88;9873:92;;9674:314;10031:66;10019:1;:79;10015:314;;10114:79;;;;;10239:66;889;10218:11;;:88;10214:92;;10015:314;10372:66;10360:1;:79;10356:314;;10455:79;;;;;10580:66;10467;10559:11;;:88;10555:92;;10356:314;10715:66;10703:1;:79;10699:318;;10798:79;;;;;10925:66;889;10904:11;;:88;10900:92;;10699:318;11063:66;11051:1;:79;11047:320;;11146:79;;;;;11274:66;889;11253:11;;:88;11249:92;;11047:320;11414:66;11402:1;:79;11398:322;;11497:79;;;;;11626:66;889;11605:11;;:88;11601:92;;11398:322;11885:11;;;;-1:-1:-1;11885:11:8;;-1:-1:-1;889:66:8;11910:5;;;:15;;-1:-1:-1;11988:35:8;11945:39;;;11940:45;;:83;11935:88;;;;889:66;12033:1;12029;:5;:15;;;;;;12025:19;;12136:35;12131:1;12093:35;:39;12088:1;:45;:83;;;;;;12083:88;;;;889:66;12181:1;12177;:5;:15;;;;;;12173:19;;12284:35;12279:1;12241:35;:39;12236:1;:45;:83;;;;;;12231:88;;;;889:66;12329:1;12325;:5;:15;;;;;;12321:19;;12432:35;12427:1;12389:35;:39;12384:1;:45;:83;;;;;;12379:88;;;;889:66;12477:1;12473;:5;:15;;;;;;12469:19;;12580:35;12575:1;12537:35;:39;12532:1;:45;:83;;;;;;12527:88;;;;889:66;12625:1;12621;:5;:15;;;;;;12617:19;;12728:35;12723:1;12685:35;:39;12680:1;:45;:83;;;;;;12675:88;;;;889:66;12773:1;12769;:5;:15;;;;;;12765:19;;12876:35;12871:1;12833:35;:39;12828:1;:45;:83;;;;;;12823:88;;;;889:66;12921:1;12917;:5;:15;;;;;;12913:19;;13024:35;13019:1;12981:35;:39;12976:1;:45;:83;;;;;;12971:88;;;;7956:5160;;;;;;:::o;13213:5613::-;13259:8;1548:75;13283:15;;13279:105;;;-1:-1:-1;13372:1:8;13365:8;;13279:105;13397:6;13393:51;;-1:-1:-1;889:66:8;13419:14;;13393:51;1488:1;13457;:15;13453:77;;;13489:30;;;;;;;;;;;13453:77;889:66;13999;13995:70;;14079:5;;;:15;;;14105:18;14101:22;;14096:27;;;;;13995:70;;14163:5;;;:15;14159:19;;14185:1;14189:18;14185:22;14180:27;;;;889:66;14251:1;14247;:5;:15;;;;;;14243:19;;14269:1;14273:18;14269:22;14264:27;;;;889:66;14335:1;14331;:5;:15;;;;;;14327:19;;14353:1;14357:18;14353:22;14348:27;;;;889:66;14419:1;14415;:5;:15;;;;;;14411:19;;14437:1;14441:18;14437:22;14432:27;;;;889:66;14503:1;14499;:5;:15;;;;;;14495:19;;14521:1;14525:18;14521:22;14516:27;;;;889:66;14587:1;14583;:5;:15;;;;;;14579:19;;14605:1;14609:18;14605:22;14600:27;;;;889:66;14671:1;14667;:5;:15;;;;;;14663:19;;14689:1;14693:18;14689:22;14684:27;;;;889:66;14755:1;14751;:5;:15;;;;;;14747:19;;14773:1;14777:18;14773:22;14768:27;;;;889:66;14839:1;14835;:5;:15;;;;;;14831:19;;14857:1;14861:18;14857:22;14852:27;;;;889:66;14923:1;14919;:5;:15;;;;;;14915:19;;14941:1;14945:18;14941:22;14936:27;;;;889:66;15007:1;15003;:5;:15;;;;;;14999:19;;15025:1;15029:18;15025:22;15020:27;;;;889:66;15091:1;15087;:5;:15;;;;;;15083:19;;15109:1;15113:18;15109:22;15104:27;;;;889:66;15175:1;15171;:5;:15;;;;;;15167:19;;15193:1;15197:18;15193:22;15188:27;;;;889:66;15259:1;15255;:5;:15;;;;;;15251:19;;15277:1;15281:18;15277:22;15272:27;;;;889:66;15343:1;15339;:5;:15;;;;;;15335:19;;15361:1;15365:18;15361:22;15356:27;;;;889:66;15427:1;15423;:5;:15;;;;;;15419:19;;15445:1;15449:18;15445:22;15440:27;;;;889:66;15511:1;15507;:5;:15;;;;;;15503:19;;15529:1;15533:18;15529:22;15524:27;;;;889:66;15595:1;15591;:5;:15;;;;;15825:2;;;;;;15679:18;15591:15;;;15608:27;;;15675:22;:26;;889:66;15675:36;;15591:15;-1:-1:-1;15872:66:8;15861:78;;15860:85;15856:304;;16069:66;15976;15965:78;;:171;15961:175;;15856:304;16204:66;16193:78;;16192:85;16188:304;;16401:66;16308;16297:78;;:171;16293:175;;16188:304;16535:66;16524:78;;16523:85;16519:303;;16732:66;16639;16628:78;;:171;16624:175;;16519:303;16865:66;16854:78;;16853:85;16849:303;;17062:66;16969;16958:78;;:171;16954:175;;16849:303;17195:66;17184:78;;17183:85;17179:303;;17392:66;17299;17288:78;;:171;17284:175;;17179:303;17525:66;17514:78;;17513:85;17509:303;;17722:66;17629;17618:78;;:171;17614:175;;17509:303;17857:66;17846:78;;17845:85;17841:305;;18054:66;17961;17950:78;;:171;17946:175;;17841:305;18192:66;18181:78;;18180:85;18176:306;;18389:66;18296;18285:78;;:171;18281:175;;18176:306;18529:66;18518:78;;18517:85;18513:307;;18726:66;18633;18622:78;;:171;18618:175;;18513:307;13213:5613;;;;;:::o;5907:942:4:-;6107:6;6129:10;6142:31;6170:1;6142:20;:31::i;:::-;6129:44;;6183:10;6196:65;6239:21;6258:1;6239:5;:14;;;:18;;:21;;;;:::i;:::-;6196:38;6231:2;6196:30;6224:1;6196:23;6204:5;:14;;;6196:3;:7;;:23;;;;:::i;:65::-;6183:78;;6272:12;6287:132;6317:92;6407:1;6317:72;6387:1;6317:52;6366:2;6317:31;6345:1;6317:20;:31::i;:92::-;6287:12;:3;:10;:12::i;:132::-;6272:147;;6429:12;6446:82;6524:3;6446:60;:42;6482:5;6446:18;:16;:18::i;:42::-;:58;:60::i;:82::-;6444:85;;6429:100;;6541:12;6566:1;6557:5;:10;;6556:121;;6609:68;6649:14;6651:5;6650:6;;6649:12;:14::i;6609:68::-;6556:121;;;6583:11;:5;:9;:11::i;:::-;6541:136;-1:-1:-1;6688:12:4;6703:60;6751:11;:3;6759:2;6751:11;:7;:11;:::i;:::-;6703:30;6704:4;;;;6727:5;6703:30;:23;:30;:::i;:60::-;6688:75;;6774:12;6789:31;6806:6;6814:5;6789:16;:31::i;6855:544::-;7077:6;;7114:27;7120:20;7126:13;:5;7136:2;7126:13;:9;:13;:::i;:::-;7120:1;;:20;:5;:20;:::i;:::-;7114:1;;:27;:5;:27;:::i;:::-;7099:42;-1:-1:-1;7151:12:4;7166:19;7172:12;:1;7178:5;7172:12;:5;:12;:::i;7166:19::-;7151:34;-1:-1:-1;7198:12:4;7213:21;:16;:5;7151:34;7213:16;:9;:16;:::i;:21::-;7198:36;;7247:12;7262:49;7305:5;7262:38;7285:5;:14;;;7262:18;:16;:18::i;:49::-;7247:64;;7321:12;7336:34;7363:6;7336:22;7352:5;7336:11;:5;:9;:11::i;:34::-;7321:49;6855:544;-1:-1:-1;;;;;;;;;;;;;6855:544:4:o;7469:688::-;7708:6;;7745:11;:3;7753:2;7745:11;:7;:11;:::i;:::-;7730:26;;7766:12;7781:115;7813:73;7882:3;7813:51;7849:5;:14;;;7813:18;:16;:18::i;:73::-;7781:14;;;;;:115;:18;:115;:::i;:::-;7766:130;;7906:12;7921:118;7957:72;8026:2;7957:51;7993:5;:14;;;7957:18;:16;:18::i;:72::-;7921:18;:16;:18::i;:118::-;7906:133;-1:-1:-1;8049:12:4;8064:16;:5;7906:133;8064:16;:9;:16;:::i;:::-;8049:31;;8105:5;8097;:13;:53;;8145:5;8097:53;;;-1:-1:-1;8125:5:4;;8090:60;-1:-1:-1;;;;;;;;;;;7469:688:4:o;11103:442::-;11234:27;;11290:10;:2;11297;11290:10;:6;:10;:::i;:::-;11277:23;;11310:10;11323:43;11351:1;11362:2;11323:20;:43::i;:::-;11310:56;;11376:10;11389:96;11410:65;11435:26;11458:2;11435:18;:16;:18::i;:26::-;11410:3;;:65;:7;:65;:::i;:::-;11389:3;;:96;:7;:96;:::i;:::-;11376:109;;11501:10;11503:3;11507;11501:10;;;;;;;;;;;;;;;;11529:9;;;;11103:442;-1:-1:-1;;;;;11103:442:4:o;8457:755::-;8634:12;8648:9;8678:27;8686:2;8690:5;:14;;;8678:7;:27::i;:::-;8673:32;;8716:12;8731:152;8788:81;8865:3;8788:55;8828:5;:14;;;8788:18;:16;:18::i;:81::-;8731:14;;;;:22;;8750:2;8731:22;:18;:22;:::i;:152::-;8716:167;;8893:12;8908:156;8945:105;9047:2;8945:80;9022:2;8945:55;8985:5;:14;;;8945:18;:16;:18::i;:105::-;8908:2;;:156;:19;:156;:::i;:::-;8893:171;-1:-1:-1;9074:9:4;9086:24;8893:171;9086:13;:2;9093:5;9086:13;:6;:13;:::i;:24::-;9074:36;;9137:2;9129:5;:10;:47;;9174:2;9129:47;;;9154:5;9129:47;9121:55;-1:-1:-1;;;;8457:755:4;;;;;;;;:::o;9583:821::-;9792:12;9818;9844;9870;9931;9946:17;9956:2;9960;9946:9;:17::i;:::-;9931:32;;9973:11;9988:30;9996:5;10003;:14;;;9988:7;:30::i;:::-;9973:45;-1:-1:-1;10040:12:4;10055:22;10063:13;:2;10070:5;10063:13;:6;:13;:::i;:::-;10055:3;;:22;:7;:22;:::i;:::-;10040:37;;10099:5;10091:4;:13;10087:311;;10145:5;10168:2;10188:4;10210:27;10218:2;10222:5;:14;;;10210:7;:27::i;:::-;10120:131;;;;;;;;;;;;;10087:311;-1:-1:-1;10307:2:4;;-1:-1:-1;10327:5:4;;-1:-1:-1;10350:2:4;;-1:-1:-1;10370:4:4;-1:-1:-1;9583:821:4;;;;;;;;;;;;:::o;10410:490::-;10588:6;;10625:77;10682:19;10690:10;:2;10697;10690:10;:6;:10;:::i;:::-;10682:3;;:19;:7;:19;:::i;:::-;10625:39;10653:10;:2;10660;10653:10;:6;:10;:::i;:::-;10625;:2;10632;10625:10;:6;:10;:::i;:77::-;10610:92;-1:-1:-1;10712:12:4;10727:60;10768:18;10775:10;:2;10782;10775:10;:6;:10;:::i;:::-;10768:2;;:18;:6;:18;:::i;:::-;10727:23;:2;10747;10727:23;:19;:23;:::i;:60::-;10712:75;-1:-1:-1;10797:12:4;10812:16;:5;10712:75;10812:16;:9;:16;:::i;:::-;10797:31;;10854:2;10846:5;:10;:47;;10891:2;10846:47;;;10871:5;10839:54;-1:-1:-1;;;;;;;;;10410:490:4:o;10906:191::-;10994:45;11022:2;11034:3;10994:20;:45::i;:::-;10989:2;:50;10985:106;;;11055:25;;;;;;;;;;;7727:138:8;7780:8;7811:1;7807;:5;:51;;798:34;7840:1;7839:2;;:18;7837:21;;7807:51;;;-1:-1:-1;798:34:8;7816:17;;7727:138::o;6809:216::-;6860:8;6903:1;6891;6884:21;6880:101;;;6921:49;;;;;;;;;;;6880:101;6994:24;7006:1;889:66;6994:4;:24::i;6385:97::-;6435:8;6459:16;6464:1;889:66;6459:4;:16::i;2024:92::-;2073:8;2100:9;2104:1;2107;2100:3;:9::i;1912:106::-;1968:8;2001:1;1996;:6;;1995:16;;2010:1;1995:16;;;-1:-1:-1;2006:1:8;;1912:106;-1:-1:-1;1912:106:8:o;8163:288:4:-;8261:6;8283:12;8298:73;8334:27;8357:3;8334:18;:16;:18::i;8298:73::-;8283:88;;8381:12;8396:9;:4;:7;:9::i;:::-;8381:24;-1:-1:-1;8422:22:4;:16;:5;8381:24;8422:16;:9;:16;:::i;:22::-;8415:29;8163:288;-1:-1:-1;;;;;8163:288:4:o;9317:259::-;9392:6;9421:148;9536:32;9564:2;9536:20;:32::i;:::-;9421:97;9478:39;9485:31;9513:1;9485:20;:31::i;:::-;9478:2;;:39;:6;:39;:::i;:::-;9421;9428:31;9456:1;9428:20;:31::i;:::-;9421:2;;:39;:6;:39;:::i;331:14937::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;32386:42;32375:54;;32958:35;;32948:2;;33007:1;;32997:12;279:241;;383:2;371:9;362:7;358:23;354:32;351:2;;;-1:-1;;389:12;351:2;451:53;496:7;472:22;451:53;;527:366;;;648:2;636:9;627:7;623:23;619:32;616:2;;;-1:-1;;654:12;616:2;716:53;761:7;737:22;716:53;;;706:63;;824:53;869:7;806:2;849:9;845:22;824:53;;;814:63;;610:283;;;;;;900:491;;;;1038:2;1026:9;1017:7;1013:23;1009:32;1006:2;;;-1:-1;;1044:12;1006:2;85:6;72:20;97:33;124:5;97:33;;;1096:63;-1:-1;1196:2;1235:22;;72:20;97:33;72:20;97:33;;;1000:391;;1204:63;;-1:-1;;;1304:2;1343:22;;;;209:20;;1000:391;1547:113;32386:42;32375:54;1618:37;;1612:48;13982:213;32386:42;32375:54;;;;1618:37;;14100:2;14085:18;;14071:124;14202:340;32386:42;32375:54;;;1477:58;;32375:54;;14528:2;14513:18;;1618:37;14356:2;14341:18;;14327:215;14549:675;32386:42;32375:54;;;1477:58;;32375:54;;;14960:2;14945:18;;1618:37;32375:54;;;;15043:2;15028:18;;1618:37;15126:2;15111:18;;1847:36;;;;15209:3;15194:19;;1847:36;;;;14787:3;14772:19;;14758:466;15231:443;32386:42;32375:54;;;;1477:58;;15579:2;15564:18;;1847:36;;;;15660:2;15645:18;;1847:36;15409:2;15394:18;;15380:294;15681:1631;32209:13;;32202:21;1732:34;;32386:42;32375:54;;16304:2;16289:18;;1618:37;16145:3;16130:19;;16319:72;16387:2;16372:18;;16363:6;16319:72;;;16468:2;16453:18;;1847:36;;;;16549:3;16534:19;;1847:36;;;;16633:3;16618:19;;1847:36;;;;16715:3;16700:19;;1847:36;;;;16799:3;16784:19;;1847:36;;;;16881:3;16866:19;;1847:36;;;;16963:3;16948:19;;1847:36;17046:3;17031:19;;1847:36;17131:3;17116:19;;1847:36;17214:3;17199:19;;1847:36;17297:3;17282:19;;;1847:36;16116:1196;;-1:-1;;;16116:1196;17319:316;1847:36;;;17621:2;17606:18;;1847:36;17461:2;17446:18;;17432:203;17642:514;17859:2;17873:47;;;2120:2;17844:18;;;31977:19;2156:66;32017:14;;;2136:87;32026:4;18127:18;;1847:36;;;;2242:12;;;17830:326;18163:407;18354:2;18368:47;;;2493:2;18339:18;;;31977:19;2529:66;32017:14;;;2509:87;2615:12;;;18325:245;18577:407;18768:2;18782:47;;;2866:2;18753:18;;;31977:19;2902:66;32017:14;;;2882:87;2988:12;;;18739:245;18991:407;19182:2;19196:47;;;3239:2;19167:18;;;31977:19;3275:66;32017:14;;;3255:87;3361:12;;;19153:245;19405:407;19596:2;19610:47;;;3612:2;19581:18;;;31977:19;3648:66;32017:14;;;3628:87;3734:12;;;19567:245;19819:514;20036:2;20050:47;;;3985:2;20021:18;;;31977:19;4021:66;32017:14;;;4001:87;32026:4;20304:18;;1847:36;;;;4107:12;;;20007:326;20340:407;20531:2;20545:47;;;4358:2;20516:18;;;31977:19;4394:66;32017:14;;;4374:87;4495:66;4481:12;;;4474:88;4581:12;;;20502:245;20754:407;20945:2;20959:47;;;4832:2;20930:18;;;31977:19;4868:66;32017:14;;;4848:87;4954:12;;;20916:245;21168:407;21359:2;21373:47;;;5205:2;21344:18;;;31977:19;5241:66;32017:14;;;5221:87;5327:12;;;21330:245;21582:407;21773:2;21787:47;;;5578:2;21758:18;;;31977:19;5614:66;32017:14;;;5594:87;5715:66;5701:12;;;5694:88;5801:12;;;21744:245;21996:407;22187:2;22201:47;;;6052:2;22172:18;;;31977:19;6088:66;32017:14;;;6068:87;6174:12;;;22158:245;22410:514;22627:2;22641:47;;;6425:2;22612:18;;;31977:19;6461:66;32017:14;;;6441:87;32026:4;22895:18;;1847:36;;;;6547:12;;;22598:326;22931:514;23148:2;23162:47;;;6798:2;23133:18;;;31977:19;6834:66;32017:14;;;6814:87;32026:4;23416:18;;1847:36;;;;6920:12;;;23119:326;23452:514;23669:2;23683:47;;;7171:2;23654:18;;;31977:19;7207:66;32017:14;;;7187:87;32026:4;23937:18;;1847:36;;;;7293:12;;;23640:326;23973:514;24190:2;24204:47;;;7544:2;24175:18;;;31977:19;7580:66;32017:14;;;7560:87;32026:4;24458:18;;1847:36;;;;7666:12;;;24161:326;24494:407;24685:2;24699:47;;;7917:2;24670:18;;;31977:19;7953:66;32017:14;;;7933:87;8054:66;8040:12;;;8033:88;8140:12;;;24656:245;24908:407;25099:2;25113:47;;;8391:2;25084:18;;;31977:19;8427:66;32017:14;;;8407:87;8513:12;;;25070:245;25322:514;25539:2;25553:47;;;8764:2;25524:18;;;31977:19;8800:66;32017:14;;;8780:87;32026:4;25807:18;;1847:36;;;;8886:12;;;25510:326;25843:407;26034:2;26048:47;;;9137:2;26019:18;;;31977:19;9173:66;32017:14;;;9153:87;9259:12;;;26005:245;26257:514;26474:2;26488:47;;;9510:2;26459:18;;;31977:19;9546:66;32017:14;;;9526:87;32026:4;26742:18;;1847:36;;;;9632:12;;;26445:326;26778:407;26969:2;26983:47;;;9883:2;26954:18;;;31977:19;9919:66;32017:14;;;9899:87;10005:12;;;26940:245;27192:407;27383:2;27397:47;;;10256:2;27368:18;;;31977:19;10292:66;32017:14;;;10272:87;10378:12;;;27354:245;27606:407;27797:2;27811:47;;;10629:2;27782:18;;;31977:19;10665:66;32017:14;;;10645:87;10766:66;10752:12;;;10745:88;10852:12;;;27768:245;28020:514;28237:2;28251:47;;;11103:2;28222:18;;;31977:19;11139:66;32017:14;;;11119:87;32026:4;28505:18;;1847:36;;;;11225:12;;;28208:326;28541:514;28758:2;28772:47;;;11476:2;28743:18;;;31977:19;11512:66;32017:14;;;11492:87;32026:4;29026:18;;1847:36;;;;11598:12;;;28729:326;29062:407;29253:2;29267:47;;;11849:2;29238:18;;;31977:19;11885:66;32017:14;;;11865:87;11971:12;;;29224:245;29476:407;29667:2;29681:47;;;12222:2;29652:18;;;31977:19;12258:66;32017:14;;;12238:87;12344:12;;;29638:245;29890:407;30081:2;30095:47;;;12595:2;30066:18;;;31977:19;12631:66;32017:14;;;12611:87;12717:12;;;30052:245;30304:407;30495:2;30509:47;;;12968:2;30480:18;;;31977:19;13004:66;32017:14;;;12984:87;13090:12;;;30466:245;30718:407;30909:2;30923:47;;;13341:2;30894:18;;;31977:19;13377:66;32017:14;;;13357:87;13463:12;;;30880:245;31132:514;31349:2;31363:47;;;13714:2;31334:18;;;31977:19;13750:66;32017:14;;;13730:87;32026:4;31617:18;;1847:36;;;;13836:12;;;31320:326;31653:213;1847:36;;;31771:2;31756:18;;31742:124;32899:117;32386:42;32986:5;32375:54;32961:5;32958:35;32948:2;;33007:1;;32997:12"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"libs/LibToken.sol": {
			"id": 11
		},
		"core/State.sol": {
			"id": 3
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"interfaces/IERC20.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n        if (state.t == _getCurrentBlockNumber()) {\n            state.fee = state.feeHigh;\n        }\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        if (price < 0)  {\n            revert('price cannot be < 0');\n        } else if (price == 0) {\n            revert('price cannot be zero');\n        }\n\n        // Compute about of `tokenB`\n\n\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = -deltaB;\n\n        if (deltaB >= 0) {\n            revert('deltaB is greater or equal to zero');\n        }\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000));\n        if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n            deltaB = (deltaB < 0) ? deltaB : 0;\n        }\n\n        // Round up to favor the contract\n        // We impose a dust amount of 1/10^6. This is the minimum token amount.\n        deltaB += LibFixedMath.toFixed(int256(1), int256(10**6));\n\n        if (deltaB >= 0) {\n            revert('Tried to purchase too much');\n        }\n\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA.mul(state.eToKappa) < pBarA) {\n            newPBarA = pBarA.div(state.eToKappa);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _rhoPow(\n        int256 base,\n        int256 rho\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = LibFixedMath.one().div(\n            LibFixedMath.one().sub(rho)\n        );\n        int256 term2 = base.ln();\n        return term1.mul(term2).exp();\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = _rhoPow(rl, state.rhoRatio);\n\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis =  _rhoPow(term1, state.rhoRatio);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                _rhoPow(rh, state.rhoRatio)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n    {\n        if (rl < LibFixedMath.toFixed(int256(95), int256(100))) {\n            revert('Order too large');\n        }\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    event VALUE(\n        string description,\n        int256 val\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        emit VALUE(\"delta after step0\", delta);\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        emit VALUE(\"rl after step 1\", rl);\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n        emit VALUE(\"rh after step 2\", rh);\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n            emit VALUE(\"rh after step 3\", rh);\n            emit VALUE(\"yl after step 3\", yl);\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                emit VALUE(\"rl after step 4\", rl);\n                emit VALUE(\"rh after step 4\", rh);\n                emit VALUE(\"yl after step 4\", yl);\n                emit VALUE(\"yh after step 4\", yh);\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n\n                    emit VALUE(\"rl after step 5\", rl);\n                }\n            }\n        }\n\n        // Step 6\n        _computeStep6(rl);\n\n        emit VALUE(\"final price\", rl.mul(pA));\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        int256 feeHigh;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n\n    function getRanges() internal pure returns (int256,int256,int256,int256) {\n        return (LN_MIN_VAL, LN_MAX_VAL, EXP_MIN_VAL, EXP_MAX_VAL);\n    }\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    function pow(int256 base, int256 power) internal pure returns (int256) {\n        // KEY INSIGHT --> e^(0.5*ln(7)) - 1/e^(0.5*ln(1/7))\n        // So I think x^a = e^(a*ln(x)) = 1/e^(a*ln(1/x))\n\n        // 1 Sanity check on `ln`\n        int256 ePower;\n        bool invert;\n        if (base <= 0) {\n            revert('Invalid ln() value');\n        } else if (base < FIXED_1) {\n            ePower = mul(power, ln(base));\n        } else {\n            // Make smaller\n            ePower = mul(power, ln(div(FIXED_1, base)));\n            invert = true;\n        }\n\n        // 2 Sanity check on ePower\\\n        if (ePower > 0) {\n            invert = invert ? false : true;\n            ePower = abs(ePower);\n        }\n\n        // Comput e^ePower\n        // Key Insight --> e^x = 1/e^(-x)\n        /*\n        int256 exp;\n        if (ePower < FIXED_1) {\n            return exp(ePower);\n        } else {\n            return div(FIXED_1, )\n        }\n        */\n        return exp(ePower);\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n"
	},
	"sourceTreeHashHex": "0x32f005b7e24463e1b7cc9e20b10e3595472a31dc7a5e8af8719419e1a66fffb7",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}