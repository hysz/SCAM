{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50611d93806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df791e5014610030575b600080fd5b61004361003e366004611a0a565b610045565b005b61004d61197d565b610055610414565b90506000610062836104a7565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156100c65750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156100e5575050505060408201516060830151608084015160016101ae565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614801561013d5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b1561017357856060015193508560400151925061016c8660800151610160610503565b9063ffffffff61051716565b91506101ae565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b16565b60405180910390fd5b6000806101be8686868a8c610546565b9150915060006101ff6101e38a60e001516101d7610503565b9063ffffffff61064b16565b6101f38a8563ffffffff6106bb16565b9063ffffffff6106bb16565b905061021260008263ffffffff61064b16565b905060006102246001620186a061070e565b905060008213156102385760009150610261565b80610249888463ffffffff61072d16565b136102615761025e818863ffffffff61064b16565b91505b60006102858b6101000151610274610739565b8d6101400151888f6080015161073d565b6101608c015190915061029e908863ffffffff6106bb16565b8113156102c2576101608b01516102bb908863ffffffff6106bb16565b90506102f6565b6102d7876101f38d6101600151610160610503565b8112156102f6576102f3876101f38d6101600151610160610503565b90505b7f2200c1c87d346032bc0d16306152cc3e6e4dfa6d004ce38efa3f38f6f422d9e38484838860405161032b9493929190611aa1565b60405180910390a161033b610739565b6101008c0152851561037d57610357898b63ffffffff61072d16565b60408c015261036c888463ffffffff61072d16565b60608c015260808b018190526103b9565b61038d888463ffffffff61072d16565b60408c01526103a2898b63ffffffff61072d16565b60608c01526103b381610160610503565b60808c01525b6103c28b61081b565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338f8f8d876000036040516103fc959493929190611a4a565b60405180910390a15050505050505050505050505050565b61041c61197d565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600a54610120820152600b54610140820152600c5461016082015290565b6000808212156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b84565b6104fd826f800000000000000000000000000000006108c8565b92915050565b6f8000000000000000000000000000000090565b6000610537610531846a80000000000000000000006108c8565b8361093e565b65010000000000029392505050565b6000806105598787878660c00151610a0d565b91506000828161056f8a8863ffffffff61072d16565b905060005b601481101561063b5760006105898585610b06565b905060006105a56105a0838d63ffffffff61051716565b610b2e565b905060006105dc6105bc8c8563ffffffff6106bb16565b6105d0856101f3898763ffffffff6106bb16565b9063ffffffff61072d16565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e82848360405161061193929190611a8b565b60405180910390a18c8113156106295782955061062d565b8296505b505050806001019050610574565b5091925050509550959350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156106a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c86565b6106b48383600003610bdd565b9392505050565b60006f8000000000000000000000000000000082156106ed575065010000000000909105906a80000000000000000000005b60006106f985856108c8565b905081818161070457fe5b0595945050505050565b60006106b4610531846f800000000000000000000000000000006108c8565b60006106b48383610bdd565b4390565b60008061074b8787036104a7565b9050600061077061076b61075e88610c53565b849063ffffffff6106bb16565b61133d565b90506000610780826101d7610503565b90506000610794878363ffffffff6106bb16565b905060006107a8878563ffffffff6106bb16565b905060006107d46107bf858b63ffffffff61051716565b6107cf878b63ffffffff61051716565b61072d565b905060006107e482610160610503565b905060006108096107f5600261194b565b610160846105d0898963ffffffff61072d16565b9e9d5050505050505050505050505050565b80516000805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560208301516001805491909316911617905560408101516002556060810151600355608081015160045560a081015160055560c081015160065560e0810151600755610100810151600855610120810151600a55610140810151600b556101600151600c55565b60008215806108d5575081155b156108e2575060006104fd565b50818102818382816108f057fe5b0514158061090757508282828161090357fe5b0514155b156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c18565b600081610977576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611cbd565b7f8000000000000000000000000000000000000000000000000000000000000000831480156109c55750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611cf4565b818381610a0557fe5b059392505050565b600080610a20848763ffffffff6106bb16565b90506000610a34868363ffffffff61051716565b90506000610a48838863ffffffff61051716565b90506000610a58866101d7610503565b90506000610a64610503565b841215610a8257610a7b61076b836101f387610c53565b9050610aa0565b610a9d610a9561076b846101f387610c53565b610160610503565b90505b610ab0818963ffffffff6106bb16565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a610ae086611967565b604051610af1959493929190611abc565b60405180910390a19998505050505050505050565b60006106b4610b1e610b16610503565b6105d0610503565b610160858563ffffffff61072d16565b600080610b41838063ffffffff6106bb16565b90506000610b55848363ffffffff6106bb16565b90506000610b69828063ffffffff6106bb16565b90506000610b7d828063ffffffff6106bb16565b90506000610b91828063ffffffff6106bb16565b90506000610ba5828063ffffffff6106bb16565b90506000610bb9828063ffffffff6106bb16565b90506000610bcd828863ffffffff6106bb16565b985050505050505050505b919050565b818101600083128015610bf05750600082125b8015610bfb57508281135b80610c1c5750600083138015610c115750600082135b8015610c1c57508281125b156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c4f565b60006f80000000000000000000000000000000821315610c9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b4d565b60008213610cd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611adf565b6f80000000000000000000000000000000821415610cf957506000610bd8565b640733048c5a8213610d2c57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610bd8565b60008060006a01c8464f761647600000008513610d8b577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610de9577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610e4b577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610eaf577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610f13577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610f77577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610fdb577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c000000000000000000851361103f577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d85136110a3577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161111957fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161114a57fe5b05840193506f800000000000000000000000000000008183028161116a57fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161119b57fe5b05840193506f80000000000000000000000000000000818302816111bb57fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816111ec57fe5b05840193506f800000000000000000000000000000008183028161120c57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161123d57fe5b05840193506f800000000000000000000000000000008183028161125d57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161128e57fe5b05840193506f80000000000000000000000000000000818302816112ae57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816112df57fe5b05840193506f80000000000000000000000000000000818302816112ff57fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161133057fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe01000000000000000000000000000000082121561136f57506000610bd8565b8161138b57506f80000000000000000000000000000000610bd8565b60008213156113c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611be1565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161143257fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161145f57fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161148b57fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816114b757fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816114e357fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161150e57fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161153957fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161156357fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161158d57fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816115b757fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816115e057fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161160957fe5b05905080621c638002830192506f800000000000000000000000000000008282028161163157fe5b059050806201c63802830192506f800000000000000000000000000000008282028161165957fe5b05905080611ab802830192506f800000000000000000000000000000008282028161168057fe5b0590508061017c02830192506f80000000000000000000000000000000828202816116a757fe5b05905080601402830192506f80000000000000000000000000000000828202816116cd57fe5b600095909503946721c3677c82b400009190059384010582016f800000000000000000000000000000000192905070100000000000000000000000000000000084161561173c577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b70080000000000000000000000000000000084161561177e577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156117c057701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611802577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156118445770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611884576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156118c4576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615611904576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611944576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006104fd826f800000000000000000000000000000006108c8565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611a1e578283fd5b8335611a2981611d2b565b92506020840135611a3981611d2b565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff81168114611d4d57600080fd5b5056fea365627a7a72315820b35687e5ad8b8c75958cb90a18628fe974798a7d84a38ba68d482b322adb42746c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D93 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0A JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x197D JUMP JUMPDEST PUSH2 0x55 PUSH2 0x414 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x62 DUP4 PUSH2 0x4A7 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xC6 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xE5 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1AE JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x13D JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x173 JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH2 0x16C DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BE DUP7 DUP7 DUP7 DUP11 DUP13 PUSH2 0x546 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1FF PUSH2 0x1E3 DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST PUSH2 0x1F3 DUP11 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH2 0x212 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x224 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x70E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x261 JUMP JUMPDEST DUP1 PUSH2 0x249 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SGT PUSH2 0x261 JUMPI PUSH2 0x25E DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x285 DUP12 PUSH2 0x100 ADD MLOAD PUSH2 0x274 PUSH2 0x739 JUMP JUMPDEST DUP14 PUSH2 0x140 ADD MLOAD DUP9 DUP16 PUSH1 0x80 ADD MLOAD PUSH2 0x73D JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x29E SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x2C2 JUMPI PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x2BB SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2F6 JUMP JUMPDEST PUSH2 0x2D7 DUP8 PUSH2 0x1F3 DUP14 PUSH2 0x160 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x2F6 JUMPI PUSH2 0x2F3 DUP8 PUSH2 0x1F3 DUP14 PUSH2 0x160 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH32 0x2200C1C87D346032BC0D16306152CC3E6E4DFA6D004CE38EFA3F38F6F422D9E3 DUP5 DUP5 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH2 0x32B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x33B PUSH2 0x739 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x37D JUMPI PUSH2 0x357 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x36C DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH1 0x80 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x38D DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x3A2 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x3B3 DUP2 PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE JUMPDEST PUSH2 0x3C2 DUP12 PUSH2 0x81B JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP16 DUP16 DUP14 DUP8 PUSH1 0x0 SUB PUSH1 0x40 MLOAD PUSH2 0x3FC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0x197D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B84 JUMP JUMPDEST PUSH2 0x4FD DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x537 PUSH2 0x531 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST DUP4 PUSH2 0x93E JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x559 DUP8 DUP8 DUP8 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0xA0D JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 DUP2 PUSH2 0x56F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 PUSH2 0x589 DUP6 DUP6 PUSH2 0xB06 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5A5 PUSH2 0x5A0 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0xB2E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5DC PUSH2 0x5BC DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST PUSH2 0x5D0 DUP6 PUSH2 0x1F3 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0x629 JUMPI DUP3 SWAP6 POP PUSH2 0x62D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x574 JUMP JUMPDEST POP SWAP2 SWAP3 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C86 JUMP JUMPDEST PUSH2 0x6B4 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xBDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x6ED JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x6F9 DUP6 DUP6 PUSH2 0x8C8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x704 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0x531 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 DUP4 DUP4 PUSH2 0xBDD JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x74B DUP8 DUP8 SUB PUSH2 0x4A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x770 PUSH2 0x76B PUSH2 0x75E DUP9 PUSH2 0xC53 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x780 DUP3 PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x794 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7A8 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D4 PUSH2 0x7BF DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0x7CF DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0x72D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7E4 DUP3 PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x809 PUSH2 0x7F5 PUSH1 0x2 PUSH2 0x194B JUMP JUMPDEST PUSH2 0x160 DUP5 PUSH2 0x5D0 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x7 SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0xA SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x8D5 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x8E2 JUMPI POP PUSH1 0x0 PUSH2 0x4FD JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x8F0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x907 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x903 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C18 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x977 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x9C5 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xA05 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA20 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA34 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA48 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA58 DUP7 PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA64 PUSH2 0x503 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xA82 JUMPI PUSH2 0xA7B PUSH2 0x76B DUP4 PUSH2 0x1F3 DUP8 PUSH2 0xC53 JUMP JUMPDEST SWAP1 POP PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA95 PUSH2 0x76B DUP5 PUSH2 0x1F3 DUP8 PUSH2 0xC53 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xAB0 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0xAE0 DUP7 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAF1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ABC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0xB1E PUSH2 0xB16 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x5D0 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x160 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB41 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB55 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB69 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB7D DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB91 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBA5 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBB9 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCD DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xBFB JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xC1C JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xC11 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xC1C JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0xC9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B4D JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0xCD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1ADF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xCF9 JUMPI POP PUSH1 0x0 PUSH2 0xBD8 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0xD2C JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xD8B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xDE9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xE4B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xEAF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xF13 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xF77 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xFDB JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x103F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x10A3 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1119 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x114A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x116A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x119B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x11BB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x11EC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x120C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x123D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x125D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x128E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x12AE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x12DF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x12FF JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1330 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x136F JUMPI POP PUSH1 0x0 PUSH2 0xBD8 JUMP JUMPDEST DUP2 PUSH2 0x138B JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x13C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1BE1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1432 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x145F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x148B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14B7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14E3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x150E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1539 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1563 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x158D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x15B7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x15E0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1609 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1631 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1659 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1680 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x16A7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x16CD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x173C JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x177E JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x17C0 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1802 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1844 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1884 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x18C4 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1904 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1944 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FD DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A1E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1A29 DUP2 PUSH2 0x1D2B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1A39 DUP2 PUSH2 0x1D2B JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1D4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xB3 JUMP DUP8 0xE5 0xAD DUP12 DUP13 PUSH22 0x958CB90A18628FE974798A7D84A38BA68D482B322ADB TIMESTAMP PUSH21 0x6C6578706572696D656E74616CF564736F6C634300 SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "265:4522:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:4522:3;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df791e5014610030575b600080fd5b61004361003e366004611a0a565b610045565b005b61004d61197d565b610055610414565b90506000610062836104a7565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156100c65750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156100e5575050505060408201516060830151608084015160016101ae565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614801561013d5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b1561017357856060015193508560400151925061016c8660800151610160610503565b9063ffffffff61051716565b91506101ae565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b16565b60405180910390fd5b6000806101be8686868a8c610546565b9150915060006101ff6101e38a60e001516101d7610503565b9063ffffffff61064b16565b6101f38a8563ffffffff6106bb16565b9063ffffffff6106bb16565b905061021260008263ffffffff61064b16565b905060006102246001620186a061070e565b905060008213156102385760009150610261565b80610249888463ffffffff61072d16565b136102615761025e818863ffffffff61064b16565b91505b60006102858b6101000151610274610739565b8d6101400151888f6080015161073d565b6101608c015190915061029e908863ffffffff6106bb16565b8113156102c2576101608b01516102bb908863ffffffff6106bb16565b90506102f6565b6102d7876101f38d6101600151610160610503565b8112156102f6576102f3876101f38d6101600151610160610503565b90505b7f2200c1c87d346032bc0d16306152cc3e6e4dfa6d004ce38efa3f38f6f422d9e38484838860405161032b9493929190611aa1565b60405180910390a161033b610739565b6101008c0152851561037d57610357898b63ffffffff61072d16565b60408c015261036c888463ffffffff61072d16565b60608c015260808b018190526103b9565b61038d888463ffffffff61072d16565b60408c01526103a2898b63ffffffff61072d16565b60608c01526103b381610160610503565b60808c01525b6103c28b61081b565b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338f8f8d876000036040516103fc959493929190611a4a565b60405180910390a15050505050505050505050505050565b61041c61197d565b50604080516101808101825260005473ffffffffffffffffffffffffffffffffffffffff9081168252600154166020820152600254918101919091526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600a54610120820152600b54610140820152600c5461016082015290565b6000808212156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b84565b6104fd826f800000000000000000000000000000006108c8565b92915050565b6f8000000000000000000000000000000090565b6000610537610531846a80000000000000000000006108c8565b8361093e565b65010000000000029392505050565b6000806105598787878660c00151610a0d565b91506000828161056f8a8863ffffffff61072d16565b905060005b601481101561063b5760006105898585610b06565b905060006105a56105a0838d63ffffffff61051716565b610b2e565b905060006105dc6105bc8c8563ffffffff6106bb16565b6105d0856101f3898763ffffffff6106bb16565b9063ffffffff61072d16565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e82848360405161061193929190611a8b565b60405180910390a18c8113156106295782955061062d565b8296505b505050806001019050610574565b5091925050509550959350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156106a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c86565b6106b48383600003610bdd565b9392505050565b60006f8000000000000000000000000000000082156106ed575065010000000000909105906a80000000000000000000005b60006106f985856108c8565b905081818161070457fe5b0595945050505050565b60006106b4610531846f800000000000000000000000000000006108c8565b60006106b48383610bdd565b4390565b60008061074b8787036104a7565b9050600061077061076b61075e88610c53565b849063ffffffff6106bb16565b61133d565b90506000610780826101d7610503565b90506000610794878363ffffffff6106bb16565b905060006107a8878563ffffffff6106bb16565b905060006107d46107bf858b63ffffffff61051716565b6107cf878b63ffffffff61051716565b61072d565b905060006107e482610160610503565b905060006108096107f5600261194b565b610160846105d0898963ffffffff61072d16565b9e9d5050505050505050505050505050565b80516000805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560208301516001805491909316911617905560408101516002556060810151600355608081015160045560a081015160055560c081015160065560e0810151600755610100810151600855610120810151600a55610140810151600b556101600151600c55565b60008215806108d5575081155b156108e2575060006104fd565b50818102818382816108f057fe5b0514158061090757508282828161090357fe5b0514155b156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c18565b600081610977576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611cbd565b7f8000000000000000000000000000000000000000000000000000000000000000831480156109c55750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611cf4565b818381610a0557fe5b059392505050565b600080610a20848763ffffffff6106bb16565b90506000610a34868363ffffffff61051716565b90506000610a48838863ffffffff61051716565b90506000610a58866101d7610503565b90506000610a64610503565b841215610a8257610a7b61076b836101f387610c53565b9050610aa0565b610a9d610a9561076b846101f387610c53565b610160610503565b90505b610ab0818963ffffffff6106bb16565b90507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a610ae086611967565b604051610af1959493929190611abc565b60405180910390a19998505050505050505050565b60006106b4610b1e610b16610503565b6105d0610503565b610160858563ffffffff61072d16565b600080610b41838063ffffffff6106bb16565b90506000610b55848363ffffffff6106bb16565b90506000610b69828063ffffffff6106bb16565b90506000610b7d828063ffffffff6106bb16565b90506000610b91828063ffffffff6106bb16565b90506000610ba5828063ffffffff6106bb16565b90506000610bb9828063ffffffff6106bb16565b90506000610bcd828863ffffffff6106bb16565b985050505050505050505b919050565b818101600083128015610bf05750600082125b8015610bfb57508281135b80610c1c5750600083138015610c115750600082135b8015610c1c57508281125b156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611c4f565b60006f80000000000000000000000000000000821315610c9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b4d565b60008213610cd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611adf565b6f80000000000000000000000000000000821415610cf957506000610bd8565b640733048c5a8213610d2c57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610bd8565b60008060006a01c8464f761647600000008513610d8b577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513610de9577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513610e4b577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610eaf577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610f13577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610f77577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610fdb577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c000000000000000000851361103f577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d85136110a3577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161111957fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161114a57fe5b05840193506f800000000000000000000000000000008183028161116a57fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161119b57fe5b05840193506f80000000000000000000000000000000818302816111bb57fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816111ec57fe5b05840193506f800000000000000000000000000000008183028161120c57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161123d57fe5b05840193506f800000000000000000000000000000008183028161125d57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161128e57fe5b05840193506f80000000000000000000000000000000818302816112ae57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816112df57fe5b05840193506f80000000000000000000000000000000818302816112ff57fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161133057fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe01000000000000000000000000000000082121561136f57506000610bd8565b8161138b57506f80000000000000000000000000000000610bd8565b60008213156113c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611be1565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161143257fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161145f57fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161148b57fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816114b757fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816114e357fe5b059050806536e0f639b80002830192506f800000000000000000000000000000008282028161150e57fe5b05905080650618fee9f80002830192506f800000000000000000000000000000008282028161153957fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161156357fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161158d57fe5b0590508064012ebd130002830192506f80000000000000000000000000000000828202816115b757fe5b059050806317499f0002830192506f80000000000000000000000000000000828202816115e057fe5b059050806301a9d48002830192506f800000000000000000000000000000008282028161160957fe5b05905080621c638002830192506f800000000000000000000000000000008282028161163157fe5b059050806201c63802830192506f800000000000000000000000000000008282028161165957fe5b05905080611ab802830192506f800000000000000000000000000000008282028161168057fe5b0590508061017c02830192506f80000000000000000000000000000000828202816116a757fe5b05905080601402830192506f80000000000000000000000000000000828202816116cd57fe5b600095909503946721c3677c82b400009190059384010582016f800000000000000000000000000000000192905070100000000000000000000000000000000084161561173c577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b70080000000000000000000000000000000084161561177e577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b7004000000000000000000000000000000008416156117c057701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611802577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156118445770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611884576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f400000000000000000000000000000008416156118c4576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615611904576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611944576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006104fd826f800000000000000000000000000000006108c8565b6f80000000000000000000000000000000900590565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611a1e578283fd5b8335611a2981611d2b565b92506020840135611a3981611d2b565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff81168114611d4d57600080fd5b5056fea365627a7a72315820b35687e5ad8b8c75958cb90a18628fe974798a7d84a38ba68d482b322adb42746c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0A JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x197D JUMP JUMPDEST PUSH2 0x55 PUSH2 0x414 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x62 DUP4 PUSH2 0x4A7 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0xC6 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xE5 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x1AE JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x13D JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x173 JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH2 0x16C DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BE DUP7 DUP7 DUP7 DUP11 DUP13 PUSH2 0x546 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1FF PUSH2 0x1E3 DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST PUSH2 0x1F3 DUP11 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH2 0x212 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x224 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x70E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x261 JUMP JUMPDEST DUP1 PUSH2 0x249 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SGT PUSH2 0x261 JUMPI PUSH2 0x25E DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x64B AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x285 DUP12 PUSH2 0x100 ADD MLOAD PUSH2 0x274 PUSH2 0x739 JUMP JUMPDEST DUP14 PUSH2 0x140 ADD MLOAD DUP9 DUP16 PUSH1 0x80 ADD MLOAD PUSH2 0x73D JUMP JUMPDEST PUSH2 0x160 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x29E SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x2C2 JUMPI PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x2BB SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2F6 JUMP JUMPDEST PUSH2 0x2D7 DUP8 PUSH2 0x1F3 DUP14 PUSH2 0x160 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x2F6 JUMPI PUSH2 0x2F3 DUP8 PUSH2 0x1F3 DUP14 PUSH2 0x160 ADD MLOAD PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH32 0x2200C1C87D346032BC0D16306152CC3E6E4DFA6D004CE38EFA3F38F6F422D9E3 DUP5 DUP5 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH2 0x32B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x33B PUSH2 0x739 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x37D JUMPI PUSH2 0x357 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x36C DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH1 0x80 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x38D DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x3A2 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x3B3 DUP2 PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE JUMPDEST PUSH2 0x3C2 DUP12 PUSH2 0x81B JUMP JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP16 DUP16 DUP14 DUP8 PUSH1 0x0 SUB PUSH1 0x40 MLOAD PUSH2 0x3FC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0x197D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B84 JUMP JUMPDEST PUSH2 0x4FD DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x537 PUSH2 0x531 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST DUP4 PUSH2 0x93E JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x559 DUP8 DUP8 DUP8 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0xA0D JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 DUP2 PUSH2 0x56F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 PUSH2 0x589 DUP6 DUP6 PUSH2 0xB06 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5A5 PUSH2 0x5A0 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0xB2E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5DC PUSH2 0x5BC DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST PUSH2 0x5D0 DUP6 PUSH2 0x1F3 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0x629 JUMPI DUP3 SWAP6 POP PUSH2 0x62D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x574 JUMP JUMPDEST POP SWAP2 SWAP3 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C86 JUMP JUMPDEST PUSH2 0x6B4 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xBDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0x6ED JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0x6F9 DUP6 DUP6 PUSH2 0x8C8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0x704 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0x531 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 DUP4 DUP4 PUSH2 0xBDD JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x74B DUP8 DUP8 SUB PUSH2 0x4A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x770 PUSH2 0x76B PUSH2 0x75E DUP9 PUSH2 0xC53 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x780 DUP3 PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x794 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7A8 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D4 PUSH2 0x7BF DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0x7CF DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST PUSH2 0x72D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7E4 DUP3 PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x809 PUSH2 0x7F5 PUSH1 0x2 PUSH2 0x194B JUMP JUMPDEST PUSH2 0x160 DUP5 PUSH2 0x5D0 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x7 SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0xA SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH2 0x160 ADD MLOAD PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x8D5 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x8E2 JUMPI POP PUSH1 0x0 PUSH2 0x4FD JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x8F0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x907 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x903 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C18 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x977 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x9C5 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xA05 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA20 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA34 DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA48 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x517 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA58 DUP7 PUSH2 0x1D7 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA64 PUSH2 0x503 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xA82 JUMPI PUSH2 0xA7B PUSH2 0x76B DUP4 PUSH2 0x1F3 DUP8 PUSH2 0xC53 JUMP JUMPDEST SWAP1 POP PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA95 PUSH2 0x76B DUP5 PUSH2 0x1F3 DUP8 PUSH2 0xC53 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x503 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xAB0 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0xAE0 DUP7 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAF1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ABC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0xB1E PUSH2 0xB16 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x5D0 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x160 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x72D AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB41 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB55 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB69 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB7D DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB91 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBA5 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBB9 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCD DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x6BB AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xBFB JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xC1C JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xC11 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xC1C JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0xC9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1B4D JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0xCD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1ADF JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xCF9 JUMPI POP PUSH1 0x0 PUSH2 0xBD8 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0xD2C JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0xD8B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0xDE9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0xE4B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xEAF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xF13 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xF77 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xFDB JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x103F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x10A3 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1119 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x114A JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x116A JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x119B JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x11BB JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x11EC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x120C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x123D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x125D JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x128E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x12AE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x12DF JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x12FF JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1330 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x136F JUMPI POP PUSH1 0x0 PUSH2 0xBD8 JUMP JUMPDEST DUP2 PUSH2 0x138B JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x13C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x1BE1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1432 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x145F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x148B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14B7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x14E3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x150E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1539 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1563 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x158D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x15B7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x15E0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1609 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1631 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1659 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1680 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x16A7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x16CD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x173C JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x177E JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x17C0 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1802 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1844 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1884 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x18C4 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1904 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1944 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FD DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x8C8 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A1E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1A29 DUP2 PUSH2 0x1D2B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1A39 DUP2 PUSH2 0x1D2B JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1D4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xB3 JUMP DUP8 0xE5 0xAD DUP12 DUP13 PUSH22 0x958CB90A18628FE974798A7D84A38BA68D482B322ADB TIMESTAMP PUSH21 0x6C6578706572696D656E74616CF564736F6C634300 SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "265:4522:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:4522:3;;;;;;;;;;;;;;;;;;;426:2900;;;;;;;;;:::i;:::-;;;570:27;;:::i;:::-;600:18;:16;:18::i;:::-;570:48;;680:13;696:28;717:6;696:20;:28::i;:::-;843:14;;680:44;;-1:-1:-1;734:8:3;;;;;;;;830:27;;;;;;;:56;;;;;872:5;:14;;;861:25;;:7;:25;;;830:56;826:433;;;-1:-1:-1;;;;906:7:3;;;;931;;;;960:11;;;;995:4;826:433;;;1032:5;:14;;;1019:27;;:9;:27;;;:56;;;;-1:-1:-1;1061:14:3;;1050:25;;;;;;;1019:56;1016:243;;;1095:5;:7;;;1091:11;;1120:5;:7;;;1116:11;;1149:35;1172:5;:11;;;1149:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;1141:43;;1016:243;;;1215:33;;;;;;;;;;;;;;;;;;;1016:243;1289:9;1300:12;1316:105;1337:1;1352;1367:5;1386:6;1406:5;1316:7;:105::i;:::-;1288:133;;;;1469:13;1485:96;1538:33;1561:5;:9;;;1538:18;:16;:18::i;:::-;:22;:33;:22;:33;:::i;:::-;1485:26;:6;1505:5;1485:26;:19;:26;:::i;:::-;:39;:96;:39;:96;:::i;:::-;1469:112;-1:-1:-1;1600:21:3;1607:1;1469:112;1600:21;:13;:21;:::i;:::-;1591:30;;1664:14;1681:47;1709:1;1720:6;1681:20;:47::i;:::-;1664:64;;1787:1;1778:6;:10;1774:135;;;1813:1;1804:10;;1774:135;;;1852:7;1835:13;:1;1841:6;1835:13;:5;:13;:::i;:::-;:24;1831:78;;1884:14;:7;1896:1;1884:14;:11;:14;:::i;:::-;1875:23;;1831:78;1959:15;1977:161;2018:5;:7;;;2039:24;:22;:24::i;:::-;2077:5;:10;;;2101:2;2117:5;:11;;;1977:27;:161::i;:::-;2163:14;;;;1959:179;;-1:-1:-1;2163:25:3;;2182:5;2163:25;:18;:25;:::i;:::-;2152:8;:36;2148:259;;;2215:14;;;;:25;;2234:5;2215:25;:18;:25;:::i;:::-;2204:36;;2148:259;;;2271:49;2314:5;2271:38;2294:5;:14;;;2271:18;:16;:18::i;:49::-;2260:8;:60;2257:150;;;2347:49;2390:5;2347:38;2370:5;:14;;;2347:18;:16;:18::i;:49::-;2336:60;;2257:150;2422:92;2441:5;2460:6;2480:8;2502:2;2422:92;;;;;;;;;;;;;;;;;;2559:24;:22;:24::i;:::-;2549:7;;;:34;2593:285;;;;2630:13;:1;2636:6;2630:13;:5;:13;:::i;:::-;2620:7;;;:23;2667:13;:1;2673:6;2667:13;:5;:13;:::i;:::-;2657:7;;;:23;2694:11;;;:22;;;2593:285;;;2757:13;:1;2763:6;2757:13;:5;:13;:::i;:::-;2747:7;;;:23;2794:13;:1;2800:6;2794:13;:5;:13;:::i;:::-;2784:7;;;:23;2835:32;2858:8;2835:18;:16;:18::i;:32::-;2821:11;;;:46;2593:285;2912:23;2929:5;2912:16;:23::i;:::-;3170:149;3196:10;3220:9;3243:7;3272:6;3302;3301:7;;3170:149;;;;;;;;;;;;;;;;;;;426:2900;;;;;;;;;;;;;;:::o;275:433:2:-;337:27;;:::i;:::-;-1:-1:-1;380:14:2;;;;;;;;388:6;380:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;275:433;:::o;4349:216:7:-;4400:8;4443:1;4431;4424:21;4420:101;;;4461:49;;;;;;;;;;;4420:101;4534:24;4546:1;794:66;4534:4;:24::i;:::-;4530:28;4349:216;-1:-1:-1;;4349:216:7:o;1581:76::-;794:66;;1581:76::o;2539:128::-;2595:8;2619:33;2624:24;2629:1;2632:15;2624:4;:24::i;:::-;2650:1;2619:4;:33::i;:::-;2655:5;2619:41;;2539:128;-1:-1:-1;;;2539:128:7:o;3418:1244:3:-;3593:9;3604:8;3722:125;3774:1;3789;3804:5;3823;:14;;;3722:38;:125::i;:::-;3717:130;-1:-1:-1;3893:17:3;3717:130;3893:17;4024:13;:1;4030:6;4024:13;:5;:13;:::i;:::-;4003:34;-1:-1:-1;4064:9:3;4059:563;4083:2;4079:1;:6;4059:563;;;4106:10;4119:51;4147:10;4159;4119:27;:51::i;:::-;4106:64;-1:-1:-1;4184:11:3;4198:51;4234:14;4106:64;4242:5;4234:14;:7;:14;:::i;:::-;4198:35;:51::i;:::-;4184:65;-1:-1:-1;4263:10:3;4276:102;4362:15;:6;4373:3;4362:15;:10;:15;:::i;:::-;4276:64;4336:3;4276:38;:11;4309:4;4276:38;:32;:38;:::i;:64::-;:85;:102;:85;:102;:::i;:::-;4263:115;;4397:84;4421:4;4443:3;4464;4397:84;;;;;;;;;;;;;;;;;4505:1;4499:3;:7;4495:117;;;4539:3;4526:16;;4495:117;;;4594:3;4581:16;;4495:117;4059:563;;;4087:3;;;;;4059:563;;;-1:-1:-1;4644:10:3;;-1:-1:-1;;;3418:1244:3;;;;;;;;:::o;1936:186:7:-;1992:8;928:66;2016:1;:18;2012:79;;;2050:30;;;;;;;;;;;2012:79;2104:11;2109:1;2113;2112:2;;2104:4;:11::i;:::-;2100:15;1936:186;-1:-1:-1;;;1936:186:7:o;2219:252::-;2275:8;794:66;2330:6;;2326:73;;-1:-1:-1;2357:5:7;2352:10;;;;2383:5;2326:73;2409:14;2426:10;2431:1;2434;2426:4;:10::i;:::-;2409:27;;2460:4;2450:7;:14;;;;;;;2219:252;-1:-1:-1;;;;;2219:252:7:o;4091:116::-;4151:8;4175:25;4180:16;4185:1;794:66;4180:4;:16::i;1748:97::-;1804:8;1828:10;1833:1;1836;1828:4;:10::i;4668:117:3:-;4766:12;4668:117;:::o;1179:790:9:-;1347:6;1369:13;1385:30;1413:1;1406:4;:8;1385:20;:30::i;:::-;1369:46;;1425:19;1447:27;:21;1458:9;:4;:7;:9::i;:::-;1447:6;;:21;:10;:21;:::i;:::-;:25;:27::i;:::-;1425:49;;1484:24;1511:36;1534:12;1511:18;:16;:18::i;:36::-;1484:63;-1:-1:-1;1557:12:9;1572:25;:2;1484:63;1572:25;:6;:25;:::i;:::-;1557:40;-1:-1:-1;1607:12:9;1622:23;:5;1632:12;1622:23;:9;:23;:::i;:::-;1607:38;-1:-1:-1;1656:23:9;1682:102;1712:25;:17;1734:2;1712:25;:21;:25;:::i;:::-;1751:23;:12;1768:5;1751:23;:16;:23;:::i;:::-;1682:16;:102::i;:::-;1656:128;;1794:12;1809:40;1832:16;1809:18;:16;:18::i;:40::-;1794:55;;1859:13;1875:64;1907:31;1935:1;1907:20;:31::i;:::-;1875:27;1896:5;1875:16;:5;1885;1875:16;:9;:16;:::i;:64::-;1859:80;1179:790;-1:-1:-1;;;;;;;;;;;;;;1179:790:9:o;714:269:2:-;962:14;;:6;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;714:269::o;16503:245:7:-;16559:8;16583:6;;;:16;;-1:-1:-1;16593:6:7;;16583:16;16579:55;;;-1:-1:-1;16622:1:7;16615:8;;16579:55;-1:-1:-1;16647:5:7;;;16651:1;16647;:5;:1;16666:5;;;;;:10;;:24;;;;16689:1;16684;16680;:5;;;;;;:10;;16666:24;16662:80;;;16707:24;;;;;;;;;;;16835:260;16891:8;16915:6;16911:67;;16937:30;;;;;;;;;;;16911:67;928:66;16991:1;:18;:29;;;;;17013:1;17018:2;17013:7;16991:29;16987:83;;;17035:24;;;;;;;;;;;16987:83;17087:1;17083;:5;;;;;;;16835:260;-1:-1:-1;;;16835:260:7:o;367:806:9:-;526:15;;569:12;:5;579:1;569:12;:9;:12;:::i;:::-;557:24;-1:-1:-1;591:10:9;604:12;:1;557:24;604:12;:5;:12;:::i;:::-;591:25;-1:-1:-1;626:10:9;639:12;:5;649:1;639:12;:9;:12;:::i;:::-;626:25;;661:9;673:32;696:8;673:18;:16;:18::i;:32::-;661:44;;715:13;751:18;:16;:18::i;:::-;742:6;:27;738:217;;;794:28;:22;810:5;794:11;:6;:9;:11::i;:28::-;785:37;;738:217;;;862:82;902:28;:22;918:5;902:11;:6;:9;:11::i;:28::-;862:18;:16;:18::i;:82::-;853:91;;738:217;973:17;:6;984:5;973:17;:10;:17;:::i;:::-;964:26;;1006:136;1043:1;1058;1073:5;1092:8;1114:18;:6;:16;:18::i;:::-;1006:136;;;;;;;;;;;;;;;;;;;1160:6;367:806;-1:-1:-1;;;;;;;;;367:806:9:o;1975:240::-;2076:15;2114:56;2127:42;2150:18;:16;:18::i;:::-;2127;:16;:18::i;:42::-;2114:8;:1;2120;2114:8;:5;:8;:::i;2266:676::-;2360:6;;2447:14;2456:4;;2447:14;:8;:14;:::i;:::-;2426:35;-1:-1:-1;2471:16:9;2490:21;:4;2426:35;2490:21;:8;:21;:::i;:::-;2471:40;-1:-1:-1;2521:16:9;2540:24;2471:40;;2540:24;:13;:24;:::i;:::-;2521:43;-1:-1:-1;2574:19:9;2596:24;2521:43;;2596:24;:13;:24;:::i;:::-;2574:46;-1:-1:-1;2630:23:9;2656:30;2574:46;;2656:30;:16;:30;:::i;:::-;2630:56;-1:-1:-1;2696:24:9;2723:38;2630:56;;2723:38;:20;:38;:::i;:::-;2696:65;-1:-1:-1;2771:22:9;2796:40;2696:65;;2796:40;:21;:40;:::i;:::-;2771:65;-1:-1:-1;2846:23:9;2872:30;2771:65;2892:9;2872:30;:19;:30;:::i;:::-;2846:56;-1:-1:-1;;;;;;;;;2266:676:9;;;;:::o;17155:210:7:-;17235:5;;;17211:8;17255:5;;:14;;;;;17268:1;17264;:5;17255:14;:23;;;;;17277:1;17273;:5;17255:23;17254:54;;;;17288:1;17284;:5;:14;;;;;17297:1;17293;:5;17284:14;:23;;;;;17306:1;17302;:5;17284:23;17250:109;;;17324:24;;;;;;;;;;;5551:5160;5596:8;794:66;5620:1;:14;5616:74;;;5650:29;;;;;;;;;;;5616:74;5708:1;5703;:6;5699:66;;5725:29;;;;;;;;;;;5699:66;794;5778:1;:12;5774:51;;;-1:-1:-1;5813:1:7;5806:8;;5774:51;1273:66;5838:1;:15;5834:64;;-1:-1:-1;1453:75:7;5869:18;;5834:64;5908:8;5926;5944;6257:66;6245:1;:79;6241:316;;6340:79;;;;;6466:66;794;6445:11;;:88;6441:92;;6241:316;6601:66;6589:1;:79;6585:316;;6684:79;;;;;6810:66;794;6789:11;;:88;6785:92;;6585:316;6944:66;6932:1;:79;6928:314;;7027:79;;;;;7152:66;794;7131:11;;:88;7127:92;;6928:314;7285:66;7273:1;:79;7269:314;;7368:79;;;;;7493:66;794;7472:11;;:88;7468:92;;7269:314;7626:66;7614:1;:79;7610:314;;7709:79;;;;;7834:66;794;7813:11;;:88;7809:92;;7610:314;7967:66;7955:1;:79;7951:314;;8050:79;;;;;8175:66;8062;8154:11;;:88;8150:92;;7951:314;8310:66;8298:1;:79;8294:318;;8393:79;;;;;8520:66;794;8499:11;;:88;8495:92;;8294:318;8658:66;8646:1;:79;8642:320;;8741:79;;;;;8869:66;794;8848:11;;:88;8844:92;;8642:320;9009:66;8997:1;:79;8993:322;;9092:79;;;;;9221:66;794;9200:11;;:88;9196:92;;8993:322;9480:11;;;;-1:-1:-1;9480:11:7;;-1:-1:-1;794:66:7;9505:5;;;:15;;-1:-1:-1;9583:35:7;9540:39;;;9535:45;;:83;9530:88;;;;794:66;9628:1;9624;:5;:15;;;;;;9620:19;;9731:35;9726:1;9688:35;:39;9683:1;:45;:83;;;;;;9678:88;;;;794:66;9776:1;9772;:5;:15;;;;;;9768:19;;9879:35;9874:1;9836:35;:39;9831:1;:45;:83;;;;;;9826:88;;;;794:66;9924:1;9920;:5;:15;;;;;;9916:19;;10027:35;10022:1;9984:35;:39;9979:1;:45;:83;;;;;;9974:88;;;;794:66;10072:1;10068;:5;:15;;;;;;10064:19;;10175:35;10170:1;10132:35;:39;10127:1;:45;:83;;;;;;10122:88;;;;794:66;10220:1;10216;:5;:15;;;;;;10212:19;;10323:35;10318:1;10280:35;:39;10275:1;:45;:83;;;;;;10270:88;;;;794:66;10368:1;10364;:5;:15;;;;;;10360:19;;10471:35;10466:1;10428:35;:39;10423:1;:45;:83;;;;;;10418:88;;;;794:66;10516:1;10512;:5;:15;;;;;;10508:19;;10619:35;10614:1;10576:35;:39;10571:1;:45;:83;;;;;;10566:88;;;;5551:5160;;;;;;:::o;10808:5613::-;10854:8;1453:75;10878:15;;10874:105;;;-1:-1:-1;10967:1:7;10960:8;;10874:105;10992:6;10988:51;;-1:-1:-1;794:66:7;11014:14;;10988:51;1393:1;11052;:15;11048:77;;;11084:30;;;;;;;;;;;11048:77;794:66;11594;11590:70;;11674:5;;;:15;;;11700:18;11696:22;;11691:27;;;;;11590:70;;11758:5;;;:15;11754:19;;11780:1;11784:18;11780:22;11775:27;;;;794:66;11846:1;11842;:5;:15;;;;;;11838:19;;11864:1;11868:18;11864:22;11859:27;;;;794:66;11930:1;11926;:5;:15;;;;;;11922:19;;11948:1;11952:18;11948:22;11943:27;;;;794:66;12014:1;12010;:5;:15;;;;;;12006:19;;12032:1;12036:18;12032:22;12027:27;;;;794:66;12098:1;12094;:5;:15;;;;;;12090:19;;12116:1;12120:18;12116:22;12111:27;;;;794:66;12182:1;12178;:5;:15;;;;;;12174:19;;12200:1;12204:18;12200:22;12195:27;;;;794:66;12266:1;12262;:5;:15;;;;;;12258:19;;12284:1;12288:18;12284:22;12279:27;;;;794:66;12350:1;12346;:5;:15;;;;;;12342:19;;12368:1;12372:18;12368:22;12363:27;;;;794:66;12434:1;12430;:5;:15;;;;;;12426:19;;12452:1;12456:18;12452:22;12447:27;;;;794:66;12518:1;12514;:5;:15;;;;;;12510:19;;12536:1;12540:18;12536:22;12531:27;;;;794:66;12602:1;12598;:5;:15;;;;;;12594:19;;12620:1;12624:18;12620:22;12615:27;;;;794:66;12686:1;12682;:5;:15;;;;;;12678:19;;12704:1;12708:18;12704:22;12699:27;;;;794:66;12770:1;12766;:5;:15;;;;;;12762:19;;12788:1;12792:18;12788:22;12783:27;;;;794:66;12854:1;12850;:5;:15;;;;;;12846:19;;12872:1;12876:18;12872:22;12867:27;;;;794:66;12938:1;12934;:5;:15;;;;;;12930:19;;12956:1;12960:18;12956:22;12951:27;;;;794:66;13022:1;13018;:5;:15;;;;;;13014:19;;13040:1;13044:18;13040:22;13035:27;;;;794:66;13106:1;13102;:5;:15;;;;;;13098:19;;13124:1;13128:18;13124:22;13119:27;;;;794:66;13190:1;13186;:5;:15;;;;;13420:2;;;;;;13274:18;13186:15;;;13203:27;;;13270:22;:26;;794:66;13270:36;;13186:15;-1:-1:-1;13467:66:7;13456:78;;13455:85;13451:304;;13664:66;13571;13560:78;;:171;13556:175;;13451:304;13799:66;13788:78;;13787:85;13783:304;;13996:66;13903;13892:78;;:171;13888:175;;13783:304;14130:66;14119:78;;14118:85;14114:303;;14327:66;14234;14223:78;;:171;14219:175;;14114:303;14460:66;14449:78;;14448:85;14444:303;;14657:66;14564;14553:78;;:171;14549:175;;14444:303;14790:66;14779:78;;14778:85;14774:303;;14987:66;14894;14883:78;;:171;14879:175;;14774:303;15120:66;15109:78;;15108:85;15104:303;;15317:66;15224;15213:78;;:171;15209:175;;15104:303;15452:66;15441:78;;15440:85;15436:305;;15649:66;15556;15545:78;;:171;15541:175;;15436:305;15787:66;15776:78;;15775:85;15771:306;;15984:66;15891;15880:78;;:171;15876:175;;15771:306;16124:66;16113:78;;16112:85;16108:307;;16321:66;16228;16217:78;;:171;16213:175;;16108:307;10808:5613;;;;;:::o;3925:97::-;3975:8;3999:16;4004:1;794:66;3999:4;:16::i;5164:97::-;794:66;5243:11;;;5164:97::o;265:4522:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;279:491:-1:-;;;;417:2;405:9;396:7;392:23;388:32;385:2;;;-1:-1;;423:12;385:2;85:6;72:20;97:33;124:5;97:33;;;475:63;-1:-1;575:2;614:22;;72:20;97:33;72:20;97:33;;;379:391;;583:63;;-1:-1;;;683:2;722:22;;;;209:20;;379:391;5114:675;11971:42;11960:54;;;856:58;;11960:54;;;5525:2;5510:18;;997:37;11960:54;;;;5608:2;5593:18;;997:37;5691:2;5676:18;;1115:36;;;;5774:3;5759:19;;1115:36;;;;5352:3;5337:19;;5323:466;5796:423;1115:36;;;6124:2;6109:18;;1115:36;;;;6205:2;6190:18;;1115:36;5964:2;5949:18;;5935:284;6226:531;1115:36;;;6581:2;6566:18;;1115:36;;;;6662:2;6647:18;;1115:36;6743:2;6728:18;;1115:36;6420:3;6405:19;;6391:366;6764:639;1115:36;;;7145:2;7130:18;;1115:36;;;;7226:2;7211:18;;1115:36;;;;7307:2;7292:18;;1115:36;7388:3;7373:19;;1115:36;6984:3;6969:19;;6955:448;7410:407;7601:2;7615:47;;;1388:2;7586:18;;;11654:19;1424:66;11694:14;;;1404:87;1510:12;;;7572:245;7824:407;8015:2;8029:47;;;1761:2;8000:18;;;11654:19;1797:66;11694:14;;;1777:87;1883:12;;;7986:245;8238:407;8429:2;8443:47;;;2134:2;8414:18;;;11654:19;2170:66;11694:14;;;2150:87;2256:12;;;8400:245;8652:407;8843:2;8857:47;;;2507:2;8828:18;;;11654:19;2543:66;11694:14;;;2523:87;2644:66;2630:12;;;2623:88;2730:12;;;8814:245;9066:407;9257:2;9271:47;;;2981:2;9242:18;;;11654:19;3017:66;11694:14;;;2997:87;3103:12;;;9228:245;9480:407;9671:2;9685:47;;;3354:2;9656:18;;;11654:19;3390:66;11694:14;;;3370:87;3476:12;;;9642:245;9894:407;10085:2;10099:47;;;3727:2;10070:18;;;11654:19;3763:66;11694:14;;;3743:87;3849:12;;;10056:245;10308:407;10499:2;10513:47;;;4100:2;10484:18;;;11654:19;4136:66;11694:14;;;4116:87;4222:12;;;10470:245;10722:407;10913:2;10927:47;;;4473:2;10898:18;;;11654:19;4509:66;11694:14;;;4489:87;4595:12;;;10884:245;11136:407;11327:2;11341:47;;;4846:2;11312:18;;;11654:19;4882:66;11694:14;;;4862:87;4968:12;;;11298:245;12484:117;11971:42;12571:5;11960:54;12546:5;12543:35;12533:2;;12592:1;;12582:12;12533:2;12527:74;"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 3
		},
		"interfaces/IStructs.sol": {
			"id": 6
		},
		"interfaces/IEvents.sol": {
			"id": 5
		},
		"libs/LibFixedMath.sol": {
			"id": 7
		},
		"libs/LibSafeMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 9
		},
		"core/State.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../core/State.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        //external\n        public\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        // Compute initial balances (fixed point).\n        int256 deltaA = LibFixedMath.toFixed(amount);\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute\n        (int256 pA, int256 price) = _bisect(\n            a,\n            b,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n        .mul(price)\n        .mul(\n            LibFixedMath.one().sub(state.fee)\n        );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000)); // Good for USDC, may vary w token.\n        if (deltaB > 0) {\n            deltaB = 0;\n        } else if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n        }\n\n        // Handle additional edge cases\n        int256 newPBarX = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            state.pBarX\n        );\n        if (newPBarX > state.eToKappa.mul(pBarA)) {\n            newPBarX = state.eToKappa.mul(pBarA);\n        } else if(newPBarX < LibFixedMath.one().div(state.eToKappa).mul(pBarA)) {\n            newPBarX = LibFixedMath.one().div(state.eToKappa).mul(pBarA);\n        }\n\n        emit Price(\n            price,\n            deltaB,\n            newPBarX,\n            pA\n        );\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarX;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarX);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        // Make transfers\n        //IERC20(fromToken).transferFrom(msg.sender, address(this), uint256(deltaA));\n        //IERC20(toToken).transferFrom(address(this), msg.sender, uint256(deltaB));\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            uint256(deltaA),\n            uint256(-deltaB)\n        );\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 pA, int256 r)\n    {\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            emit Bisect(\n                lhs1,\n                mid,\n                lhs\n            );\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return (pA, lowerBound);\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        uint256 l;                                          // total liquidity token balance\n\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**40;\n            base = 2**87;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1 / 2**40), b) * 2**40;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function getDecimalAsInteger(int256 f) internal pure returns (int256 n) {\n       return 0;// return f & (FIXED_1 - 1));   //(f - ) * FIXED_1;//(f * FIXED_1) / FIXED_1;//f & (FIXED_1 - 1);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 result;\n        if (term1A < LibFixedMath.one()) {\n            result = term1A.ln().mul(term2).exp();\n        } else {\n            result = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = result.mul(pBarA);\n\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.div(pA),\n            betaToDeltaT.div(pBarA)\n        );\n        int256 term3 = LibFixedMath.one().div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function scaleUp(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.mul(10**10);\n    }\n\n    function scaleDown(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.div(10**10);\n    }\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\n\n\ncontract State {\n\n    IStructs.State gState;\n\n    //// HACKY WORKAROUND 'TIL WE FIX THE FIXED MATH LIB\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n\n/*\n        state.x = LibScamMath.scaleDown(state.x);\n        state.y = LibScamMath.scaleDown(state.y);\n        state.pBarX = LibScamMath.scaleDown(state.pBarX);\n\n        state.rhoRatio = LibScamMath.scaleDown(state.rhoRatio);\n        state.fee = LibScamMath.scaleDown(state.fee);\n*/\n\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n/*\n        gState.x = LibScamMath.scaleUp(state.x);\n        gState.y = LibScamMath.scaleUp(state.y);\n        gState.pBarX = LibScamMath.scaleUp(state.pBarX);\n*/\n\n        gState = state;\n    }\n\n}\n"
	},
	"sourceTreeHashHex": "0x46e99c92abbbcebd19ce7bb28e4a83e188e4977b35491b91b11a5281112d58b3",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}