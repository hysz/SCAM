{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x2B75 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE0 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x25AB JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x261F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x25DF JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x2B07 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2590 JUMP JUMPDEST PUSH2 0x33A JUMP JUMPDEST PUSH2 0xFB PUSH2 0x40D JUMP JUMPDEST PUSH2 0x105 DUP3 DUP3 PUSH2 0x460 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184 PUSH2 0x24D6 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x5B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1FC JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 PUSH2 0x217 DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0x9BD JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F3 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x298 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 PUSH2 0x2AD DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2801 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2667 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x40D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x401 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2640 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x45E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2793 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x27CA JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x524 PUSH1 0x63 PUSH1 0x64 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x539 SWAP1 PUSH1 0x64 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x549 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x571 PUSH2 0x55D PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x582 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x24D6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xB14 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x6D4 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x6F3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x793 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x790 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7A6 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B8 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7EC PUSH2 0x7D0 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x7E0 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x7FF PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x811 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xA78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x825 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x84E JUMP JUMPDEST DUP1 PUSH2 0x836 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SGT PUSH2 0x84E JUMPI PUSH2 0x84B DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x86E DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x861 PUSH2 0xE8A JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0xE8E JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x887 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x8AB JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x8A4 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x8C0 DUP8 PUSH2 0x7E0 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x8DF JUMPI PUSH2 0x8DC DUP8 PUSH2 0x7E0 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x8E7 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x929 JUMPI PUSH2 0x903 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x918 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x965 JUMP JUMPDEST PUSH2 0x939 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x94E DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x95F DUP2 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x96E DUP12 PUSH2 0xF67 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x6 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2838 JUMP JUMPDEST PUSH2 0xA71 PUSH2 0xA6B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST DUP4 PUSH2 0x100F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0xA6B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0xA71 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0x9D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB35 DUP5 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH2 0xB7D PUSH2 0xB49 DUP6 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 PUSH2 0xB77 DUP8 PUSH2 0xB72 PUSH16 0x80000000000000000000000000000000 PUSH2 0xB6D DUP12 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x100F JUMP JUMPDEST PUSH2 0xF99 JUMP JUMPDEST DUP7 PUSH2 0x100F JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB23 JUMP JUMPDEST PUSH2 0xB7D PUSH2 0xBA2 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST DUP5 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBB DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCF DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBE3 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBF3 DUP7 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBFF PUSH2 0xA97 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xC22 JUMPI PUSH2 0xC1B PUSH2 0xC16 DUP4 PUSH2 0x7E0 DUP8 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x1854 JUMP JUMPDEST SWAP1 POP PUSH2 0xC40 JUMP JUMPDEST PUSH2 0xC3D PUSH2 0xC35 PUSH2 0xC16 DUP5 PUSH2 0x7E0 DUP8 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xC50 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCB3 PUSH2 0xCA6 PUSH2 0xC96 PUSH2 0xC7A DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH2 0x784 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD7 PUSH2 0xCCA DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCE9 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1E62 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCFC DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x1F55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD10 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x1FF5 JUMP JUMPDEST SWAP1 POP PUSH2 0xD22 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 PUSH2 0xD36 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2128 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0xD4E DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD98 JUMPI PUSH1 0x0 PUSH2 0xD63 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xD80 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD96 JUMPI PUSH2 0xD93 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x224D JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0xDA3 DUP3 PUSH2 0x22FD JUMP JUMPDEST SWAP2 POP PUSH2 0xDB5 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDF1 PUSH16 0x80000000000000000000000000000000 PUSH2 0xB72 PUSH2 0xDE8 DUP8 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 DUP8 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0A PUSH2 0xE01 DUP7 PUSH2 0x231F JUMP JUMPDEST PUSH2 0xB72 DUP7 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE23 PUSH2 0xE1A DUP8 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 DUP8 PUSH2 0x231F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE55 PUSH2 0xE3F PUSH2 0xE36 DUP10 PUSH2 0x231F JUMP JUMPDEST PUSH2 0xB72 DUP10 PUSH2 0x231F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x100F JUMP JUMPDEST SWAP1 POP PUSH2 0xE73 PUSH2 0xE6D PUSH2 0xE67 DUP7 DUP7 PUSH2 0x10DE JUMP JUMPDEST DUP5 PUSH2 0x10DE JUMP JUMPDEST DUP3 PUSH2 0x10DE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP4 DUP4 PUSH2 0x10DE JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE9C DUP8 DUP8 SUB PUSH2 0x235C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBC PUSH2 0xC16 PUSH2 0xEAF DUP9 PUSH2 0x116A JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECC DUP3 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE0 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEF4 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF20 PUSH2 0xF0B DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST PUSH2 0xF1B DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST PUSH2 0xE7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF30 DUP3 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF55 PUSH2 0xF41 PUSH1 0x2 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0x784 DUP5 PUSH2 0xC8A DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x1154 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xFA6 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xFB3 JUMPI POP PUSH1 0x0 PUSH2 0xB23 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xFC1 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xFD8 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xFD4 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xB23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2997 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1048 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A99 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1096 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x10CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x10D6 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x10F1 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x10FC JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x111D JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x1112 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x111D JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xB23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x29CE JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2895 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x11F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x275C JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1210 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1243 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x12A2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1300 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1362 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x13C6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x142A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x148E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x14F2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1556 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x15BA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1630 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1661 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1681 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x16B2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x16D2 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1703 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1723 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1754 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1774 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x17A5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x17C5 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x17F6 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1816 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1847 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1886 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST DUP2 PUSH2 0x18A2 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2929 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1949 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1976 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19A2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A25 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A50 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A7A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AA4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ACE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AF7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B20 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B48 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B70 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B97 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BBE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BE4 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C53 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C95 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1CD7 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D19 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D5B JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D9B JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1DDB JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E1B JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E5B JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E6F PUSH1 0x2 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EAE PUSH2 0x1E8E DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xDC5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x565 DUP10 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xAAB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1ED4 PUSH2 0x1ECB DUP11 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0xC8A DUP5 PUSH2 0x23CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF0 DUP5 PUSH2 0x784 PUSH2 0x1EEB DUP6 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x1F13 JUMPI PUSH2 0x1F0E PUSH2 0xC35 DUP4 PUSH1 0x0 SUB PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x1F1C DUP3 PUSH2 0x1854 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F47 PUSH2 0x1F33 DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0x784 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF55 DUP11 DUP4 PUSH2 0x23DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F88 PUSH2 0x1F7B PUSH2 0x1F6E DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F9F PUSH2 0x1F7B DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FB6 PUSH2 0x1EEB DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FCF DUP3 PUSH2 0x7E0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FE4 DUP10 PUSH2 0x784 DUP11 PUSH2 0x7E0 DUP7 PUSH2 0x1854 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2008 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2036 PUSH2 0x2024 DUP7 PUSH2 0x7E0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x205A PUSH2 0x2052 DUP9 PUSH2 0x7E0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0xC8A PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x206E DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x207D JUMPI DUP1 PUSH2 0x1FE4 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20A1 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20B1 PUSH1 0x1 PUSH1 0xA PUSH2 0xA78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20E1 PUSH2 0x20D4 PUSH2 0x20C7 DUP9 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2114 SWAP3 SWAP2 SWAP1 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2134 DUP8 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2166 PUSH2 0x2150 DUP7 PUSH2 0x7E0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xC8A SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2193 PUSH2 0x2186 DUP11 PUSH2 0x7E0 DUP11 PUSH2 0x7E0 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21AB DUP3 PUSH2 0x784 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x21BA JUMPI DUP9 PUSH2 0x21BC JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x21DD DUP12 DUP12 PUSH2 0x2490 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21EA DUP3 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x220E PUSH2 0x2201 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2233 JUMPI DUP3 DUP13 DUP4 PUSH2 0x2223 DUP16 PUSH2 0x23F1 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2240 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2296 PUSH2 0x2273 PUSH2 0x2266 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x2286 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0x565 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22CD PUSH2 0x22BD PUSH2 0x22B0 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22E1 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x22F0 JUMPI DUP10 PUSH2 0xC50 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230B PUSH1 0x9 PUSH1 0xA PUSH2 0xA78 JUMP JUMPDEST DUP3 SLT PUSH2 0x2317 JUMPI DUP2 PUSH2 0x666 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x2346 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x666 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2398 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x28CC JUMP JUMPDEST PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 DUP4 PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x23EA JUMPI DUP2 PUSH2 0xA71 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2404 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2418 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x242C DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2440 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2454 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2468 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x247C DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC50 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0x249F PUSH1 0xA PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0x784 PUSH2 0x24BC PUSH2 0x24AF PUSH1 0x6 PUSH2 0x23B2 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x24C9 PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA71 DUP4 DUP4 PUSH2 0x256C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25BD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x25C7 DUP5 DUP5 PUSH2 0x256C JUMP JUMPDEST SWAP2 POP PUSH2 0x25D6 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x256C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25F3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25FE DUP2 PUSH2 0x2B10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x260E DUP2 PUSH2 0x2B10 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xc9 0x2c 0xe0 MLOAD 0xae 0xec 0x25 REVERT DUP11 CALLVALUE SLT 0xd9 ADD 0xe EQ PUSH21 0x2E5061FEF93B7F8E1D3EBB7A634FD0A76C65787065 PUSH19 0x696D656E74616CF564736F6C634300050C0040 ",
				"sourceMap": "331:13561:4:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;331:13561:4;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063afd46eb511610050578063afd46eb51461009f578063df791e50146100c0578063f2fde38b146100e057610067565b80637b6890361461006c5780638da5cb5b14610081575b600080fd5b61007f61007a3660046125ab565b6100f3565b005b610089610109565b604051610096919061261f565b60405180910390f35b6100a7610125565b6040516100969d9c9b9a999897969594939291906126d6565b6100d36100ce3660046125df565b61017a565b6040516100969190612b07565b61007f6100ee366004612590565b61033a565b6100fb61040d565b6101058282610460565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b60006101846124d6565b61018c6105b3565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156101fc5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561022a576000610217868661021187610659565b8561066e565b9050610222816109bd565b9250506102f3565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102985750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156102b85760006102ad868661021187610659565b9050610222816109ca565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612801565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161032a959493929190612667565b60405180910390a1509392505050565b61034261040d565b73ffffffffffffffffffffffffffffffffffffffff811661038f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612960565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906104019033908490612640565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612793565b565b60015460ff161561049d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906127ca565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610524606360646109d7565b600655606360078190556105399060646109d7565b60085561054960056127106109d7565b60095561057161055d6001620f4240610a78565b610565610a97565b9063ffffffff610aab16565b600c556105826127156103e8610a78565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6105bb6124d6565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610666826012610b14565b90505b919050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156106d45750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156106f357505050506060820151608083015160c08401516001610793565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156107615750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102b85785608001519350856060015192506107908660c00151610784610a97565b9063ffffffff610b2916565b91505b60006107a68585858a6101000151610ba8565b905060006107b8868684878d8d610c5e565b905060006107ec6107d08a6101200151610565610a97565b6107e08c8563ffffffff610dc516565b9063ffffffff610dc516565b90506107ff60008263ffffffff610aab16565b905060006108116001620186a0610a78565b90506000821315610825576000915061084e565b80610836888463ffffffff610e7e16565b1361084e5761084b818863ffffffff610aab16565b91505b600061086e8b6101400151610861610e8a565b8d6101600151888b610e8e565b6101808c0151909150610887908863ffffffff610dc516565b8113156108ab576101808b01516108a4908863ffffffff610dc516565b90506108df565b6108c0876107e08d6101800151610784610a97565b8112156108df576108dc876107e08d6101800151610784610a97565b90505b6108e7610e8a565b6101408c0152851561092957610903898d63ffffffff610e7e16565b60608c0152610918888463ffffffff610e7e16565b60808c015260c08b01819052610965565b610939888463ffffffff610e7e16565b60608c015261094e898d63ffffffff610e7e16565b60808c015261095f81610784610a97565b60c08c01525b61096e8b610f67565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d856040516109a1939291906126a8565b60405180910390a150506000039b9a5050505050505050505050565b6000610666826006610f89565b6000610666826012610f89565b600080831215610a13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612a3c565b6000821215610a4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612838565b610a71610a6b846f80000000000000000000000000000000610f99565b8361100f565b9392505050565b6000610a71610a6b846f80000000000000000000000000000000610f99565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610b07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612a05565b610a7183836000036110de565b6000610a718383600a0a6109d7565b92915050565b600080610b3584611154565b90508015610b8557610b7d610b4985611154565b610b72610b7787610b726f80000000000000000000000000000000610b6d8b611154565b61100f565b610f99565b8661100f565b915050610b23565b610b7d610ba2856f80000000000000000000000000000000610f99565b8461100f565b600080610bbb848763ffffffff610dc516565b90506000610bcf868363ffffffff610b2916565b90506000610be3838863ffffffff610b2916565b90506000610bf386610565610a97565b90506000610bff610a97565b841215610c2257610c1b610c16836107e08761116a565b611854565b9050610c40565b610c3d610c35610c16846107e08761116a565b610784610a97565b90505b610c50818963ffffffff610dc516565b9a9950505050505050505050565b600080610cb3610ca6610c96610c7a8a8863ffffffff610dc516565b610c8a8c8c63ffffffff610dc516565b9063ffffffff610e7e16565b610784898863ffffffff610dc516565b899063ffffffff610dc516565b90506000610cd7610cca8a8763ffffffff610e7e16565b8a9063ffffffff610b2916565b90506000610ce98a8a8a8a8a8a611e62565b90506000610cfc8b8b8b8b8b878c611f55565b90506000610d108c8c8c8c8c8a8a8e611ff5565b9050610d22828289610120015161208e565b15610d9a576000610d36838388888c612128565b8092508193505050610d4e83838a610120015161208e565b15610d98576000610d6384848989868e6121cb565b6101208d015193975091955093509150610d80908590859061208e565b15610d9657610d93848484848b8b61224d565b93505b505b505b610da3826122fd565b9150610db5828b63ffffffff610dc516565b9c9b505050505050505050505050565b600080610df16f80000000000000000000000000000000610b72610de887611154565b610b7287611154565b90506000610e0a610e018661231f565b610b7286611154565b90506000610e23610e1a87611154565b610b728761231f565b90506000610e55610e3f610e368961231f565b610b728961231f565b6f8000000000000000000000000000000061100f565b9050610e73610e6d610e6786866110de565b846110de565b826110de565b979650505050505050565b6000610a7183836110de565b4390565b600080610e9c87870361235c565b90506000610ebc610c16610eaf8861116a565b849063ffffffff610dc516565b90506000610ecc82610565610a97565b90506000610ee0878363ffffffff610dc516565b90506000610ef4878563ffffffff610dc516565b90506000610f20610f0b858b63ffffffff610b2916565b610f1b878b63ffffffff610b2916565b610e7e565b90506000610f3082610784610a97565b90506000610f55610f4160026123b2565b61078484610c8a898963ffffffff610e7e16565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610a7182600a0a8402611154565b6000821580610fa6575081155b15610fb357506000610b23565b5081810281838281610fc157fe5b05141580610fd8575082828281610fd457fe5b0514155b15610b23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612997565b600081611048576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612a99565b7f8000000000000000000000000000000000000000000000000000000000000000831480156110965750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612ad0565b8183816110d657fe5b059392505050565b8181016000831280156110f15750600082125b80156110fc57508281135b8061111d57506000831380156111125750600082135b801561111d57508281125b15610b23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906129ce565b6f80000000000000000000000000000000900590565b60006f800000000000000000000000000000008213156111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612895565b600082136111f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea9061275c565b6f8000000000000000000000000000000082141561121057506000610669565b640733048c5a821361124357507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610669565b60008060006a01c8464f7616476000000085136112a2577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e900000000000008513611300577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611362577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec0000000000000000085136113c6577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc000000000000000000851361142a577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de70000000000000000000851361148e577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be582800000000000000000085136114f2577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611556577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d85136115ba577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161163057fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161166157fe5b05840193506f800000000000000000000000000000008183028161168157fe5b059150700300000000000000000000000000000000836f99999999999999999999999999999999038302816116b257fe5b05840193506f80000000000000000000000000000000818302816116d257fe5b059150700400000000000000000000000000000000836f924924924924924924924924924924920383028161170357fe5b05840193506f800000000000000000000000000000008183028161172357fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161175457fe5b05840193506f800000000000000000000000000000008183028161177457fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b038302816117a557fe5b05840193506f80000000000000000000000000000000818302816117c557fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816117f657fe5b05840193506f800000000000000000000000000000008183028161181657fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161184757fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe01000000000000000000000000000000082121561188657506000610669565b816118a257506f80000000000000000000000000000000610669565b60008213156118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612929565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161194957fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161197657fe5b05905080664807432bc1800002830192506f80000000000000000000000000000000828202816119a257fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816119ce57fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816119fa57fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611a2557fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611a5057fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611a7a57fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611aa457fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611ace57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611af757fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611b2057fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611b4857fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611b7057fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611b9757fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611bbe57fe5b05905080601402830192506f8000000000000000000000000000000082820281611be457fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611c53577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611c95577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b700400000000000000000000000000000000841615611cd757701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611d19577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b700100000000000000000000000000000000841615611d5b5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611d9b576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611ddb576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615611e1b576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611e5b576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b600080611e6f60026123b2565b90506000611eae611e8e89866101000151610dc590919063ffffffff16565b610565896107e08d6107e08a610100015189610aab90919063ffffffff16565b90506000611ed4611ecb8a6107e08d6107e08d6107e060046123b2565b610c8a846123ce565b90506000611ef084610784611eeb85610784610a97565b61116a565b6000039050600080821315611f1357611f0e610c3583600003611854565b611f1c565b611f1c82611854565b90506000611f47611f33878d63ffffffff610dc516565b61078460008890038563ffffffff610e7e16565b90506000610f558a836123da565b600080611f88611f7b611f6e868a63ffffffff610dc516565b8a9063ffffffff610aab16565b8a9063ffffffff610dc516565b90506000611f9f611f7b8b8763ffffffff610e7e16565b90506000611fb6611eeb848463ffffffff610b2916565b90506000611fcf826107e0886101000151610565610a97565b90506000611fe4896107848a6107e086611854565b9d9c50505050505050505050505050565b600080612008848663ffffffff610b2916565b90506000612036612024866107e0876101000151610565610a97565b6101008601519063ffffffff610e7e16565b9050600061205a612052886107e0886101000151610565610a97565b610c8a610a97565b9050600061206e838363ffffffff610b2916565b905080841261207d5780611fe4565b50919b9a5050505050505050505050565b6000806120a1848663ffffffff610aab16565b905060006120b16001600a610a78565b905060006120e16120d46120c788610565610a97565b879063ffffffff610e7e16565b839063ffffffff610dc516565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a822838260405161211492919061274e565b60405180910390a190911395945050505050565b600080612134876123f1565b90506000612166612150866107e0876101000151610565610a97565b610100860151610c8a908563ffffffff610dc516565b905060006121936121868a6107e08a6107e08a6101000151610565610a97565b849063ffffffff610e7e16565b905060006121ab826107848c8663ffffffff610dc516565b90508881126121ba57886121bc565b805b94505050509550959350505050565b60008060008060006121dd8b8b612490565b905060006121ea826123f1565b9050600061220e6122018c8563ffffffff610dc516565b8b9063ffffffff610aab16565b905080821361223357828c836122238f6123f1565b9650965096509650505050612240565b508b955090935086925090505b9650965096509692505050565b600080612296612273612266898b63ffffffff610aab16565b859063ffffffff610dc516565b610c8a612286898b63ffffffff610dc516565b610565898d63ffffffff610dc516565b905060006122cd6122bd6122b08a8c63ffffffff610aab16565b879063ffffffff610dc516565b610c8a888a63ffffffff610aab16565b905060006122e1838363ffffffff610b2916565b90508981136122f05789610c50565b9998505050505050505050565b600061230b6009600a610a78565b82126123175781610666565b506000919050565b6000808213612346576f7fffffffffffffffffffffffffffffff8260000316600003610666565b506f7fffffffffffffffffffffffffffffff1690565b600080821215612398576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906128cc565b610666826f80000000000000000000000000000000610f99565b6000610666826f80000000000000000000000000000000610f99565b60006106668283610dc5565b6000818313156123ea5781610a71565b5090919050565b600080612404838063ffffffff610dc516565b90506000612418848363ffffffff610dc516565b9050600061242c828063ffffffff610dc516565b90506000612440828063ffffffff610dc516565b90506000612454828063ffffffff610dc516565b90506000612468828063ffffffff610dc516565b9050600061247c828863ffffffff610dc516565b90506000610c50828063ffffffff610dc516565b6000610a7161249f600a6123b2565b6107846124bc6124af60066123b2565b869063ffffffff610dc516565b610c8a6124c960046123b2565b889063ffffffff610dc516565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b2357600080fd5b6000602082840312156125a1578081fd5b610a71838361256c565b600080604083850312156125bd578081fd5b6125c7848461256c565b91506125d6846020850161256c565b90509250929050565b6000806000606084860312156125f3578081fd5b83356125fe81612b10565b9250602084013561260e81612b10565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461040a57600080fdfea365627a7a72315820c92ce051aeec25fd8a3412d9010e14742e5061fef93b7f8e1d3ebb7a634fd0a76c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE0 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x25AB JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x261F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x25DF JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x2B07 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2590 JUMP JUMPDEST PUSH2 0x33A JUMP JUMPDEST PUSH2 0xFB PUSH2 0x40D JUMP JUMPDEST PUSH2 0x105 DUP3 DUP3 PUSH2 0x460 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184 PUSH2 0x24D6 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x5B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1FC JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 PUSH2 0x217 DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0x9BD JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F3 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x298 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 PUSH2 0x2AD DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2801 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2667 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x40D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x401 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2640 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x45E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2793 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x27CA JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x524 PUSH1 0x63 PUSH1 0x64 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x539 SWAP1 PUSH1 0x64 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x549 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x571 PUSH2 0x55D PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x582 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x24D6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xB14 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x6D4 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x6F3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x793 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x790 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7A6 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xBA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B8 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7EC PUSH2 0x7D0 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x7E0 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x7FF PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x811 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xA78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x825 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x84E JUMP JUMPDEST DUP1 PUSH2 0x836 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SGT PUSH2 0x84E JUMPI PUSH2 0x84B DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x86E DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x861 PUSH2 0xE8A JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0xE8E JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x887 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x8AB JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x8A4 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x8C0 DUP8 PUSH2 0x7E0 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x8DF JUMPI PUSH2 0x8DC DUP8 PUSH2 0x7E0 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x8E7 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x929 JUMPI PUSH2 0x903 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x918 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x965 JUMP JUMPDEST PUSH2 0x939 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x94E DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x95F DUP2 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x96E DUP12 PUSH2 0xF67 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x6 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2838 JUMP JUMPDEST PUSH2 0xA71 PUSH2 0xA6B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST DUP4 PUSH2 0x100F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0xA6B DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0xA71 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP4 DUP4 PUSH1 0xA EXP PUSH2 0x9D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB35 DUP5 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH2 0xB7D PUSH2 0xB49 DUP6 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 PUSH2 0xB77 DUP8 PUSH2 0xB72 PUSH16 0x80000000000000000000000000000000 PUSH2 0xB6D DUP12 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x100F JUMP JUMPDEST PUSH2 0xF99 JUMP JUMPDEST DUP7 PUSH2 0x100F JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB23 JUMP JUMPDEST PUSH2 0xB7D PUSH2 0xBA2 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST DUP5 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBB DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBCF DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBE3 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBF3 DUP7 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBFF PUSH2 0xA97 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xC22 JUMPI PUSH2 0xC1B PUSH2 0xC16 DUP4 PUSH2 0x7E0 DUP8 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x1854 JUMP JUMPDEST SWAP1 POP PUSH2 0xC40 JUMP JUMPDEST PUSH2 0xC3D PUSH2 0xC35 PUSH2 0xC16 DUP5 PUSH2 0x7E0 DUP8 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xC50 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCB3 PUSH2 0xCA6 PUSH2 0xC96 PUSH2 0xC7A DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST PUSH2 0x784 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD7 PUSH2 0xCCA DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCE9 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1E62 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCFC DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x1F55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD10 DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x1FF5 JUMP JUMPDEST SWAP1 POP PUSH2 0xD22 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 PUSH2 0xD36 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2128 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH2 0xD4E DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD98 JUMPI PUSH1 0x0 PUSH2 0xD63 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x120 DUP14 ADD MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xD80 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x208E JUMP JUMPDEST ISZERO PUSH2 0xD96 JUMPI PUSH2 0xD93 DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x224D JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0xDA3 DUP3 PUSH2 0x22FD JUMP JUMPDEST SWAP2 POP PUSH2 0xDB5 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDF1 PUSH16 0x80000000000000000000000000000000 PUSH2 0xB72 PUSH2 0xDE8 DUP8 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 DUP8 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0A PUSH2 0xE01 DUP7 PUSH2 0x231F JUMP JUMPDEST PUSH2 0xB72 DUP7 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE23 PUSH2 0xE1A DUP8 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB72 DUP8 PUSH2 0x231F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE55 PUSH2 0xE3F PUSH2 0xE36 DUP10 PUSH2 0x231F JUMP JUMPDEST PUSH2 0xB72 DUP10 PUSH2 0x231F JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x100F JUMP JUMPDEST SWAP1 POP PUSH2 0xE73 PUSH2 0xE6D PUSH2 0xE67 DUP7 DUP7 PUSH2 0x10DE JUMP JUMPDEST DUP5 PUSH2 0x10DE JUMP JUMPDEST DUP3 PUSH2 0x10DE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP4 DUP4 PUSH2 0x10DE JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE9C DUP8 DUP8 SUB PUSH2 0x235C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBC PUSH2 0xC16 PUSH2 0xEAF DUP9 PUSH2 0x116A JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECC DUP3 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEE0 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEF4 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF20 PUSH2 0xF0B DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST PUSH2 0xF1B DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST PUSH2 0xE7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF30 DUP3 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF55 PUSH2 0xF41 PUSH1 0x2 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0x784 DUP5 PUSH2 0xC8A DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x1154 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xFA6 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xFB3 JUMPI POP PUSH1 0x0 PUSH2 0xB23 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xFC1 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xFD8 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xFD4 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xB23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2997 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1048 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2A99 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1096 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x10CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x10D6 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x10F1 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x10FC JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x111D JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x1112 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x111D JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xB23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x29CE JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2895 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x11F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x275C JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x1210 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1243 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x12A2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x1300 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1362 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x13C6 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x142A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x148E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x14F2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1556 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x15BA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1630 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x1661 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1681 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x16B2 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x16D2 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1703 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1723 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1754 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1774 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x17A5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x17C5 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x17F6 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1816 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1847 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1886 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST DUP2 PUSH2 0x18A2 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2929 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1949 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1976 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19A2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19CE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A25 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A50 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A7A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AA4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ACE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AF7 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B20 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B48 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B70 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B97 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BBE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BE4 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C53 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C95 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1CD7 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D19 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D5B JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D9B JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1DDB JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E1B JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E5B JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E6F PUSH1 0x2 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EAE PUSH2 0x1E8E DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0xDC5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x565 DUP10 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xAAB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1ED4 PUSH2 0x1ECB DUP11 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 DUP14 PUSH2 0x7E0 PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0xC8A DUP5 PUSH2 0x23CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF0 DUP5 PUSH2 0x784 PUSH2 0x1EEB DUP6 PUSH2 0x784 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x1F13 JUMPI PUSH2 0x1F0E PUSH2 0xC35 DUP4 PUSH1 0x0 SUB PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x1F1C DUP3 PUSH2 0x1854 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F47 PUSH2 0x1F33 DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0x784 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF55 DUP11 DUP4 PUSH2 0x23DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F88 PUSH2 0x1F7B PUSH2 0x1F6E DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F9F PUSH2 0x1F7B DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FB6 PUSH2 0x1EEB DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FCF DUP3 PUSH2 0x7E0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FE4 DUP10 PUSH2 0x784 DUP11 PUSH2 0x7E0 DUP7 PUSH2 0x1854 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2008 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2036 PUSH2 0x2024 DUP7 PUSH2 0x7E0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x205A PUSH2 0x2052 DUP9 PUSH2 0x7E0 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0xC8A PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x206E DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x207D JUMPI DUP1 PUSH2 0x1FE4 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20A1 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20B1 PUSH1 0x1 PUSH1 0xA PUSH2 0xA78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20E1 PUSH2 0x20D4 PUSH2 0x20C7 DUP9 PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2114 SWAP3 SWAP2 SWAP1 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2134 DUP8 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2166 PUSH2 0x2150 DUP7 PUSH2 0x7E0 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xC8A SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2193 PUSH2 0x2186 DUP11 PUSH2 0x7E0 DUP11 PUSH2 0x7E0 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xA97 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE7E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21AB DUP3 PUSH2 0x784 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x21BA JUMPI DUP9 PUSH2 0x21BC JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x21DD DUP12 DUP12 PUSH2 0x2490 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21EA DUP3 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x220E PUSH2 0x2201 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x2233 JUMPI DUP3 DUP13 DUP4 PUSH2 0x2223 DUP16 PUSH2 0x23F1 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x2240 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2296 PUSH2 0x2273 PUSH2 0x2266 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x2286 DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0x565 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22CD PUSH2 0x22BD PUSH2 0x22B0 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xAAB AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22E1 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB29 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x22F0 JUMPI DUP10 PUSH2 0xC50 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230B PUSH1 0x9 PUSH1 0xA PUSH2 0xA78 JUMP JUMPDEST DUP3 SLT PUSH2 0x2317 JUMPI DUP2 PUSH2 0x666 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x2346 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x666 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2398 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x28CC JUMP JUMPDEST PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 DUP4 PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x23EA JUMPI DUP2 PUSH2 0xA71 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2404 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2418 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x242C DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2440 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2454 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2468 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x247C DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC50 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0x249F PUSH1 0xA PUSH2 0x23B2 JUMP JUMPDEST PUSH2 0x784 PUSH2 0x24BC PUSH2 0x24AF PUSH1 0x6 PUSH2 0x23B2 JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x24C9 PUSH1 0x4 PUSH2 0x23B2 JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xDC5 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA71 DUP4 DUP4 PUSH2 0x256C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25BD JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x25C7 DUP5 DUP5 PUSH2 0x256C JUMP JUMPDEST SWAP2 POP PUSH2 0x25D6 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x256C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25F3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25FE DUP2 PUSH2 0x2B10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x260E DUP2 PUSH2 0x2B10 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xc9 0x2c 0xe0 MLOAD 0xae 0xec 0x25 REVERT DUP11 CALLVALUE SLT 0xd9 ADD 0xe EQ PUSH21 0x2E5061FEF93B7F8E1D3EBB7A634FD0A76C65787065 PUSH19 0x696D656E74616CF564736F6C634300050C0040 ",
				"sourceMap": "331:13561:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;331:13561:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;264:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;525:1593:4;;;;;;;;;:::i;:::-;;;;;;;;320:293:2;;;;;;;;;:::i;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1593:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;767:5;:14;;;754:27;;:9;:27;;;:56;;;;;796:5;:14;;;785:25;;:7;:25;;;754:56;750:726;;;826:26;855:139;878:9;905:7;930:27;950:6;930:19;:27::i;:::-;975:5;855;:139::i;:::-;826:168;;1025:43;1048:19;1025:22;:43::i;:::-;1008:60;;750:726;;;;1101:5;:14;;;1088:27;;:9;:27;;;:56;;;;;1130:5;:14;;;1119:25;;:7;:25;;;1088:56;1085:391;;;1160:26;1189:139;1212:9;1239:7;1264:27;1284:6;1264:19;:27::i;1189:139::-;1160:168;;1359:42;1381:19;1359:21;:42::i;1085:391::-;1432:33;;;;;;;;;;;;;;;;;;;1085:391;1941:138;1967:10;1991:9;2014:7;2035:6;2055:14;1941:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1593:4;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;412:195;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;446:148::-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;:::-;299:53;;182:177;;;;:::o;2124:2987:4:-;2488:14;;;;2291:21;;;;;;;;;;2475:27;;;;;;;:56;;;;;2517:5;:14;;;2506:25;;:7;:25;;;2475:56;2471:433;;;-1:-1:-1;;;;2551:7:4;;;;2576;;;;2605:11;;;;2640:4;2471:433;;;2677:5;:14;;;2664:27;;:9;:27;;;:56;;;;;2706:5;:14;;;2695:25;;:7;:25;;;2664:56;2661:243;;;2740:5;:7;;;2736:11;;2765:5;:7;;;2761:11;;2794:35;2817:5;:11;;;2794:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2786:43;;2661:243;3003:9;3015:125;3067:1;3082;3097:5;3116;:14;;;3015:38;:125::i;:::-;3003:137;;3170:12;3185:122;3207:1;3222;3237:2;3253:5;3272:6;3292:5;3185:8;:122::i;:::-;3170:137;;3548:13;3564:112;3629:33;3652:5;:9;;;3629:18;:16;:18::i;:33::-;3564:30;:6;3588:5;3564:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3548:128;-1:-1:-1;3695:21:4;3702:1;3548:128;3695:21;:13;:21;:::i;:::-;3686:30;;3759:14;3776:47;3804:1;3815:6;3776:20;:47::i;:::-;3759:64;;3882:1;3873:6;:10;3869:135;;;3908:1;3899:10;;3869:135;;;3947:7;3930:13;:1;3936:6;3930:13;:5;:13;:::i;:::-;:24;3926:78;;3979:14;:7;3991:1;3979:14;:11;:14;:::i;:::-;3970:23;;3926:78;4054:15;4072:155;4113:5;:7;;;4134:24;:22;:24::i;:::-;4172:5;:10;;;4196:2;4212:5;4072:27;:155::i;:::-;4252:14;;;;4054:173;;-1:-1:-1;4252:25:4;;4271:5;4252:25;:18;:25;:::i;:::-;4241:8;:36;4237:259;;;4304:14;;;;:25;;4323:5;4304:25;:18;:25;:::i;:::-;4293:36;;4237:259;;;4360:49;4403:5;4360:38;4383:5;:14;;;4360:18;:16;:18::i;:49::-;4349:8;:60;4346:150;;;4436:49;4479:5;4436:38;4459:5;:14;;;4436:18;:16;:18::i;:49::-;4425:60;;4346:150;4540:24;:22;:24::i;:::-;4530:7;;;:34;4574:285;;;;4611:13;:1;4617:6;4611:13;:5;:13;:::i;:::-;4601:7;;;:23;4648:13;:1;4654:6;4648:13;:5;:13;:::i;:::-;4638:7;;;:23;4675:11;;;:22;;;4574:285;;;4738:13;:1;4744:6;4738:13;:5;:13;:::i;:::-;4728:7;;;:23;4775:13;:1;4781:6;4775:13;:5;:13;:::i;:::-;4765:7;;;:23;4816:32;4839:8;4816:18;:16;:18::i;:32::-;4802:11;;;:46;4574:285;4893:23;4910:5;4893:16;:23::i;:::-;4932:106;4970:10;4998:6;5022;4932:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5066:7:4;;;2124:2987;-1:-1:-1;;;;;;;;;;;2124:2987:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;6036:386:8:-;6098:8;6141:1;6129;6122:21;6118:116;;;6159:64;;;;;;;;;;;6118:116;6266:1;6254;6247:21;6243:118;;;6284:66;;;;;;;;;;;6243:118;6374:41;6379:24;6391:1;889:66;6379:4;:24::i;:::-;6412:1;6374:4;:41::i;:::-;6370:45;6036:386;-1:-1:-1;;;6036:386:8:o;5412:116::-;5472:8;5496:25;5501:16;5506:1;889:66;5501:4;:16::i;1676:76::-;889:66;;1676:76::o;2241:186::-;2297:8;1023:66;2321:1;:18;2317:79;;;2355:30;;;;;;;;;;;2317:79;2409:11;2414:1;2418;2417:2;;2409:4;:11::i;4003:195:10:-;4107:18;4148:43;4169:6;4181:9;4177:2;:13;4148:20;:43::i;4003:195::-;;;;;:::o;3364:624:8:-;3420:8;3440:15;3458:12;3468:1;3458:9;:12::i;:::-;3440:30;-1:-1:-1;3484:13:8;;3480:179;;3520:65;3525:12;3535:1;3525:9;:12::i;:::-;3539:45;3544:36;3549:1;3552:27;889:66;3566:12;3576:1;3566:9;:12::i;:::-;3552:4;:27::i;:::-;3544:4;:36::i;:::-;3582:1;3539:4;:45::i;3520:65::-;3513:72;;;;;3480:179;3623:25;3628:16;3633:1;889:66;3628:4;:16::i;:::-;3646:1;3623:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;10842:2006:4:-;11037:6;;11145:102;11164:73;11209:27;11222:13;:1;11228:6;11222:13;:5;:13;:::i;:::-;11209:8;:1;11215;11209:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;11164;:2;11184:6;11164:27;:19;:27;:::i;:73::-;11145:1;;:102;:5;:102;:::i;:::-;11133:114;-1:-1:-1;11257:10:4;11270:42;11289:13;:1;11295:6;11289:13;:5;:13;:::i;:::-;11270:1;;:42;:5;:42;:::i;:::-;11257:55;;11365:12;11380:127;11407:1;11422;11437:2;11453:5;11472:6;11492:5;11380:13;:127::i;:::-;11365:142;;11518:9;11530:146;11557:1;11572;11587:2;11603:5;11622:6;11642:5;11661;11530:13;:146::i;:::-;11518:158;;11687:9;11699:160;11726:1;11741;11756:2;11772:5;11791:6;11811:2;11827:3;11844:5;11699:13;:160::i;:::-;11687:172;;11875:42;11899:2;11903;11907:5;:9;;;11875:23;:42::i;:::-;11871:874;;;11933:9;11967:131;11998:2;12018;12038;12058:3;12079:5;11967:13;:131::i;:::-;11956:142;;;;;;;;12117:42;12141:2;12145;12149:5;:9;;;12117:23;:42::i;:::-;12113:622;;;12179:9;12225:179;12260:2;12284;12308;12332:3;12357:2;12381:5;12225:13;:179::i;:::-;12459:9;;;;12206:198;;-1:-1:-1;12206:198:4;;-1:-1:-1;12206:198:4;-1:-1:-1;12206:198:4;-1:-1:-1;12427:42:4;;12206:198;;;;12427:23;:42::i;:::-;12423:298;;;12498:204;12537:2;12565;12593;12621;12649;12677:3;12498:13;:204::i;:::-;12493:209;;12423:298;12113:622;;11871:874;;12778:17;12792:2;12778:13;:17::i;:::-;12773:22;-1:-1:-1;12831:10:4;12773:22;12838:2;12831:10;:6;:10;:::i;:::-;12824:17;10842:2006;-1:-1:-1;;;;;;;;;;;;10842:2006:4:o;2524:772:8:-;2580:8;2601:18;2622:47;889:66;2636:32;2641:12;2651:1;2641:9;:12::i;:::-;2655;2665:1;2655:9;:12::i;2622:47::-;2601:68;;2757:20;2780:33;2785:13;2796:1;2785:10;:13::i;:::-;2800:12;2810:1;2800:9;:12::i;2780:33::-;2757:56;;2823:20;2846:33;2851:12;2861:1;2851:9;:12::i;:::-;2865:13;2876:1;2865:10;:13::i;2846:33::-;2823:56;;2889:23;2915:49;2920:34;2925:13;2936:1;2925:10;:13::i;:::-;2940;2951:1;2940:10;:13::i;2920:34::-;889:66;2915:4;:49::i;:::-;2889:75;;2982:77;2987:53;2992:32;2997:11;3010:13;2992:4;:32::i;:::-;3026:13;2987:4;:53::i;:::-;3042:16;2982:4;:77::i;:::-;2975:84;2524:772;-1:-1:-1;;;;;;;2524:772:8:o;2053:97::-;2109:8;2133:10;2138:1;2141;2133:4;:10::i;13773:117:4:-;13871:12;13773:117;:::o;1187:790:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:25;:17;1742:2;1720:25;:21;:25;:::i;:::-;1759:23;:12;1776:5;1759:23;:16;:23;:::i;:::-;1690:16;:102::i;:::-;1664:128;;1802:12;1817:40;1840:16;1817:18;:16;:18::i;:40::-;1802:55;;1867:13;1883:64;1915:31;1943:1;1915:20;:31::i;:::-;1883:27;1904:5;1883:16;:5;1893;1883:16;:9;:16;:::i;:64::-;1867:80;1187:790;-1:-1:-1;;;;;;;;;;;;;;1187:790:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4204:207:10:-;4309:19;4359:44;4380:9;4376:2;:13;4360:6;:30;4359:42;:44::i;17769:245:8:-;17825:8;17849:6;;;:16;;-1:-1:-1;17859:6:8;;17849:16;17845:55;;;-1:-1:-1;17888:1:8;17881:8;;17845:55;-1:-1:-1;17913:5:8;;;17917:1;17913;:5;:1;17932:5;;;;;:10;;:24;;;;17955:1;17950;17946;:5;;;;;;:10;;17932:24;17928:80;;;17973:24;;;;;;;;;;;18101:260;18157:8;18181:6;18177:67;;18203:30;;;;;;;;;;;18177:67;1023:66;18257:1;:18;:29;;;;;18279:1;18284:2;18279:7;18257:29;18253:83;;;18301:24;;;;;;;;;;;18253:83;18353:1;18349;:5;;;;;;;18101:260;-1:-1:-1;;;18101:260:8:o;18421:210::-;18501:5;;;18477:8;18521:5;;:14;;;;;18534:1;18530;:5;18521:14;:23;;;;;18543:1;18539;:5;18521:23;18520:54;;;;18554:1;18550;:5;:14;;;;;18563:1;18559;:5;18550:14;:23;;;;;18572:1;18568;:5;18550:23;18516:109;;;18590:24;;;;;;;;;;;6485:97;889:66;6564:11;;;6485:97::o;6817:5160::-;6862:8;889:66;6886:1;:14;6882:74;;;6916:29;;;;;;;;;;;6882:74;6974:1;6969;:6;6965:66;;6991:29;;;;;;;;;;;6965:66;889;7044:1;:12;7040:51;;;-1:-1:-1;7079:1:8;7072:8;;7040:51;1368:66;7104:1;:15;7100:64;;-1:-1:-1;1548:75:8;7135:18;;7100:64;7174:8;7192;7210;7523:66;7511:1;:79;7507:316;;7606:79;;;;;7732:66;889;7711:11;;:88;7707:92;;7507:316;7867:66;7855:1;:79;7851:316;;7950:79;;;;;8076:66;889;8055:11;;:88;8051:92;;7851:316;8210:66;8198:1;:79;8194:314;;8293:79;;;;;8418:66;889;8397:11;;:88;8393:92;;8194:314;8551:66;8539:1;:79;8535:314;;8634:79;;;;;8759:66;889;8738:11;;:88;8734:92;;8535:314;8892:66;8880:1;:79;8876:314;;8975:79;;;;;9100:66;889;9079:11;;:88;9075:92;;8876:314;9233:66;9221:1;:79;9217:314;;9316:79;;;;;9441:66;9328;9420:11;;:88;9416:92;;9217:314;9576:66;9564:1;:79;9560:318;;9659:79;;;;;9786:66;889;9765:11;;:88;9761:92;;9560:318;9924:66;9912:1;:79;9908:320;;10007:79;;;;;10135:66;889;10114:11;;:88;10110:92;;9908:320;10275:66;10263:1;:79;10259:322;;10358:79;;;;;10487:66;889;10466:11;;:88;10462:92;;10259:322;10746:11;;;;-1:-1:-1;10746:11:8;;-1:-1:-1;889:66:8;10771:5;;;:15;;-1:-1:-1;10849:35:8;10806:39;;;10801:45;;:83;10796:88;;;;889:66;10894:1;10890;:5;:15;;;;;;10886:19;;10997:35;10992:1;10954:35;:39;10949:1;:45;:83;;;;;;10944:88;;;;889:66;11042:1;11038;:5;:15;;;;;;11034:19;;11145:35;11140:1;11102:35;:39;11097:1;:45;:83;;;;;;11092:88;;;;889:66;11190:1;11186;:5;:15;;;;;;11182:19;;11293:35;11288:1;11250:35;:39;11245:1;:45;:83;;;;;;11240:88;;;;889:66;11338:1;11334;:5;:15;;;;;;11330:19;;11441:35;11436:1;11398:35;:39;11393:1;:45;:83;;;;;;11388:88;;;;889:66;11486:1;11482;:5;:15;;;;;;11478:19;;11589:35;11584:1;11546:35;:39;11541:1;:45;:83;;;;;;11536:88;;;;889:66;11634:1;11630;:5;:15;;;;;;11626:19;;11737:35;11732:1;11694:35;:39;11689:1;:45;:83;;;;;;11684:88;;;;889:66;11782:1;11778;:5;:15;;;;;;11774:19;;11885:35;11880:1;11842:35;:39;11837:1;:45;:83;;;;;;11832:88;;;;6817:5160;;;;;;:::o;12074:5613::-;12120:8;1548:75;12144:15;;12140:105;;;-1:-1:-1;12233:1:8;12226:8;;12140:105;12258:6;12254:51;;-1:-1:-1;889:66:8;12280:14;;12254:51;1488:1;12318;:15;12314:77;;;12350:30;;;;;;;;;;;12314:77;889:66;12860;12856:70;;12940:5;;;:15;;;12966:18;12962:22;;12957:27;;;;;12856:70;;13024:5;;;:15;13020:19;;13046:1;13050:18;13046:22;13041:27;;;;889:66;13112:1;13108;:5;:15;;;;;;13104:19;;13130:1;13134:18;13130:22;13125:27;;;;889:66;13196:1;13192;:5;:15;;;;;;13188:19;;13214:1;13218:18;13214:22;13209:27;;;;889:66;13280:1;13276;:5;:15;;;;;;13272:19;;13298:1;13302:18;13298:22;13293:27;;;;889:66;13364:1;13360;:5;:15;;;;;;13356:19;;13382:1;13386:18;13382:22;13377:27;;;;889:66;13448:1;13444;:5;:15;;;;;;13440:19;;13466:1;13470:18;13466:22;13461:27;;;;889:66;13532:1;13528;:5;:15;;;;;;13524:19;;13550:1;13554:18;13550:22;13545:27;;;;889:66;13616:1;13612;:5;:15;;;;;;13608:19;;13634:1;13638:18;13634:22;13629:27;;;;889:66;13700:1;13696;:5;:15;;;;;;13692:19;;13718:1;13722:18;13718:22;13713:27;;;;889:66;13784:1;13780;:5;:15;;;;;;13776:19;;13802:1;13806:18;13802:22;13797:27;;;;889:66;13868:1;13864;:5;:15;;;;;;13860:19;;13886:1;13890:18;13886:22;13881:27;;;;889:66;13952:1;13948;:5;:15;;;;;;13944:19;;13970:1;13974:18;13970:22;13965:27;;;;889:66;14036:1;14032;:5;:15;;;;;;14028:19;;14054:1;14058:18;14054:22;14049:27;;;;889:66;14120:1;14116;:5;:15;;;;;;14112:19;;14138:1;14142:18;14138:22;14133:27;;;;889:66;14204:1;14200;:5;:15;;;;;;14196:19;;14222:1;14226:18;14222:22;14217:27;;;;889:66;14288:1;14284;:5;:15;;;;;;14280:19;;14306:1;14310:18;14306:22;14301:27;;;;889:66;14372:1;14368;:5;:15;;;;;;14364:19;;14390:1;14394:18;14390:22;14385:27;;;;889:66;14456:1;14452;:5;:15;;;;;14686:2;;;;;;14540:18;14452:15;;;14469:27;;;14536:22;:26;;889:66;14536:36;;14452:15;-1:-1:-1;14733:66:8;14722:78;;14721:85;14717:304;;14930:66;14837;14826:78;;:171;14822:175;;14717:304;15065:66;15054:78;;15053:85;15049:304;;15262:66;15169;15158:78;;:171;15154:175;;15049:304;15396:66;15385:78;;15384:85;15380:303;;15593:66;15500;15489:78;;:171;15485:175;;15380:303;15726:66;15715:78;;15714:85;15710:303;;15923:66;15830;15819:78;;:171;15815:175;;15710:303;16056:66;16045:78;;16044:85;16040:303;;16253:66;16160;16149:78;;:171;16145:175;;16040:303;16386:66;16375:78;;16374:85;16370:303;;16583:66;16490;16479:78;;:171;16475:175;;16370:303;16718:66;16707:78;;16706:85;16702:305;;16915:66;16822;16811:78;;:171;16807:175;;16702:305;17053:66;17042:78;;17041:85;17037:306;;17250:66;17157;17146:78;;:171;17142:175;;17037:306;17390:66;17379:78;;17378:85;17374:307;;17587:66;17494;17483:78;;:171;17479:175;;17374:307;12074:5613;;;;;:::o;5390:942:4:-;5590:6;5612:10;5625:31;5653:1;5625:20;:31::i;:::-;5612:44;;5666:10;5679:65;5722:21;5741:1;5722:5;:14;;;:18;;:21;;;;:::i;:::-;5679:38;5714:2;5679:30;5707:1;5679:23;5687:5;:14;;;5679:3;:7;;:23;;;;:::i;:65::-;5666:78;;5755:12;5770:132;5800:92;5890:1;5800:72;5870:1;5800:52;5849:2;5800:31;5828:1;5800:20;:31::i;:92::-;5770:12;:3;:10;:12::i;:132::-;5755:147;;5912:12;5929:82;6007:3;5929:60;:42;5965:5;5929:18;:16;:18::i;:42::-;:58;:60::i;:82::-;5927:85;;5912:100;;6024:12;6049:1;6040:5;:10;;6039:121;;6092:68;6132:14;6134:5;6133:6;;6132:12;:14::i;6092:68::-;6039:121;;;6066:11;:5;:9;:11::i;:::-;6024:136;-1:-1:-1;6171:12:4;6186:60;6234:11;:3;6242:2;6234:11;:7;:11;:::i;:::-;6186:30;6187:4;;;;6210:5;6186:30;:23;:30;:::i;:60::-;6171:75;;6257:12;6272:31;6289:6;6297:5;6272:16;:31::i;6338:544::-;6560:6;;6597:27;6603:20;6609:13;:5;6619:2;6609:13;:9;:13;:::i;:::-;6603:1;;:20;:5;:20;:::i;:::-;6597:1;;:27;:5;:27;:::i;:::-;6582:42;-1:-1:-1;6634:12:4;6649:19;6655:12;:1;6661:5;6655:12;:5;:12;:::i;6649:19::-;6634:34;-1:-1:-1;6681:12:4;6696:21;:16;:5;6634:34;6696:16;:9;:16;:::i;:21::-;6681:36;;6730:12;6745:49;6788:5;6745:38;6768:5;:14;;;6745:18;:16;:18::i;:49::-;6730:64;;6804:12;6819:34;6846:6;6819:22;6835:5;6819:11;:5;:9;:11::i;:34::-;6804:49;6338:544;-1:-1:-1;;;;;;;;;;;;;6338:544:4:o;6952:688::-;7191:6;;7228:11;:3;7236:2;7228:11;:7;:11;:::i;:::-;7213:26;;7249:12;7264:115;7296:73;7365:3;7296:51;7332:5;:14;;;7296:18;:16;:18::i;:73::-;7264:14;;;;;:115;:18;:115;:::i;:::-;7249:130;;7389:12;7404:118;7440:72;7509:2;7440:51;7476:5;:14;;;7440:18;:16;:18::i;:72::-;7404:18;:16;:18::i;:118::-;7389:133;-1:-1:-1;7532:12:4;7547:16;:5;7389:133;7547:16;:9;:16;:::i;:::-;7532:31;;7588:5;7580;:13;:53;;7628:5;7580:53;;;-1:-1:-1;7608:5:4;;7573:60;-1:-1:-1;;;;;;;;;;;6952:688:4:o;10334:442::-;10465:27;;10521:10;:2;10528;10521:10;:6;:10;:::i;:::-;10508:23;;10541:10;10554:43;10582:1;10593:2;10554:20;:43::i;:::-;10541:56;;10607:10;10620:96;10641:65;10666:26;10689:2;10666:18;:16;:18::i;:26::-;10641:3;;:65;:7;:65;:::i;:::-;10620:3;;:96;:7;:96;:::i;:::-;10607:109;;10732:10;10734:3;10738;10732:10;;;;;;;;;;;;;;;;10760:9;;;;10334:442;-1:-1:-1;;;;;10334:442:4:o;7646:766::-;7823:12;7837:9;7867:39;7903:2;7867:35;:39::i;:::-;7862:44;;7916:12;7931:152;7988:81;8065:3;7988:55;8028:5;:14;;;7988:18;:16;:18::i;:81::-;7931:14;;;;:22;;7950:2;7931:22;:18;:22;:::i;:152::-;7916:167;;8093:12;8108:156;8145:105;8247:2;8145:80;8222:2;8145:55;8185:5;:14;;;8145:18;:16;:18::i;:105::-;8108:2;;:156;:19;:156;:::i;:::-;8093:171;-1:-1:-1;8274:9:4;8286:24;8093:171;8286:13;:2;8293:5;8286:13;:6;:13;:::i;:24::-;8274:36;;8337:2;8329:5;:10;:47;;8374:2;8329:47;;;8354:5;8329:47;8321:55;-1:-1:-1;;;;7646:766:4;;;;;;;;:::o;8783:844::-;8992:12;9018;9044;9070;9131;9146:17;9156:2;9160;9146:9;:17::i;:::-;9131:32;;9173:11;9187:42;9223:5;9187:35;:42::i;:::-;9173:56;-1:-1:-1;9251:12:4;9266:22;9274:13;:2;9281:5;9274:13;:6;:13;:::i;:::-;9266:3;;:22;:7;:22;:::i;:::-;9251:37;;9310:5;9302:4;:13;9298:323;;9356:5;9379:2;9399:4;9421:39;9457:2;9421:35;:39::i;:::-;9331:143;;;;;;;;;;;;;9298:323;-1:-1:-1;9530:2:4;;-1:-1:-1;9550:5:4;;-1:-1:-1;9573:2:4;;-1:-1:-1;9593:4:4;-1:-1:-1;8783:844:4;;;;;;;;;;;;:::o;9633:490::-;9811:6;;9848:77;9905:19;9913:10;:2;9920;9913:10;:6;:10;:::i;:::-;9905:3;;:19;:7;:19;:::i;:::-;9848:39;9876:10;:2;9883;9876:10;:6;:10;:::i;:::-;9848;:2;9855;9848:10;:6;:10;:::i;:77::-;9833:92;-1:-1:-1;9935:12:4;9950:60;9991:18;9998:10;:2;10005;9998:10;:6;:10;:::i;:::-;9991:2;;:18;:6;:18;:::i;:::-;9950:23;:2;9970;9950:23;:19;:23;:::i;:60::-;9935:75;-1:-1:-1;10020:12:4;10035:16;:5;9935:75;10035:16;:9;:16;:::i;:::-;10020:31;;10077:2;10069:5;:10;:47;;10114:2;10069:47;;;10094:5;10062:54;-1:-1:-1;;;;;;;;;9633:490:4:o;10129:199::-;10211:6;10245:43;10273:1;10284:2;10245:20;:43::i;:::-;10240:2;:48;:81;;10319:2;10240:81;;;-1:-1:-1;10303:1:4;;10129:199;-1:-1:-1;10129:199:4:o;6588:138:8:-;6641:8;6672:1;6668;:5;:51;;798:34;6701:1;6700:2;;:18;6698:21;;6668:51;;;-1:-1:-1;798:34:8;6677:17;;6588:138::o;5670:216::-;5721:8;5764:1;5752;5745:21;5741:101;;;5782:49;;;;;;;;;;;5741:101;5855:24;5867:1;889:66;5855:4;:24::i;5246:97::-;5296:8;5320:16;5325:1;889:66;5320:4;:16::i;1870:92::-;1919:8;1946:9;1950:1;1953;1946:3;:9::i;1758:106::-;1814:8;1847:1;1842;:6;;1841:16;;1856:1;1841:16;;;-1:-1:-1;1852:1:8;;1758:106;-1:-1:-1;1758:106:8:o;2988:614:10:-;3082:6;;3125:14;3134:4;;3125:14;:8;:14;:::i;:::-;3104:35;-1:-1:-1;3149:16:10;3168:21;:4;3104:35;3168:21;:8;:21;:::i;:::-;3149:40;-1:-1:-1;3199:16:10;3218:24;3149:40;;3218:24;:13;:24;:::i;:::-;3199:43;-1:-1:-1;3252:19:10;3274:24;3199:43;;3274:24;:13;:24;:::i;:::-;3252:46;-1:-1:-1;3308:23:10;3334:30;3252:46;;3334:30;:16;:30;:::i;:::-;3308:56;-1:-1:-1;3374:24:10;3401:38;3308:56;;3401:38;:20;:38;:::i;:::-;3374:65;-1:-1:-1;3449:18:10;3470:34;3374:65;3492:11;3470:34;:21;:34;:::i;:::-;3449:55;-1:-1:-1;3514:20:10;3537:28;3449:55;;3537:28;:15;:28;:::i;8517:259:4:-;8592:6;8621:148;8736:32;8764:2;8736:20;:32::i;:::-;8621:97;8678:39;8685:31;8713:1;8685:20;:31::i;:::-;8678:2;;:39;:6;:39;:::i;:::-;8621;8628:31;8656:1;8628:20;:31::i;:::-;8621:2;;:39;:6;:39;:::i;331:13561::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;18406:42;18395:54;;18978:35;;18968:2;;19027:1;;19017:12;279:241;;383:2;371:9;362:7;358:23;354:32;351:2;;;-1:-1;;389:12;351:2;451:53;496:7;472:22;451:53;;527:366;;;648:2;636:9;627:7;623:23;619:32;616:2;;;-1:-1;;654:12;616:2;716:53;761:7;737:22;716:53;;;706:63;;824:53;869:7;806:2;849:9;845:22;824:53;;;814:63;;610:283;;;;;;900:491;;;;1038:2;1026:9;1017:7;1013:23;1009:32;1006:2;;;-1:-1;;1044:12;1006:2;85:6;72:20;97:33;124:5;97:33;;;1096:63;-1:-1;1196:2;1235:22;;72:20;97:33;72:20;97:33;;;1000:391;;1204:63;;-1:-1;;;1304:2;1343:22;;;;209:20;;1000:391;7913:213;18406:42;18395:54;;;;1618:37;;8031:2;8016:18;;8002:124;8133:340;18406:42;18395:54;;;1477:58;;18395:54;;8459:2;8444:18;;1618:37;8287:2;8272:18;;8258:215;8480:675;18406:42;18395:54;;;1477:58;;18395:54;;;8891:2;8876:18;;1618:37;18395:54;;;;8974:2;8959:18;;1618:37;9057:2;9042:18;;1847:36;;;;9140:3;9125:19;;1847:36;;;;8718:3;8703:19;;8689:466;9162:443;18406:42;18395:54;;;;1477:58;;9510:2;9495:18;;1847:36;;;;9591:2;9576:18;;1847:36;9340:2;9325:18;;9311:294;9612:1521;18229:13;;18222:21;1732:34;;18406:42;18395:54;;;10208:2;10193:18;;1618:37;18395:54;;;;10291:2;10276:18;;1618:37;10372:2;10357:18;;1847:36;;;;10453:3;10438:19;;1847:36;;;;10537:3;10522:19;;1847:36;;;;10619:3;10604:19;;1847:36;;;;10703:3;10688:19;;1847:36;10785:3;10770:19;;1847:36;10867:3;10852:19;;1847:36;10952:3;10937:19;;1847:36;11035:3;11020:19;;1847:36;;;;11118:3;11103:19;;1847:36;10049:3;10034:19;;10020:1113;11140:316;1847:36;;;11442:2;11427:18;;1847:36;11282:2;11267:18;;11253:203;11463:407;11654:2;11668:47;;;2120:2;11639:18;;;17997:19;2156:66;18037:14;;;2136:87;2242:12;;;11625:245;11877:407;12068:2;12082:47;;;2493:2;12053:18;;;17997:19;2529:66;18037:14;;;2509:87;2615:12;;;12039:245;12291:407;12482:2;12496:47;;;2866:2;12467:18;;;17997:19;2902:66;18037:14;;;2882:87;2988:12;;;12453:245;12705:407;12896:2;12910:47;;;3239:2;12881:18;;;17997:19;3275:66;18037:14;;;3255:87;3361:12;;;12867:245;13119:407;13310:2;13324:47;;;3612:2;13295:18;;;17997:19;3648:66;18037:14;;;3628:87;3749:66;3735:12;;;3728:88;3835:12;;;13281:245;13533:407;13724:2;13738:47;;;4086:2;13709:18;;;17997:19;4122:66;18037:14;;;4102:87;4208:12;;;13695:245;13947:407;14138:2;14152:47;;;4459:2;14123:18;;;17997:19;4495:66;18037:14;;;4475:87;4596:66;4582:12;;;4575:88;4682:12;;;14109:245;14361:407;14552:2;14566:47;;;4933:2;14537:18;;;17997:19;4969:66;18037:14;;;4949:87;5055:12;;;14523:245;14775:407;14966:2;14980:47;;;5306:2;14951:18;;;17997:19;5342:66;18037:14;;;5322:87;5428:12;;;14937:245;15189:407;15380:2;15394:47;;;5679:2;15365:18;;;17997:19;5715:66;18037:14;;;5695:87;5801:12;;;15351:245;15603:407;15794:2;15808:47;;;6052:2;15779:18;;;17997:19;6088:66;18037:14;;;6068:87;6174:12;;;15765:245;16017:407;16208:2;16222:47;;;6425:2;16193:18;;;17997:19;6461:66;18037:14;;;6441:87;6547:12;;;16179:245;16431:407;16622:2;16636:47;;;6798:2;16607:18;;;17997:19;6834:66;18037:14;;;6814:87;6935:66;6921:12;;;6914:88;7021:12;;;16593:245;16845:407;17036:2;17050:47;;;7272:2;17021:18;;;17997:19;7308:66;18037:14;;;7288:87;7394:12;;;17007:245;17259:407;17450:2;17464:47;;;7645:2;17435:18;;;17997:19;7681:66;18037:14;;;7661:87;7767:12;;;17421:245;17673:213;1847:36;;;17791:2;17776:18;;17762:124;18919:117;18406:42;19006:5;18395:54;18981:5;18978:35;18968:2;;19027:1;;19017:12"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"libs/LibToken.sol": {
			"id": 11
		},
		"core/State.sol": {
			"id": 3
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"interfaces/IERC20.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000)); // Good for USDC, may vary w token.\n        if (deltaB > 0) {\n            deltaB = 0;\n        } else if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n        }\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA < LibFixedMath.one().div(state.eToKappa).mul(pBarA)) {\n            newPBarA = LibFixedMath.one().div(state.eToKappa).mul(pBarA);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = LibScamMath.computeBaseToOneHundred(rl);\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis = LibScamMath.computeBaseToOneHundred(term1);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                LibScamMath.computeBaseToOneHundred(rh)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n        returns (int256)\n    {\n        return rl < LibFixedMath.toFixed(int256(9), int256(10))\n            ? 0\n            : rl;\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n                }\n            }\n        }\n\n        // Step 6\n        rl = _computeStep6(rl);\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.div(pA),\n            betaToDeltaT.div(pBarA)\n        );\n        int256 term3 = LibFixedMath.one().div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n"
	},
	"sourceTreeHashHex": "0x0fff0cc5765ea3894706cb9f1cae6fa8663310081ebfdcb3b118b9664d4a469f",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}