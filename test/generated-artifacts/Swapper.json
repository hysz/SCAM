{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50611975806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df791e5014610030575b600080fd5b61004361003e366004611640565b610045565b005b61004d6115b3565b5060408051610180810182526000805473ffffffffffffffffffffffffffffffffffffffff9081168352600154166020830152600254928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c54610160820152906100e0836103de565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156101445750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561016357505050506040820151606083015160808401516001610215565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156101bb5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156101da5785606001519350856040015192508560a001519150610215565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906116f8565b60405180910390fd5b6000610224858585898b61043a565b9050600061026461024889610100015161023c610506565b9063ffffffff61051a16565b610258898563ffffffff61058a16565b9063ffffffff61058a16565b905061027760008263ffffffff61051a16565b90506000811315610286575060005b82156102bb5761029c868863ffffffff6105b616565b60408901526102b1858263ffffffff6105b616565b60608901526102e6565b6102cb858263ffffffff6105b616565b60408901526102e0868863ffffffff6105b616565b60608901525b87516000805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560208a0151600180549190931691161790556040808901516002556060890151600355608089015160045560a089015160055560c089015160065560e0890151600755610100890151600855610120890151600955610140890151600a55610160890151600c55517f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea906103c99033908e908e908c908790611680565b60405180910390a15050505050505050505050565b60008082121561041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611766565b610434826f800000000000000000000000000000006105c2565b92915050565b60008061044c85878560e0015161062d565b9050600081816104628a8863ffffffff6105b616565b905060005b8661012001518110156104f75760006104808585610676565b9050600061049c610497838d63ffffffff6106aa16565b6106cf565b905060006104d36104b38c8563ffffffff61058a16565b6104c785610258898763ffffffff61058a16565b9063ffffffff6105b616565b90508c8113156104e5578295506104e9565b8296505b505050806001019050610467565b50919998505050505050505050565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611868565b610583838360000361077e565b9392505050565b60006f800000000000000000000000000000006105a784846105c2565b816105ae57fe5b059392505050565b6000610583838361077e565b6000826105d157506000610434565b50818102818382816105df57fe5b051415806105f65750828282816105f257fe5b0514155b15610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906117fa565b600061066e61066161065c61065061064b878963ffffffff6106aa16565b6107f4565b6102588661023c610506565b610ede565b859063ffffffff61058a16565b949350505050565b600061058361068e610686610506565b6104c7610506565b61069e858563ffffffff6105b616565b9063ffffffff6106aa16565b60006105836106c9846f800000000000000000000000000000006105c2565b836114ec565b6000806106e2838063ffffffff61058a16565b905060006106f6848363ffffffff61058a16565b9050600061070a828063ffffffff61058a16565b9050600061071e828063ffffffff61058a16565b90506000610732828063ffffffff61058a16565b90506000610746828063ffffffff61058a16565b9050600061075a828063ffffffff61058a16565b9050600061076e828863ffffffff61058a16565b985050505050505050505b919050565b8181016000831280156107915750600082125b801561079c57508281135b806107bd57506000831380156107b25750600082135b80156107bd57508281125b15610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611831565b60006f80000000000000000000000000000000821315610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c9061172f565b6000821361087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906116c1565b6f8000000000000000000000000000000082141561089a57506000610779565b640733048c5a82136108cd57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610779565b60008060006a01c8464f76164760000000851361092c577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361098a577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136109ec577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610a50577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610ab4577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610b18577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610b7c577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610be0577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610c44577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610cba57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610ceb57fe5b05840193506f8000000000000000000000000000000081830281610d0b57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610d3c57fe5b05840193506f8000000000000000000000000000000081830281610d5c57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281610d8d57fe5b05840193506f8000000000000000000000000000000081830281610dad57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281610dde57fe5b05840193506f8000000000000000000000000000000081830281610dfe57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281610e2f57fe5b05840193506f8000000000000000000000000000000081830281610e4f57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281610e8057fe5b05840193506f8000000000000000000000000000000081830281610ea057fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281610ed157fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215610f1057506000610779565b81610f2c57506f80000000000000000000000000000000610779565b6000821315610f67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906117c3565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281610fd357fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161100057fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161102c57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161105857fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161108457fe5b059050806536e0f639b80002830192506f80000000000000000000000000000000828202816110af57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816110da57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161110457fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161112e57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161115857fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161118157fe5b059050806301a9d48002830192506f80000000000000000000000000000000828202816111aa57fe5b05905080621c638002830192506f80000000000000000000000000000000828202816111d257fe5b059050806201c63802830192506f80000000000000000000000000000000828202816111fa57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161122157fe5b0590508061017c02830192506f800000000000000000000000000000008282028161124857fe5b05905080601402830192506f800000000000000000000000000000008282028161126e57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156112dd577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b70080000000000000000000000000000000084161561131f577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561136157701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156113a3577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156113e55770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611425576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611465576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156114a5576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156114e5576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b600081611525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c9061189f565b7f8000000000000000000000000000000000000000000000000000000000000000831480156115735750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156115aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906118d6565b8183816105ae57fe5b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611654578283fd5b833561165f8161190d565b9250602084013561166f8161190d565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff8116811461192f57600080fd5b5056fea365627a7a723158200ec94775c3b944dd1b410f5e6d64529245221dea09a6fb9a8f1e2362765e2ff06c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1975 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x1640 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x15B3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 PUSH2 0xE0 DUP4 PUSH2 0x3DE JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x144 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x163 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x215 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1BB JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1DA JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x224 DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x43A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x264 PUSH2 0x248 DUP10 PUSH2 0x100 ADD MLOAD PUSH2 0x23C PUSH2 0x506 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x51A AND JUMP JUMPDEST PUSH2 0x258 DUP10 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH2 0x277 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x51A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x286 JUMPI POP PUSH1 0x0 JUMPDEST DUP3 ISZERO PUSH2 0x2BB JUMPI PUSH2 0x29C DUP7 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2B1 DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE PUSH2 0x2E6 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2E0 DUP7 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE JUMPDEST DUP8 MLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 DUP11 ADD MLOAD PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 DUP10 ADD MLOAD PUSH1 0x2 SSTORE PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH1 0x7 SSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH1 0x9 SSTORE PUSH2 0x140 DUP10 ADD MLOAD PUSH1 0xA SSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH1 0xC SSTORE MLOAD PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA SWAP1 PUSH2 0x3C9 SWAP1 CALLER SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP13 SWAP1 DUP8 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x41A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x434 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44C DUP6 DUP8 DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x62D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP2 PUSH2 0x462 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 PUSH2 0x120 ADD MLOAD DUP2 LT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 PUSH2 0x480 DUP6 DUP6 PUSH2 0x676 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49C PUSH2 0x497 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH2 0x6CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4D3 PUSH2 0x4B3 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST PUSH2 0x4C7 DUP6 PUSH2 0x258 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 POP DUP13 DUP2 SGT ISZERO PUSH2 0x4E5 JUMPI DUP3 SWAP6 POP PUSH2 0x4E9 JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x467 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x583 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x77E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5A7 DUP5 DUP5 PUSH2 0x5C2 JUMP JUMPDEST DUP2 PUSH2 0x5AE JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 DUP4 DUP4 PUSH2 0x77E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5D1 JUMPI POP PUSH1 0x0 PUSH2 0x434 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x5DF JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x5F6 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x5F2 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66E PUSH2 0x661 PUSH2 0x65C PUSH2 0x650 PUSH2 0x64B DUP8 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0x258 DUP7 PUSH2 0x23C PUSH2 0x506 JUMP JUMPDEST PUSH2 0xEDE JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH2 0x68E PUSH2 0x686 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x4C7 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x69E DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH2 0x6C9 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5C2 JUMP JUMPDEST DUP4 PUSH2 0x14EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E2 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6F6 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x70A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x71E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x732 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x746 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x75A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x76E DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x791 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x79C JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x7BD JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x7B2 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x7BD JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x16C1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x89A JUMPI POP PUSH1 0x0 PUSH2 0x779 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x8CD JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x92C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x98A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x9EC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xA50 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xAB4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xB18 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xB7C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xBE0 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xC44 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xCBA JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xCEB JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xD0B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xD3C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xD5C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0xD8D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDAD JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0xDDE JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDFE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0xE2F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE4F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0xE80 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xEA0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0xED1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0xF10 JUMPI POP PUSH1 0x0 PUSH2 0x779 JUMP JUMPDEST DUP2 PUSH2 0xF2C JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0xF67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0xFD3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1000 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x102C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1058 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1084 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10AF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10DA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1104 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x112E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1158 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1181 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11AA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1221 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1248 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x126E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x12DD JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x131F JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1361 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13A3 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13E5 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1425 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1465 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14A5 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14E5 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1525 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x189F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1573 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x15AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x18D6 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x5AE JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1654 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x165F DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x166F DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x192F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xE 0xC9 SELFBALANCE PUSH22 0xC3B944DD1B410F5E6D64529245221DEA09A6FB9A8F1E 0x23 PUSH3 0x765E2F CREATE PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "265:3640:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:3640:3;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063df791e5014610030575b600080fd5b61004361003e366004611640565b610045565b005b61004d6115b3565b5060408051610180810182526000805473ffffffffffffffffffffffffffffffffffffffff9081168352600154166020830152600254928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600c54610160820152906100e0836103de565b825190915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156101445750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561016357505050506040820151606083015160808401516001610215565b856020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156101bb5750855173ffffffffffffffffffffffffffffffffffffffff8981169116145b156101da5785606001519350856040015192508560a001519150610215565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906116f8565b60405180910390fd5b6000610224858585898b61043a565b9050600061026461024889610100015161023c610506565b9063ffffffff61051a16565b610258898563ffffffff61058a16565b9063ffffffff61058a16565b905061027760008263ffffffff61051a16565b90506000811315610286575060005b82156102bb5761029c868863ffffffff6105b616565b60408901526102b1858263ffffffff6105b616565b60608901526102e6565b6102cb858263ffffffff6105b616565b60408901526102e0868863ffffffff6105b616565b60608901525b87516000805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560208a0151600180549190931691161790556040808901516002556060890151600355608089015160045560a089015160055560c089015160065560e0890151600755610100890151600855610120890151600955610140890151600a55610160890151600c55517f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea906103c99033908e908e908c908790611680565b60405180910390a15050505050505050505050565b60008082121561041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611766565b610434826f800000000000000000000000000000006105c2565b92915050565b60008061044c85878560e0015161062d565b9050600081816104628a8863ffffffff6105b616565b905060005b8661012001518110156104f75760006104808585610676565b9050600061049c610497838d63ffffffff6106aa16565b6106cf565b905060006104d36104b38c8563ffffffff61058a16565b6104c785610258898763ffffffff61058a16565b9063ffffffff6105b616565b90508c8113156104e5578295506104e9565b8296505b505050806001019050610467565b50919998505050505050505050565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611868565b610583838360000361077e565b9392505050565b60006f800000000000000000000000000000006105a784846105c2565b816105ae57fe5b059392505050565b6000610583838361077e565b6000826105d157506000610434565b50818102818382816105df57fe5b051415806105f65750828282816105f257fe5b0514155b15610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906117fa565b600061066e61066161065c61065061064b878963ffffffff6106aa16565b6107f4565b6102588661023c610506565b610ede565b859063ffffffff61058a16565b949350505050565b600061058361068e610686610506565b6104c7610506565b61069e858563ffffffff6105b616565b9063ffffffff6106aa16565b60006105836106c9846f800000000000000000000000000000006105c2565b836114ec565b6000806106e2838063ffffffff61058a16565b905060006106f6848363ffffffff61058a16565b9050600061070a828063ffffffff61058a16565b9050600061071e828063ffffffff61058a16565b90506000610732828063ffffffff61058a16565b90506000610746828063ffffffff61058a16565b9050600061075a828063ffffffff61058a16565b9050600061076e828863ffffffff61058a16565b985050505050505050505b919050565b8181016000831280156107915750600082125b801561079c57508281135b806107bd57506000831380156107b25750600082135b80156107bd57508281125b15610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90611831565b60006f80000000000000000000000000000000821315610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c9061172f565b6000821361087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906116c1565b6f8000000000000000000000000000000082141561089a57506000610779565b640733048c5a82136108cd57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610779565b60008060006a01c8464f76164760000000851361092c577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361098a577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136109ec577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513610a50577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513610ab4577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513610b18577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be58280000000000000000008513610b7c577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513610be0577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513610c44577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f8000000000000000000000000000000081830281610cba57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa03830281610ceb57fe5b05840193506f8000000000000000000000000000000081830281610d0b57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281610d3c57fe5b05840193506f8000000000000000000000000000000081830281610d5c57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281610d8d57fe5b05840193506f8000000000000000000000000000000081830281610dad57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281610dde57fe5b05840193506f8000000000000000000000000000000081830281610dfe57fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281610e2f57fe5b05840193506f8000000000000000000000000000000081830281610e4f57fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281610e8057fe5b05840193506f8000000000000000000000000000000081830281610ea057fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281610ed157fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215610f1057506000610779565b81610f2c57506f80000000000000000000000000000000610779565b6000821315610f67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906117c3565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281610fd357fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161100057fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161102c57fe5b05905080660c0135dca0400002830192506f800000000000000000000000000000008282028161105857fe5b059050806601b707b1cdc00002830192506f800000000000000000000000000000008282028161108457fe5b059050806536e0f639b80002830192506f80000000000000000000000000000000828202816110af57fe5b05905080650618fee9f80002830192506f80000000000000000000000000000000828202816110da57fe5b05905080649c197dcc0002830192506f800000000000000000000000000000008282028161110457fe5b05905080640e30dce40002830192506f800000000000000000000000000000008282028161112e57fe5b0590508064012ebd130002830192506f800000000000000000000000000000008282028161115857fe5b059050806317499f0002830192506f800000000000000000000000000000008282028161118157fe5b059050806301a9d48002830192506f80000000000000000000000000000000828202816111aa57fe5b05905080621c638002830192506f80000000000000000000000000000000828202816111d257fe5b059050806201c63802830192506f80000000000000000000000000000000828202816111fa57fe5b05905080611ab802830192506f800000000000000000000000000000008282028161122157fe5b0590508061017c02830192506f800000000000000000000000000000008282028161124857fe5b05905080601402830192506f800000000000000000000000000000008282028161126e57fe5b600095909503946721c3677c82b400009190059384010582016f80000000000000000000000000000000019290507010000000000000000000000000000000008416156112dd577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b70080000000000000000000000000000000084161561131f577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561136157701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b7002000000000000000000000000000000008416156113a3577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156113e55770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611425576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611465576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156114a5576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156114e5576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b600081611525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c9061189f565b7f8000000000000000000000000000000000000000000000000000000000000000831480156115735750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b156115aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c906118d6565b8183816105ae57fe5b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215611654578283fd5b833561165f8161190d565b9250602084013561166f8161190d565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff8116811461192f57600080fd5b5056fea365627a7a723158200ec94775c3b944dd1b410f5e6d64529245221dea09a6fb9a8f1e2362765e2ff06c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x1640 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x15B3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x1 SLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE SWAP1 PUSH2 0xE0 DUP4 PUSH2 0x3DE JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x144 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x163 JUMPI POP POP POP POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x215 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1BB JUMPI POP DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1DA JUMPI DUP6 PUSH1 0x60 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x40 ADD MLOAD SWAP3 POP DUP6 PUSH1 0xA0 ADD MLOAD SWAP2 POP PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x224 DUP6 DUP6 DUP6 DUP10 DUP12 PUSH2 0x43A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x264 PUSH2 0x248 DUP10 PUSH2 0x100 ADD MLOAD PUSH2 0x23C PUSH2 0x506 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x51A AND JUMP JUMPDEST PUSH2 0x258 DUP10 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH2 0x277 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x51A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x286 JUMPI POP PUSH1 0x0 JUMPDEST DUP3 ISZERO PUSH2 0x2BB JUMPI PUSH2 0x29C DUP7 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2B1 DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE PUSH2 0x2E6 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2E0 DUP7 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE JUMPDEST DUP8 MLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 DUP11 ADD MLOAD PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 DUP10 ADD MLOAD PUSH1 0x2 SSTORE PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH1 0x7 SSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH1 0x9 SSTORE PUSH2 0x140 DUP10 ADD MLOAD PUSH1 0xA SSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH1 0xC SSTORE MLOAD PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA SWAP1 PUSH2 0x3C9 SWAP1 CALLER SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP13 SWAP1 DUP8 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x41A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x434 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44C DUP6 DUP8 DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x62D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP2 PUSH2 0x462 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 PUSH2 0x120 ADD MLOAD DUP2 LT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 PUSH2 0x480 DUP6 DUP6 PUSH2 0x676 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49C PUSH2 0x497 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH2 0x6CF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4D3 PUSH2 0x4B3 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST PUSH2 0x4C7 DUP6 PUSH2 0x258 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 POP DUP13 DUP2 SGT ISZERO PUSH2 0x4E5 JUMPI DUP3 SWAP6 POP PUSH2 0x4E9 JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x467 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x583 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x77E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5A7 DUP5 DUP5 PUSH2 0x5C2 JUMP JUMPDEST DUP2 PUSH2 0x5AE JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 DUP4 DUP4 PUSH2 0x77E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5D1 JUMPI POP PUSH1 0x0 PUSH2 0x434 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x5DF JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x5F6 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x5F2 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66E PUSH2 0x661 PUSH2 0x65C PUSH2 0x650 PUSH2 0x64B DUP8 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0x258 DUP7 PUSH2 0x23C PUSH2 0x506 JUMP JUMPDEST PUSH2 0xEDE JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH2 0x68E PUSH2 0x686 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x4C7 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x69E DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x5B6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x6AA AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH2 0x6C9 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x5C2 JUMP JUMPDEST DUP4 PUSH2 0x14EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E2 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6F6 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x70A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x71E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x732 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x746 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x75A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x76E DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x58A AND JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x791 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x79C JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x7BD JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x7B2 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x7BD JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x16C1 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x89A JUMPI POP PUSH1 0x0 PUSH2 0x779 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x8CD JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x92C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x98A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x9EC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0xA50 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0xAB4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0xB18 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0xB7C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0xBE0 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0xC44 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xCBA JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0xCEB JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xD0B JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0xD3C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xD5C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0xD8D JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDAD JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0xDDE JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xDFE JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0xE2F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xE4F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0xE80 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0xEA0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0xED1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0xF10 JUMPI POP PUSH1 0x0 PUSH2 0x779 JUMP JUMPDEST DUP2 PUSH2 0xF2C JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0xF67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0xFD3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1000 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x102C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1058 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1084 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10AF JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x10DA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1104 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x112E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1158 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1181 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11AA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11D2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x11FA JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1221 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1248 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x126E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x12DD JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x131F JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1361 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13A3 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x13E5 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1425 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1465 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14A5 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x14E5 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1525 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x189F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x1573 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x15AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0x18D6 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x5AE JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1654 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x165F DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x166F DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x192F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xE 0xC9 SELFBALANCE PUSH22 0xC3B944DD1B410F5E6D64529245221DEA09A6FB9A8F1E 0x23 PUSH3 0x765E2F CREATE PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xD STOP BLOCKHASH ",
				"sourceMap": "265:3640:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:3640:3;;;;;;;;;;;;;;;;;;;351:2407;;;;;;;;;:::i;:::-;;;495:27;;:::i;:::-;-1:-1:-1;495:36:3;;;;;;;;525:6;495:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;609:28;630:6;609:20;:28::i;:::-;756:14;;593:44;;-1:-1:-1;647:8:3;;;;;;;;743:27;;;;;;;:56;;;;;785:5;:14;;;774:25;;:7;:25;;;743:56;739:417;;;-1:-1:-1;;;;819:7:3;;;;844;;;;873:11;;;;908:4;739:417;;;945:5;:14;;;932:27;;:9;:27;;;:56;;;;-1:-1:-1;974:14:3;;963:25;;;;;;;932:56;929:227;;;1008:5;:7;;;1004:11;;1033:5;:7;;;1029:11;;1062:5;:19;;;1054:27;;929:227;;;1112:33;;;;;;;;;;;;;;;;;;;929:227;1185:12;1200:105;1221:1;1236;1251:5;1270:6;1290:5;1200:7;:105::i;:::-;1185:120;;1353:13;1369:96;1422:33;1445:5;:9;;;1422:18;:16;:18::i;:::-;:22;:33;:22;:33;:::i;:::-;1369:26;:6;1389:5;1369:26;:19;:26;:::i;:::-;:39;:96;:39;:96;:::i;:::-;1353:112;-1:-1:-1;1484:21:3;1491:1;1353:112;1484:21;:13;:21;:::i;:::-;1475:30;;1561:1;1552:6;:10;1548:51;;;-1:-1:-1;1587:1:3;1548:51;1792:7;1788:532;;;1825:13;:1;1831:6;1825:13;:5;:13;:::i;:::-;1815:7;;;:23;1862:13;:1;1868:6;1862:13;:5;:13;:::i;:::-;1852:7;;;:23;1788:532;;;2182:13;:1;2188:6;2182:13;:5;:13;:::i;:::-;2172:7;;;:23;2219:13;:1;2225:6;2219:13;:5;:13;:::i;:::-;2209:7;;;:23;1788:532;2354:14;;:6;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2603:148;;;;;2629:10;;2653:9;;2676:7;;2705:6;;2734;;2603:148;;;;;;;;;;351:2407;;;;;;;;;;;:::o;4188:216:7:-;4239:8;4282:1;4270;4263:21;4259:101;;;4300:49;;;;;;;;;;;4259:101;4373:24;4385:1;794:66;4373:4;:24::i;:::-;4369:28;4188:216;-1:-1:-1;;4188:216:7:o;2764:1139:3:-;2939:8;3052:9;3064:110;3116:5;3135:1;3150:5;:14;;;3064:38;:110::i;:::-;3052:122;-1:-1:-1;3220:17:3;3052:122;3220:17;3351:13;:1;3357:6;3351:13;:5;:13;:::i;:::-;3330:34;-1:-1:-1;3391:9:3;3386:483;3410:5;:25;;;3406:1;:29;3386:483;;;3456:10;3469:51;3497:10;3509;3469:27;:51::i;:::-;3456:64;-1:-1:-1;3534:11:3;3548:51;3584:14;3456:64;3592:5;3584:14;:7;:14;:::i;:::-;3548:35;:51::i;:::-;3534:65;-1:-1:-1;3613:10:3;3626:102;3712:15;:6;3723:3;3712:15;:10;:15;:::i;:::-;3626:64;3686:3;3626:38;:11;3659:4;3626:38;:32;:38;:::i;:64::-;:85;:102;:85;:102;:::i;:::-;3613:115;;3752:1;3746:3;:7;3742:117;;;3786:3;3773:16;;3742:117;;;3841:3;3828:16;;3742:117;3386:483;;;3437:3;;;;;3386:483;;;-1:-1:-1;3886:10:3;;2764:1139;-1:-1:-1;;;;;;;;;2764:1139:3:o;1581:76:7:-;794:66;;1581:76::o;1936:186::-;1992:8;928:66;2016:1;:18;2012:79;;;2050:30;;;;;;;;;;;2012:79;2104:11;2109:1;2113;2112:2;;2104:4;:11::i;:::-;2100:15;1936:186;-1:-1:-1;;;1936:186:7:o;2219:107::-;2275:8;794:66;2299:10;2304:1;2307;2299:4;:10::i;:::-;:20;;;;;;;2219:107;-1:-1:-1;;;2219:107:7:o;1748:97::-;1804:8;1828:10;1833:1;1836;1828:4;:10::i;16143:235::-;16199:8;16223:6;16219:45;;-1:-1:-1;16252:1:7;16245:8;;16219:45;-1:-1:-1;16277:5:7;;;16281:1;16277;:5;:1;16296:5;;;;;:10;;:24;;;;16319:1;16314;16310;:5;;;;;;:10;;16296:24;16292:80;;;16337:24;;;;;;;;;;;219:441:9;360:15;398:120;421:87;:68;471:17;:12;:1;477:5;471:12;:5;:12;:::i;:::-;:15;:17::i;:::-;421:32;444:8;421:18;:16;:18::i;:68::-;:85;:87::i;:::-;398:5;;:120;:9;:120;:::i;:::-;391:127;219:441;-1:-1:-1;;;;219:441:9:o;666:240::-;767:15;805:56;818:42;841:18;:16;:18::i;:::-;818;:16;:18::i;:42::-;805:8;:1;811;805:8;:5;:8;:::i;:::-;:12;:56;:12;:56;:::i;2394:112:7:-;2450:8;2474:25;2479:16;2484:1;794:66;2479:4;:16::i;:::-;2497:1;2474:4;:25::i;957:676:9:-;1051:6;;1138:14;1147:4;;1138:14;:8;:14;:::i;:::-;1117:35;-1:-1:-1;1162:16:9;1181:21;:4;1117:35;1181:21;:8;:21;:::i;:::-;1162:40;-1:-1:-1;1212:16:9;1231:24;1162:40;;1231:24;:13;:24;:::i;:::-;1212:43;-1:-1:-1;1265:19:9;1287:24;1212:43;;1287:24;:13;:24;:::i;:::-;1265:46;-1:-1:-1;1321:23:9;1347:30;1265:46;;1347:30;:16;:30;:::i;:::-;1321:56;-1:-1:-1;1387:24:9;1414:38;1321:56;;1414:38;:20;:38;:::i;:::-;1387:65;-1:-1:-1;1462:22:9;1487:40;1387:65;;1487:40;:21;:40;:::i;:::-;1462:65;-1:-1:-1;1537:23:9;1563:30;1462:65;1583:9;1563:30;:19;:30;:::i;:::-;1537:56;-1:-1:-1;;;;;;;;;957:676:9;;;;:::o;16785:210:7:-;16865:5;;;16841:8;16885:5;;:14;;;;;16898:1;16894;:5;16885:14;:23;;;;;16907:1;16903;:5;16885:23;16884:54;;;;16918:1;16914;:5;:14;;;;;16927:1;16923;:5;16914:14;:23;;;;;16936:1;16932;:5;16914:23;16880:109;;;16954:24;;;;;;;;;;;5191:5160;5236:8;794:66;5260:1;:14;5256:74;;;5290:29;;;;;;;;;;;5256:74;5348:1;5343;:6;5339:66;;5365:29;;;;;;;;;;;5339:66;794;5418:1;:12;5414:51;;;-1:-1:-1;5453:1:7;5446:8;;5414:51;1273:66;5478:1;:15;5474:64;;-1:-1:-1;1453:75:7;5509:18;;5474:64;5548:8;5566;5584;5897:66;5885:1;:79;5881:316;;5980:79;;;;;6106:66;794;6085:11;;:88;6081:92;;5881:316;6241:66;6229:1;:79;6225:316;;6324:79;;;;;6450:66;794;6429:11;;:88;6425:92;;6225:316;6584:66;6572:1;:79;6568:314;;6667:79;;;;;6792:66;794;6771:11;;:88;6767:92;;6568:314;6925:66;6913:1;:79;6909:314;;7008:79;;;;;7133:66;794;7112:11;;:88;7108:92;;6909:314;7266:66;7254:1;:79;7250:314;;7349:79;;;;;7474:66;794;7453:11;;:88;7449:92;;7250:314;7607:66;7595:1;:79;7591:314;;7690:79;;;;;7815:66;7702;7794:11;;:88;7790:92;;7591:314;7950:66;7938:1;:79;7934:318;;8033:79;;;;;8160:66;794;8139:11;;:88;8135:92;;7934:318;8298:66;8286:1;:79;8282:320;;8381:79;;;;;8509:66;794;8488:11;;:88;8484:92;;8282:320;8649:66;8637:1;:79;8633:322;;8732:79;;;;;8861:66;794;8840:11;;:88;8836:92;;8633:322;9120:11;;;;-1:-1:-1;9120:11:7;;-1:-1:-1;794:66:7;9145:5;;;:15;;-1:-1:-1;9223:35:7;9180:39;;;9175:45;;:83;9170:88;;;;794:66;9268:1;9264;:5;:15;;;;;;9260:19;;9371:35;9366:1;9328:35;:39;9323:1;:45;:83;;;;;;9318:88;;;;794:66;9416:1;9412;:5;:15;;;;;;9408:19;;9519:35;9514:1;9476:35;:39;9471:1;:45;:83;;;;;;9466:88;;;;794:66;9564:1;9560;:5;:15;;;;;;9556:19;;9667:35;9662:1;9624:35;:39;9619:1;:45;:83;;;;;;9614:88;;;;794:66;9712:1;9708;:5;:15;;;;;;9704:19;;9815:35;9810:1;9772:35;:39;9767:1;:45;:83;;;;;;9762:88;;;;794:66;9860:1;9856;:5;:15;;;;;;9852:19;;9963:35;9958:1;9920:35;:39;9915:1;:45;:83;;;;;;9910:88;;;;794:66;10008:1;10004;:5;:15;;;;;;10000:19;;10111:35;10106:1;10068:35;:39;10063:1;:45;:83;;;;;;10058:88;;;;794:66;10156:1;10152;:5;:15;;;;;;10148:19;;10259:35;10254:1;10216:35;:39;10211:1;:45;:83;;;;;;10206:88;;;;5191:5160;;;;;;:::o;10448:5613::-;10494:8;1453:75;10518:15;;10514:105;;;-1:-1:-1;10607:1:7;10600:8;;10514:105;10632:6;10628:51;;-1:-1:-1;794:66:7;10654:14;;10628:51;1393:1;10692;:15;10688:77;;;10724:30;;;;;;;;;;;10688:77;794:66;11234;11230:70;;11314:5;;;:15;;;11340:18;11336:22;;11331:27;;;;;11230:70;;11398:5;;;:15;11394:19;;11420:1;11424:18;11420:22;11415:27;;;;794:66;11486:1;11482;:5;:15;;;;;;11478:19;;11504:1;11508:18;11504:22;11499:27;;;;794:66;11570:1;11566;:5;:15;;;;;;11562:19;;11588:1;11592:18;11588:22;11583:27;;;;794:66;11654:1;11650;:5;:15;;;;;;11646:19;;11672:1;11676:18;11672:22;11667:27;;;;794:66;11738:1;11734;:5;:15;;;;;;11730:19;;11756:1;11760:18;11756:22;11751:27;;;;794:66;11822:1;11818;:5;:15;;;;;;11814:19;;11840:1;11844:18;11840:22;11835:27;;;;794:66;11906:1;11902;:5;:15;;;;;;11898:19;;11924:1;11928:18;11924:22;11919:27;;;;794:66;11990:1;11986;:5;:15;;;;;;11982:19;;12008:1;12012:18;12008:22;12003:27;;;;794:66;12074:1;12070;:5;:15;;;;;;12066:19;;12092:1;12096:18;12092:22;12087:27;;;;794:66;12158:1;12154;:5;:15;;;;;;12150:19;;12176:1;12180:18;12176:22;12171:27;;;;794:66;12242:1;12238;:5;:15;;;;;;12234:19;;12260:1;12264:18;12260:22;12255:27;;;;794:66;12326:1;12322;:5;:15;;;;;;12318:19;;12344:1;12348:18;12344:22;12339:27;;;;794:66;12410:1;12406;:5;:15;;;;;;12402:19;;12428:1;12432:18;12428:22;12423:27;;;;794:66;12494:1;12490;:5;:15;;;;;;12486:19;;12512:1;12516:18;12512:22;12507:27;;;;794:66;12578:1;12574;:5;:15;;;;;;12570:19;;12596:1;12600:18;12596:22;12591:27;;;;794:66;12662:1;12658;:5;:15;;;;;;12654:19;;12680:1;12684:18;12680:22;12675:27;;;;794:66;12746:1;12742;:5;:15;;;;;;12738:19;;12764:1;12768:18;12764:22;12759:27;;;;794:66;12830:1;12826;:5;:15;;;;;13060:2;;;;;;12914:18;12826:15;;;12843:27;;;12910:22;:26;;794:66;12910:36;;12826:15;-1:-1:-1;13107:66:7;13096:78;;13095:85;13091:304;;13304:66;13211;13200:78;;:171;13196:175;;13091:304;13439:66;13428:78;;13427:85;13423:304;;13636:66;13543;13532:78;;:171;13528:175;;13423:304;13770:66;13759:78;;13758:85;13754:303;;13967:66;13874;13863:78;;:171;13859:175;;13754:303;14100:66;14089:78;;14088:85;14084:303;;14297:66;14204;14193:78;;:171;14189:175;;14084:303;14430:66;14419:78;;14418:85;14414:303;;14627:66;14534;14523:78;;:171;14519:175;;14414:303;14760:66;14749:78;;14748:85;14744:303;;14957:66;14864;14853:78;;:171;14849:175;;14744:303;15092:66;15081:78;;15080:85;15076:305;;15289:66;15196;15185:78;;:171;15181:175;;15076:305;15427:66;15416:78;;15415:85;15411:306;;15624:66;15531;15520:78;;:171;15516:175;;15411:306;15764:66;15753:78;;15752:85;15748:307;;15961:66;15868;15857:78;;:171;15853:175;;15748:307;10448:5613;;;;;:::o;16465:260::-;16521:8;16545:6;16541:67;;16567:30;;;;;;;;;;;16541:67;928:66;16621:1;:18;:29;;;;;16643:1;16648:2;16643:7;16621:29;16617:83;;;16665:24;;;;;;;;;;;16617:83;16717:1;16713;:5;;;;265:3640:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;279:491:-1:-;;;;417:2;405:9;396:7;392:23;388:32;385:2;;;-1:-1;;423:12;385:2;85:6;72:20;97:33;124:5;97:33;;;475:63;-1:-1;575:2;614:22;;72:20;97:33;72:20;97:33;;;379:391;;583:63;;-1:-1;;;683:2;722:22;;;;209:20;;379:391;4997:675;10162:42;10151:54;;;856:58;;10151:54;;;5408:2;5393:18;;997:37;10151:54;;;;5491:2;5476:18;;997:37;5574:2;5559:18;;4948:37;;;;5657:3;5642:19;;4948:37;;;;5235:3;5220:19;;5206:466;5679:407;5870:2;5884:47;;;1271:2;5855:18;;;9923:19;1307:66;9963:14;;;1287:87;1393:12;;;5841:245;6093:407;6284:2;6298:47;;;1644:2;6269:18;;;9923:19;1680:66;9963:14;;;1660:87;1766:12;;;6255:245;6507:407;6698:2;6712:47;;;2017:2;6683:18;;;9923:19;2053:66;9963:14;;;2033:87;2139:12;;;6669:245;6921:407;7112:2;7126:47;;;2390:2;7097:18;;;9923:19;2426:66;9963:14;;;2406:87;2527:66;2513:12;;;2506:88;2613:12;;;7083:245;7335:407;7526:2;7540:47;;;2864:2;7511:18;;;9923:19;2900:66;9963:14;;;2880:87;2986:12;;;7497:245;7749:407;7940:2;7954:47;;;3237:2;7925:18;;;9923:19;3273:66;9963:14;;;3253:87;3359:12;;;7911:245;8163:407;8354:2;8368:47;;;3610:2;8339:18;;;9923:19;3646:66;9963:14;;;3626:87;3732:12;;;8325:245;8577:407;8768:2;8782:47;;;3983:2;8753:18;;;9923:19;4019:66;9963:14;;;3999:87;4105:12;;;8739:245;8991:407;9182:2;9196:47;;;4356:2;9167:18;;;9923:19;4392:66;9963:14;;;4372:87;4478:12;;;9153:245;9405:407;9596:2;9610:47;;;4729:2;9581:18;;;9923:19;4765:66;9963:14;;;4745:87;4851:12;;;9567:245;10675:117;10162:42;10762:5;10151:54;10737:5;10734:35;10724:2;;10783:1;;10773:12;10724:2;10718:74;"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 3
		},
		"interfaces/IStructs.sol": {
			"id": 6
		},
		"interfaces/IEvents.sol": {
			"id": 5
		},
		"libs/LibFixedMath.sol": {
			"id": 7
		},
		"libs/LibSafeMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 9
		},
		"core/State.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../core/State.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        //external\n        public\n    {\n        IStructs.State memory state = gState;\n\n        // Compute initial balances (fixed point).\n        int256 deltaA = LibFixedMath.toFixed(amount);\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = state.pBarXInverted;\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute\n        int256 price = _bisect(\n            a,\n            b,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n        .mul(price)\n        .mul(\n            LibFixedMath.one().sub(state.fee)\n        );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        if (deltaB > 0) {\n            deltaB = 0;\n        } /* else if (b.add(deltaB) <= 10^-10) { @todo add\n            deltaB = 10^-10 - b;\n        }\n        */\n\n\n        // @TODO: Handle additional edge cases\n\n        // Update balances\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            /*\n                delta_p_bar_x = (sell_token_id == 'X') * (p_bar_a_prime - p_bar_x) + ...\n                (sell_token_id == 'Y') * (1/p_bar_a_prime - p_bar_x);\n            */\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            // gState.pBarX = ...\n            // gState.pBarXIneverted = ...\n        }\n\n        // Update state\n        gState = state;\n\n        // Make transfers\n        //IERC20(fromToken).transferFrom(msg.sender, address(this), uint256(deltaA));\n        //IERC20(toToken).transferFrom(address(this), msg.sender, uint256(deltaB));\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            uint256(deltaA),\n            uint256(deltaB)\n        );\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            pBarA,\n            b,\n            state.rhoRatio\n        );\n\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < state.bisectionIterations; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        int256 pBarXInverted;                               // inverted expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 bisectionIterations;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        uint256 l;                                          // total liquidity token balance\n\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _mul(a, b) / FIXED_1;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1), b);\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 pBarA,\n        int256 b,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return pBarA.mul(\n            LibFixedMath.one().sub(rhoRatio)\n            .mul(b.div(pBarA).ln())\n            .exp()\n        );\n        /*\n        return pBarA.mul(\n            b.div(pBarA)\n            .exp(LibFixedMath.one().sub(rhoRatio))\n        );\n        */\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\n\n\ncontract State {\n\n    IStructs.State gState;\n\n}\n"
	},
	"sourceTreeHashHex": "0xf124f0ef4eb94c177086629097049516a125fb79d6459af03f256c678e6a2413",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}