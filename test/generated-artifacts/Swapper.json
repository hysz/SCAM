{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b03191633179055612463806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636d83c92c146100515780638da5cb5b1461005b578063df791e5014610079578063f2fde38b14610099575b600080fd5b6100596100ac565b005b6100636100be565b6040516100709190611f5a565b60405180910390f35b61008c610087366004611f1a565b6100da565b60405161007091906123f5565b6100596100a7366004611ee6565b6102b6565b6100b4610389565b6100bc6103da565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60006100e4611e50565b6100ec6104ae565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614801561015c5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610198576000610180868661017a87670de0b6b3a7640000610554565b856105f5565b9050610190620f42408202610931565b92505061026f565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102065750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561023457600061021f868661017a87620f4240610554565b9050610190670de0b6b3a76400008202610931565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906120ef565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea33868686866040516102a6959493929190611fa2565b60405180910390a1509392505050565b6102be610389565b73ffffffffffffffffffffffffffffffffffffffff811661030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061224e565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061037d9033908490611f7b565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612081565b60015460ff1615610417576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906120b8565b610421600161094a565b60055560636006819055610436906064610554565b6007556104466005612710610554565b60085561046e61045a6001620f424061096c565b61046261098b565b9063ffffffff61099f16565b600c5561047f6127156103e861096c565b600d55600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6104b6611e50565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600b54610140820152600c54610160820152600d5461018082015290565b600080831215610590576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061232a565b60008212156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612126565b6105ee6105e8846f80000000000000000000000000000000610a08565b83610a7e565b9392505050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561065b5750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561067a57505050506060820151608083015160a0840151600161071a565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156106e85750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102345785608001519350856060015192506107178660a0015161070b61098b565b9063ffffffff610b4d16565b91505b60008061072a8686868c8c610b76565b9150915060006107606107448a610100015161046261098b565b6107548c8563ffffffff610c7b16565b9063ffffffff610c7b16565b905061077360008263ffffffff61099f16565b905060006107856001620186a061096c565b9050600082131561079957600091506107c2565b806107aa888463ffffffff610cce16565b136107c2576107bf818863ffffffff61099f16565b91505b60006107e28b61012001516107d5610cda565b8d6101600151888b610cde565b6101808c01519091506107fb908863ffffffff610c7b16565b81131561081f576101808b0151610818908863ffffffff610c7b16565b9050610853565b610834876107548d610180015161070b61098b565b81121561085357610850876107548d610180015161070b61098b565b90505b61085b610cda565b6101208c0152851561089d57610877898d63ffffffff610cce16565b60608c015261088c888463ffffffff610cce16565b60808c015260a08b018190526108d9565b6108ad888463ffffffff610cce16565b60608c01526108c2898d63ffffffff610cce16565b60808c01526108d38161070b61098b565b60a08c01525b6108e28b610dbc565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161091593929190611fe3565b60405180910390a150506000039b9a5050505050505050505050565b6f8000000000000000000000000000000081055b919050565b6000610966826f80000000000000000000000000000000610a08565b92915050565b60006105ee6105e8846f80000000000000000000000000000000610a08565b6f8000000000000000000000000000000090565b60007f80000000000000000000000000000000000000000000000000000000000000008214156109fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906122f3565b6105ee8383600003610ebe565b6000821580610a15575081155b15610a2257506000610966565b5081810281838281610a3057fe5b05141580610a47575082828281610a4357fe5b0514155b15610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612285565b600081610ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612387565b7f800000000000000000000000000000000000000000000000000000000000000083148015610b055750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906123be565b818381610b4557fe5b059392505050565b6000610b676105e8846a8000000000000000000000610a08565b65010000000000029392505050565b600080610b898787878660e00151610f34565b915060008281610b9f8a8863ffffffff610cce16565b905060005b6014811015610c6b576000610bb9858561102d565b90506000610bd5610bd0838d63ffffffff610b4d16565b611055565b90506000610c0c610bec8c8563ffffffff610c7b16565b610c0085610754898763ffffffff610c7b16565b9063ffffffff610cce16565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e828483604051610c4193929190612011565b60405180910390a18c811315610c5957829550610c5d565b8296505b505050806001019050610ba4565b5091925050509550959350505050565b60006f800000000000000000000000000000008215610cad575065010000000000909105906a80000000000000000000005b6000610cb98585610a08565b9050818181610cc457fe5b0595945050505050565b60006105ee8383610ebe565b4390565b600080610cec878703611102565b90506000610d11610d0c610cff88611158565b849063ffffffff610c7b16565b611842565b90506000610d218261046261098b565b90506000610d35878363ffffffff610c7b16565b90506000610d49878563ffffffff610c7b16565b90506000610d75610d60858b63ffffffff610b4d16565b610d70878b63ffffffff610b4d16565b610cce565b90506000610d858261070b61098b565b90506000610daa610d96600261094a565b61070b84610c00898963ffffffff610cce16565b9e9d5050505050505050505050505050565b80516001805460208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116921515929092177fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff9384168102919091179091556040830151600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909316179091556060820151600355608082015160045560a082015160055560c082015160065560e0820151600755810151600855610120810151600955610140810151600b55610160810151600c556101800151600d55565b818101600083128015610ed15750600082125b8015610edc57508281135b80610efd5750600083138015610ef25750600082135b8015610efd57508281125b15610966576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906122bc565b600080610f47848763ffffffff610c7b16565b90506000610f5b868363ffffffff610b4d16565b90506000610f6f838863ffffffff610b4d16565b90506000610f7f8661046261098b565b90506000610f8b61098b565b841215610fa957610fa2610d0c8361075487611158565b9050610fc7565b610fc4610fbc610d0c8461075487611158565b61070b61098b565b90505b610fd7818963ffffffff610c7b16565b95507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6110078b610931565b604051611018959493929190612027565b60405180910390a15050505050949350505050565b60006105ee61104561103d61098b565b610c0061098b565b61070b858563ffffffff610cce16565b600080611068838063ffffffff610c7b16565b9050600061107c848363ffffffff610c7b16565b90506000611090828063ffffffff610c7b16565b905060006110a4828063ffffffff610c7b16565b905060006110b8828063ffffffff610c7b16565b905060006110cc828063ffffffff610c7b16565b905060006110e0828063ffffffff610c7b16565b905060006110f4828863ffffffff610c7b16565b9a9950505050505050505050565b60008082121561113e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906121ba565b610966826f80000000000000000000000000000000610a08565b60006f800000000000000000000000000000008213156111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612183565b600082136111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061204a565b6f800000000000000000000000000000008214156111fe57506000610945565b640733048c5a821361123157507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610945565b60008060006a01c8464f761647600000008513611290577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e9000000000000085136112ee577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611350577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec0000000000000000085136113b4577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611418577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de70000000000000000000851361147c577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be582800000000000000000085136114e0577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611544577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d85136115a8577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161161e57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161164f57fe5b05840193506f800000000000000000000000000000008183028161166f57fe5b059150700300000000000000000000000000000000836f99999999999999999999999999999999038302816116a057fe5b05840193506f80000000000000000000000000000000818302816116c057fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816116f157fe5b05840193506f800000000000000000000000000000008183028161171157fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161174257fe5b05840193506f800000000000000000000000000000008183028161176257fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161179357fe5b05840193506f80000000000000000000000000000000818302816117b357fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816117e457fe5b05840193506f800000000000000000000000000000008183028161180457fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161183557fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe01000000000000000000000000000000082121561187457506000610945565b8161189057506f80000000000000000000000000000000610945565b60008213156118cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612217565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161193757fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161196457fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161199057fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816119bc57fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816119e857fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611a1357fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611a3e57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611a6857fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611a9257fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611abc57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611ae557fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611b0e57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611b3657fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611b5e57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611b8557fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611bac57fe5b05905080601402830192506f8000000000000000000000000000000082820281611bd257fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611c41577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611c83577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b700400000000000000000000000000000000841615611cc557701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611d07577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b700100000000000000000000000000000000841615611d495770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611d89576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611dc9576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615611e09576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611e49576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611ef7578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105ee578182fd5b600080600060608486031215611f2e578182fd5b8335611f39816123fe565b92506020840135611f49816123fe565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461038657600080fdfea365627a7a7231582084e746f9c6d519fc3a7f608d73ed81000eb23e6c0f4508c2b4ce394f4eac94af6c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x2463 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6D83C92C EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x99 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xAC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0xBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x23F5 JUMP JUMPDEST PUSH2 0x59 PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0xB4 PUSH2 0x389 JUMP JUMPDEST PUSH2 0xBC PUSH2 0x3DA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x4AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x15C JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 PUSH2 0x180 DUP7 DUP7 PUSH2 0x17A DUP8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x554 JUMP JUMPDEST DUP6 PUSH2 0x5F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x190 PUSH3 0xF4240 DUP3 MUL PUSH2 0x931 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x26F JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x206 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 PUSH2 0x21F DUP7 DUP7 PUSH2 0x17A DUP8 PUSH3 0xF4240 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP PUSH2 0x190 PUSH8 0xDE0B6B3A7640000 DUP3 MUL PUSH2 0x931 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x20EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2A6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x389 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x30B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x37D SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2081 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x417 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x20B8 JUMP JUMPDEST PUSH2 0x421 PUSH1 0x1 PUSH2 0x94A JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x63 PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH2 0x436 SWAP1 PUSH1 0x64 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0x446 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x46E PUSH2 0x45A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x96C JUMP JUMPDEST PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x47F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x96C JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x1E50 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x590 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x232A JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2126 JUMP JUMPDEST PUSH2 0x5EE PUSH2 0x5E8 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xA7E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x65B JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x67A JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x71A JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x6E8 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x234 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x717 DUP7 PUSH1 0xA0 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x72A DUP7 DUP7 DUP7 DUP13 DUP13 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x760 PUSH2 0x744 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x754 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x773 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x785 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x96C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x799 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x7C2 JUMP JUMPDEST DUP1 PUSH2 0x7AA DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SGT PUSH2 0x7C2 JUMPI PUSH2 0x7BF DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x7D5 PUSH2 0xCDA JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x7FB SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x81F JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x818 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x853 JUMP JUMPDEST PUSH2 0x834 DUP8 PUSH2 0x754 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x853 JUMPI PUSH2 0x850 DUP8 PUSH2 0x754 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x85B PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x120 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x89D JUMPI PUSH2 0x877 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x88C DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xA0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x8AD DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x8C2 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x8D3 DUP2 PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST PUSH1 0xA0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x8E2 DUP12 PUSH2 0xDBC JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x915 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP2 SDIV JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x966 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE PUSH2 0x5E8 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST PUSH2 0x5EE DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xEBE JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xA15 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xA22 JUMPI POP PUSH1 0x0 PUSH2 0x966 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xA30 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xA47 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xA43 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xAB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2387 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0xB05 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x23BE JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xB45 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB67 PUSH2 0x5E8 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB89 DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0xF34 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 DUP2 PUSH2 0xB9F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 PUSH2 0xBB9 DUP6 DUP6 PUSH2 0x102D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBD5 PUSH2 0xBD0 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0x1055 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC0C PUSH2 0xBEC DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST PUSH2 0xC00 DUP6 PUSH2 0x754 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0xC41 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2011 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0xC59 JUMPI DUP3 SWAP6 POP PUSH2 0xC5D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xBA4 JUMP JUMPDEST POP SWAP2 SWAP3 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0xCAD JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0xCB9 DUP6 DUP6 PUSH2 0xA08 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0xCC4 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE DUP4 DUP4 PUSH2 0xEBE JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCEC DUP8 DUP8 SUB PUSH2 0x1102 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD11 PUSH2 0xD0C PUSH2 0xCFF DUP9 PUSH2 0x1158 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST PUSH2 0x1842 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD21 DUP3 PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD35 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD49 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD75 PUSH2 0xD60 DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0xD70 DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD85 DUP3 PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDAA PUSH2 0xD96 PUSH1 0x2 PUSH2 0x94A JUMP JUMPDEST PUSH2 0x70B DUP5 PUSH2 0xC00 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP2 AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 SSTORE DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0x9 SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH2 0x160 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH2 0x180 ADD MLOAD PUSH1 0xD SSTORE JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xED1 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xEDC JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xEFD JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xEF2 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xEFD JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x22BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF47 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5B DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF6F DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7F DUP7 PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF8B PUSH2 0x98B JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xFA9 JUMPI PUSH2 0xFA2 PUSH2 0xD0C DUP4 PUSH2 0x754 DUP8 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0xFC4 PUSH2 0xFBC PUSH2 0xD0C DUP5 PUSH2 0x754 DUP8 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xFD7 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP6 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x1007 DUP12 PUSH2 0x931 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1018 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE PUSH2 0x1045 PUSH2 0x103D PUSH2 0x98B JUMP JUMPDEST PUSH2 0xC00 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x70B DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1068 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x107C DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1090 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10A4 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10B8 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10CC DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10E0 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10F4 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x113E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH2 0x966 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2183 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x11DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x11FE JUMPI POP PUSH1 0x0 PUSH2 0x945 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1231 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1290 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x12EE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1350 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x13B4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1418 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x147C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x14E0 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1544 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x15A8 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x161E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x164F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x166F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x16A0 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x16C0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x16F1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1711 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1742 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1762 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1793 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x17B3 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x17E4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1804 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1835 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1874 JUMPI POP PUSH1 0x0 PUSH2 0x945 JUMP JUMPDEST DUP2 PUSH2 0x1890 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x18CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2217 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1937 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1964 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1990 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19BC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19E8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A13 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A3E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A68 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A92 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ABC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AE5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B0E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B36 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B5E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B85 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BAC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BD2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C41 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C83 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1CC5 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D07 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D49 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D89 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1DC9 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E09 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E49 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5EE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F39 DUP2 PUSH2 0x23FE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1F49 DUP2 PUSH2 0x23FE JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP5 0xE7 CHAINID 0xF9 0xC6 0xD5 NOT 0xFC GASPRICE PUSH32 0x608D73ED81000EB23E6C0F4508C2B4CE394F4EAC94AF6C6578706572696D656E PUSH21 0x616CF564736F6C634300050D004000000000000000 ",
				"sourceMap": "265:5763:4:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;265:5763:4;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636d83c92c146100515780638da5cb5b1461005b578063df791e5014610079578063f2fde38b14610099575b600080fd5b6100596100ac565b005b6100636100be565b6040516100709190611f5a565b60405180910390f35b61008c610087366004611f1a565b6100da565b60405161007091906123f5565b6100596100a7366004611ee6565b6102b6565b6100b4610389565b6100bc6103da565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60006100e4611e50565b6100ec6104ae565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614801561015c5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610198576000610180868661017a87670de0b6b3a7640000610554565b856105f5565b9050610190620f42408202610931565b92505061026f565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102065750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561023457600061021f868661017a87620f4240610554565b9050610190670de0b6b3a76400008202610931565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906120ef565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea33868686866040516102a6959493929190611fa2565b60405180910390a1509392505050565b6102be610389565b73ffffffffffffffffffffffffffffffffffffffff811661030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061224e565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061037d9033908490611f7b565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612081565b60015460ff1615610417576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906120b8565b610421600161094a565b60055560636006819055610436906064610554565b6007556104466005612710610554565b60085561046e61045a6001620f424061096c565b61046261098b565b9063ffffffff61099f16565b600c5561047f6127156103e861096c565b600d55600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6104b6611e50565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600b54610140820152600c54610160820152600d5461018082015290565b600080831215610590576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061232a565b60008212156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612126565b6105ee6105e8846f80000000000000000000000000000000610a08565b83610a7e565b9392505050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a8116911614801561065b5750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b1561067a57505050506060820151608083015160a0840151600161071a565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156106e85750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102345785608001519350856060015192506107178660a0015161070b61098b565b9063ffffffff610b4d16565b91505b60008061072a8686868c8c610b76565b9150915060006107606107448a610100015161046261098b565b6107548c8563ffffffff610c7b16565b9063ffffffff610c7b16565b905061077360008263ffffffff61099f16565b905060006107856001620186a061096c565b9050600082131561079957600091506107c2565b806107aa888463ffffffff610cce16565b136107c2576107bf818863ffffffff61099f16565b91505b60006107e28b61012001516107d5610cda565b8d6101600151888b610cde565b6101808c01519091506107fb908863ffffffff610c7b16565b81131561081f576101808b0151610818908863ffffffff610c7b16565b9050610853565b610834876107548d610180015161070b61098b565b81121561085357610850876107548d610180015161070b61098b565b90505b61085b610cda565b6101208c0152851561089d57610877898d63ffffffff610cce16565b60608c015261088c888463ffffffff610cce16565b60808c015260a08b018190526108d9565b6108ad888463ffffffff610cce16565b60608c01526108c2898d63ffffffff610cce16565b60808c01526108d38161070b61098b565b60a08c01525b6108e28b610dbc565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d8560405161091593929190611fe3565b60405180910390a150506000039b9a5050505050505050505050565b6f8000000000000000000000000000000081055b919050565b6000610966826f80000000000000000000000000000000610a08565b92915050565b60006105ee6105e8846f80000000000000000000000000000000610a08565b6f8000000000000000000000000000000090565b60007f80000000000000000000000000000000000000000000000000000000000000008214156109fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906122f3565b6105ee8383600003610ebe565b6000821580610a15575081155b15610a2257506000610966565b5081810281838281610a3057fe5b05141580610a47575082828281610a4357fe5b0514155b15610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612285565b600081610ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612387565b7f800000000000000000000000000000000000000000000000000000000000000083148015610b055750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906123be565b818381610b4557fe5b059392505050565b6000610b676105e8846a8000000000000000000000610a08565b65010000000000029392505050565b600080610b898787878660e00151610f34565b915060008281610b9f8a8863ffffffff610cce16565b905060005b6014811015610c6b576000610bb9858561102d565b90506000610bd5610bd0838d63ffffffff610b4d16565b611055565b90506000610c0c610bec8c8563ffffffff610c7b16565b610c0085610754898763ffffffff610c7b16565b9063ffffffff610cce16565b90507f4add19bbbe358caf4af4a31b1299356fc4dccf8b4cf3c87e401b0fa60062f31e828483604051610c4193929190612011565b60405180910390a18c811315610c5957829550610c5d565b8296505b505050806001019050610ba4565b5091925050509550959350505050565b60006f800000000000000000000000000000008215610cad575065010000000000909105906a80000000000000000000005b6000610cb98585610a08565b9050818181610cc457fe5b0595945050505050565b60006105ee8383610ebe565b4390565b600080610cec878703611102565b90506000610d11610d0c610cff88611158565b849063ffffffff610c7b16565b611842565b90506000610d218261046261098b565b90506000610d35878363ffffffff610c7b16565b90506000610d49878563ffffffff610c7b16565b90506000610d75610d60858b63ffffffff610b4d16565b610d70878b63ffffffff610b4d16565b610cce565b90506000610d858261070b61098b565b90506000610daa610d96600261094a565b61070b84610c00898963ffffffff610cce16565b9e9d5050505050505050505050505050565b80516001805460208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116921515929092177fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff9384168102919091179091556040830151600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909316179091556060820151600355608082015160045560a082015160055560c082015160065560e0820151600755810151600855610120810151600955610140810151600b55610160810151600c556101800151600d55565b818101600083128015610ed15750600082125b8015610edc57508281135b80610efd5750600083138015610ef25750600082135b8015610efd57508281125b15610966576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906122bc565b600080610f47848763ffffffff610c7b16565b90506000610f5b868363ffffffff610b4d16565b90506000610f6f838863ffffffff610b4d16565b90506000610f7f8661046261098b565b90506000610f8b61098b565b841215610fa957610fa2610d0c8361075487611158565b9050610fc7565b610fc4610fbc610d0c8461075487611158565b61070b61098b565b90505b610fd7818963ffffffff610c7b16565b95507f3cf9bd989028bfc957ca46fd34c8ed26f90d849442378ee442fcd56cf5cac44f8a8a8a8a6110078b610931565b604051611018959493929190612027565b60405180910390a15050505050949350505050565b60006105ee61104561103d61098b565b610c0061098b565b61070b858563ffffffff610cce16565b600080611068838063ffffffff610c7b16565b9050600061107c848363ffffffff610c7b16565b90506000611090828063ffffffff610c7b16565b905060006110a4828063ffffffff610c7b16565b905060006110b8828063ffffffff610c7b16565b905060006110cc828063ffffffff610c7b16565b905060006110e0828063ffffffff610c7b16565b905060006110f4828863ffffffff610c7b16565b9a9950505050505050505050565b60008082121561113e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610266906121ba565b610966826f80000000000000000000000000000000610a08565b60006f800000000000000000000000000000008213156111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612183565b600082136111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102669061204a565b6f800000000000000000000000000000008214156111fe57506000610945565b640733048c5a821361123157507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610945565b60008060006a01c8464f761647600000008513611290577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e9000000000000085136112ee577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513611350577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec0000000000000000085136113b4577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611418577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de70000000000000000000851361147c577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be582800000000000000000085136114e0577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513611544577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d85136115a8577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161161e57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161164f57fe5b05840193506f800000000000000000000000000000008183028161166f57fe5b059150700300000000000000000000000000000000836f99999999999999999999999999999999038302816116a057fe5b05840193506f80000000000000000000000000000000818302816116c057fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816116f157fe5b05840193506f800000000000000000000000000000008183028161171157fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e0383028161174257fe5b05840193506f800000000000000000000000000000008183028161176257fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161179357fe5b05840193506f80000000000000000000000000000000818302816117b357fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d89038302816117e457fe5b05840193506f800000000000000000000000000000008183028161180457fe5b059150700800000000000000000000000000000000836f888888888888888888888888888888880383028161183557fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe01000000000000000000000000000000082121561187457506000610945565b8161189057506f80000000000000000000000000000000610945565b60008213156118cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690612217565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f800000000000000000000000000000008282028161193757fe5b05905080670168244fdac7800002830192506f800000000000000000000000000000008282028161196457fe5b05905080664807432bc1800002830192506f800000000000000000000000000000008282028161199057fe5b05905080660c0135dca0400002830192506f80000000000000000000000000000000828202816119bc57fe5b059050806601b707b1cdc00002830192506f80000000000000000000000000000000828202816119e857fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611a1357fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611a3e57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611a6857fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611a9257fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611abc57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611ae557fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611b0e57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611b3657fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611b5e57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611b8557fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611bac57fe5b05905080601402830192506f8000000000000000000000000000000082820281611bd257fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611c41577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611c83577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b700400000000000000000000000000000000841615611cc557701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615611d07577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b700100000000000000000000000000000000841615611d495770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615611d89576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615611dc9576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615611e09576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f10000000000000000000000000000000841615611e49576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611ef7578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105ee578182fd5b600080600060608486031215611f2e578182fd5b8335611f39816123fe565b92506020840135611f49816123fe565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461038657600080fdfea365627a7a7231582084e746f9c6d519fc3a7f608d73ed81000eb23e6c0f4508c2b4ce394f4eac94af6c6578706572696d656e74616cf564736f6c634300050d0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6D83C92C EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x99 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xAC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0xBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x23F5 JUMP JUMPDEST PUSH2 0x59 PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0xB4 PUSH2 0x389 JUMP JUMPDEST PUSH2 0xBC PUSH2 0x3DA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x4AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x15C JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 PUSH2 0x180 DUP7 DUP7 PUSH2 0x17A DUP8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x554 JUMP JUMPDEST DUP6 PUSH2 0x5F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x190 PUSH3 0xF4240 DUP3 MUL PUSH2 0x931 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x26F JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x206 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 PUSH2 0x21F DUP7 DUP7 PUSH2 0x17A DUP8 PUSH3 0xF4240 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP PUSH2 0x190 PUSH8 0xDE0B6B3A7640000 DUP3 MUL PUSH2 0x931 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x20EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2A6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x389 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x30B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x37D SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2081 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x417 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x20B8 JUMP JUMPDEST PUSH2 0x421 PUSH1 0x1 PUSH2 0x94A JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x63 PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH2 0x436 SWAP1 PUSH1 0x64 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0x446 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x46E PUSH2 0x45A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x96C JUMP JUMPDEST PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x47F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x96C JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x1E50 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x590 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x232A JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2126 JUMP JUMPDEST PUSH2 0x5EE PUSH2 0x5E8 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xA7E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x65B JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x67A JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x71A JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x6E8 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x234 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x717 DUP7 PUSH1 0xA0 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x72A DUP7 DUP7 DUP7 DUP13 DUP13 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x760 PUSH2 0x744 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x754 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x773 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x785 PUSH1 0x1 PUSH3 0x186A0 PUSH2 0x96C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x799 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x7C2 JUMP JUMPDEST DUP1 PUSH2 0x7AA DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SGT PUSH2 0x7C2 JUMPI PUSH2 0x7BF DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x99F AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x7D5 PUSH2 0xCDA JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x7FB SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x81F JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x818 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH2 0x853 JUMP JUMPDEST PUSH2 0x834 DUP8 PUSH2 0x754 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x853 JUMPI PUSH2 0x850 DUP8 PUSH2 0x754 DUP14 PUSH2 0x180 ADD MLOAD PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x85B PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x120 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0x89D JUMPI PUSH2 0x877 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x88C DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xA0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x8AD DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x8C2 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0x8D3 DUP2 PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST PUSH1 0xA0 DUP13 ADD MSTORE JUMPDEST PUSH2 0x8E2 DUP12 PUSH2 0xDBC JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0x915 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP2 SDIV JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x966 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE PUSH2 0x5E8 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST PUSH2 0x5EE DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xEBE JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xA15 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xA22 JUMPI POP PUSH1 0x0 PUSH2 0x966 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xA30 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xA47 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xA43 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xAB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2387 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0xB05 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x23BE JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xB45 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB67 PUSH2 0x5E8 DUP5 PUSH11 0x8000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH6 0x10000000000 MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB89 DUP8 DUP8 DUP8 DUP7 PUSH1 0xE0 ADD MLOAD PUSH2 0xF34 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 DUP2 PUSH2 0xB9F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 PUSH2 0xBB9 DUP6 DUP6 PUSH2 0x102D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBD5 PUSH2 0xBD0 DUP4 DUP14 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0x1055 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC0C PUSH2 0xBEC DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST PUSH2 0xC00 DUP6 PUSH2 0x754 DUP10 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP1 POP PUSH32 0x4ADD19BBBE358CAF4AF4A31B1299356FC4DCCF8B4CF3C87E401B0FA60062F31E DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH2 0xC41 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2011 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP13 DUP2 SGT ISZERO PUSH2 0xC59 JUMPI DUP3 SWAP6 POP PUSH2 0xC5D JUMP JUMPDEST DUP3 SWAP7 POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xBA4 JUMP JUMPDEST POP SWAP2 SWAP3 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 ISZERO PUSH2 0xCAD JUMPI POP PUSH6 0x10000000000 SWAP1 SWAP2 SDIV SWAP1 PUSH11 0x8000000000000000000000 JUMPDEST PUSH1 0x0 PUSH2 0xCB9 DUP6 DUP6 PUSH2 0xA08 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 PUSH2 0xCC4 JUMPI INVALID JUMPDEST SDIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE DUP4 DUP4 PUSH2 0xEBE JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCEC DUP8 DUP8 SUB PUSH2 0x1102 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD11 PUSH2 0xD0C PUSH2 0xCFF DUP9 PUSH2 0x1158 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST PUSH2 0x1842 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD21 DUP3 PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD35 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD49 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD75 PUSH2 0xD60 DUP6 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0xD70 DUP8 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD85 DUP3 PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDAA PUSH2 0xD96 PUSH1 0x2 PUSH2 0x94A JUMP JUMPDEST PUSH2 0x70B DUP5 PUSH2 0xC00 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP2 AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 SSTORE DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0x9 SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH2 0x160 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH2 0x180 ADD MLOAD PUSH1 0xD SSTORE JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xED1 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xEDC JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xEFD JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xEF2 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xEFD JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x22BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF47 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5B DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF6F DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB4D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7F DUP7 PUSH2 0x462 PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF8B PUSH2 0x98B JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xFA9 JUMPI PUSH2 0xFA2 PUSH2 0xD0C DUP4 PUSH2 0x754 DUP8 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0xFC4 PUSH2 0xFBC PUSH2 0xD0C DUP5 PUSH2 0x754 DUP8 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x98B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xFD7 DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP6 POP PUSH32 0x3CF9BD989028BFC957CA46FD34C8ED26F90D849442378EE442FCD56CF5CAC44F DUP11 DUP11 DUP11 DUP11 PUSH2 0x1007 DUP12 PUSH2 0x931 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1018 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EE PUSH2 0x1045 PUSH2 0x103D PUSH2 0x98B JUMP JUMPDEST PUSH2 0xC00 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x70B DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xCCE AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1068 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x107C DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1090 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10A4 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10B8 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10CC DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10E0 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10F4 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC7B AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x113E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x21BA JUMP JUMPDEST PUSH2 0x966 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2183 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x11DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x204A JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x11FE JUMPI POP PUSH1 0x0 PUSH2 0x945 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x1231 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x1290 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x12EE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x1350 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x13B4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1418 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x147C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x14E0 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x1544 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x15A8 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x161E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x164F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x166F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x16A0 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x16C0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x16F1 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1711 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1742 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1762 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1793 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x17B3 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x17E4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1804 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1835 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1874 JUMPI POP PUSH1 0x0 PUSH2 0x945 JUMP JUMPDEST DUP2 PUSH2 0x1890 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x18CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0x2217 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1937 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1964 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1990 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19BC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x19E8 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A13 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A3E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A68 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1A92 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ABC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1AE5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B0E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B36 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B5E JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1B85 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BAC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1BD2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C41 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1C83 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1CC5 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D07 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D49 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1D89 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1DC9 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E09 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1E49 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5EE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F39 DUP2 PUSH2 0x23FE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1F49 DUP2 PUSH2 0x23FE JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP5 0xE7 CHAINID 0xF9 0xC6 0xD5 NOT 0xFC GASPRICE PUSH32 0x608D73ED81000EB23E6C0F4508C2B4CE394F4EAC94AF6C6578706572696D656E PUSH21 0x616CF564736F6C634300050D004000000000000000 ",
				"sourceMap": "265:5763:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:5763:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;536:89:3;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;426:1582:4;;;;;;;;;:::i;:::-;;;;;;;;320:293:2;;;;;;;;;:::i;536:89:3:-;274:22:2;:20;:22::i;:::-;606:12:3;:10;:12::i;:::-;536:89::o;50:20:2:-;;;;;;:::o;426:1582:4:-;554:22;592:27;;:::i;:::-;622:18;:16;:18::i;:::-;592:48;;668:5;:14;;;655:27;;:9;:27;;;:56;;;;;697:5;:14;;;686:25;;:7;:25;;;655:56;651:784;;;727:26;756:155;779:9;806:7;831:36;852:6;860;831:20;:36::i;:::-;892:5;756;:155::i;:::-;727:184;;950:46;977:5;951:19;:32;950:44;:46::i;:::-;925:72;;651:784;;;;1030:5;:14;;;1017:27;;:9;:27;;;:56;;;;;1059:5;:14;;;1048:25;;:7;:25;;;1017:56;1014:421;;;1089:26;1118:155;1141:9;1168:7;1193:35;1214:6;1222:5;1193:20;:35::i;1118:155::-;1089:184;;1312:47;1339:6;1313:19;:33;1312:45;:47::i;1014:421::-;1391:33;;;;;;;;;;;;;;;;;;;1014:421;1831:138;1857:10;1881:9;1904:7;1925:6;1945:14;1831:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;426:1582:4;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;412:195;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;631:677:3;706:6;:20;;;705:21;684:87;;;;;;;;;;;;;;796:31;824:1;796:20;:31::i;:::-;781:12;:46;907:2;877:19;:33;;;938:47;;980:3;938:20;:47::i;:::-;920:15;:65;1008:48;1037:1;1049:5;1008:20;:48::i;:::-;995:10;:61;1093:94;1129:48;995:6;1168:7;1129:20;:48::i;:::-;1093:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1079:11;:108;1215:49;1243:5;1258:4;1215:20;:49::i;:::-;1197:15;:67;:6;1274:27;;;;;;;;631:677::o;292:125::-;354:27;;:::i;:::-;-1:-1:-1;397:13:3;;;;;;;;404:6;397:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;292:125;:::o;4715:386:8:-;4777:8;4820:1;4808;4801:21;4797:116;;;4838:64;;;;;;;;;;;4797:116;4945:1;4933;4926:21;4922:118;;;4963:66;;;;;;;;;;;4922:118;5053:41;5058:24;5070:1;794:66;5058:4;:24::i;:::-;5091:1;5053:4;:41::i;:::-;5049:45;4715:386;-1:-1:-1;;;4715:386:8:o;2014:2553:4:-;2378:14;;;;2181:21;;;;;;;;;;2365:27;;;;;;;:56;;;;;2407:5;:14;;;2396:25;;:7;:25;;;2365:56;2361:433;;;-1:-1:-1;;;;2441:7:4;;;;2466;;;;2495:11;;;;2530:4;2361:433;;;2567:5;:14;;;2554:27;;:9;:27;;;:56;;;;;2596:5;:14;;;2585:25;;:7;:25;;;2554:56;2551:243;;;2630:5;:7;;;2626:11;;2655:5;:7;;;2651:11;;2684:35;2707:5;:11;;;2684:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2676:43;;2551:243;2824:9;2835:12;2851:105;2872:1;2887;2902:5;2921:6;2941:5;2851:7;:105::i;:::-;2823:133;;;;3004:13;3020:112;3085:33;3108:5;:9;;;3085:18;:16;:18::i;:33::-;3020:30;:6;3044:5;3020:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3004:128;-1:-1:-1;3151:21:4;3158:1;3004:128;3151:21;:13;:21;:::i;:::-;3142:30;;3215:14;3232:47;3260:1;3271:6;3232:20;:47::i;:::-;3215:64;;3338:1;3329:6;:10;3325:135;;;3364:1;3355:10;;3325:135;;;3403:7;3386:13;:1;3392:6;3386:13;:5;:13;:::i;:::-;:24;3382:78;;3435:14;:7;3447:1;3435:14;:11;:14;:::i;:::-;3426:23;;3382:78;3510:15;3528:155;3569:5;:7;;;3590:24;:22;:24::i;:::-;3628:5;:10;;;3652:2;3668:5;3528:27;:155::i;:::-;3708:14;;;;3510:173;;-1:-1:-1;3708:25:4;;3727:5;3708:25;:18;:25;:::i;:::-;3697:8;:36;3693:259;;;3760:14;;;;:25;;3779:5;3760:25;:18;:25;:::i;:::-;3749:36;;3693:259;;;3816:49;3859:5;3816:38;3839:5;:14;;;3816:18;:16;:18::i;:49::-;3805:8;:60;3802:150;;;3892:49;3935:5;3892:38;3915:5;:14;;;3892:18;:16;:18::i;:49::-;3881:60;;3802:150;3996:24;:22;:24::i;:::-;3986:7;;;:34;4030:285;;;;4067:13;:1;4073:6;4067:13;:5;:13;:::i;:::-;4057:7;;;:23;4104:13;:1;4110:6;4104:13;:5;:13;:::i;:::-;4094:7;;;:23;4131:11;;;:22;;;4030:285;;;4194:13;:1;4200:6;4194:13;:5;:13;:::i;:::-;4184:7;;;:23;4231:13;:1;4237:6;4231:13;:5;:13;:::i;:::-;4221:7;;;:23;4272:32;4295:8;4272:18;:16;:18::i;:32::-;4258:11;;;:46;4030:285;4349:23;4366:5;4349:16;:23::i;:::-;4388:106;4426:10;4454:6;4478;4388:106;;;;;;;;;;;;;;;;;-1:-1:-1;;4522:7:4;;;2014:2553;-1:-1:-1;;;;;;;;;;;2014:2553:4:o;5164:97:8:-;794:66;5243:11;;5164:97;;;;:::o;3925:::-;3975:8;3999:16;4004:1;794:66;3999:4;:16::i;:::-;3995:20;3925:97;-1:-1:-1;;3925:97:8:o;4091:116::-;4151:8;4175:25;4180:16;4185:1;794:66;4180:4;:16::i;1581:76::-;794:66;;1581:76::o;1936:186::-;1992:8;928:66;2016:1;:18;2012:79;;;2050:30;;;;;;;;;;;2012:79;2104:11;2109:1;2113;2112:2;;2104:4;:11::i;16304:245::-;16360:8;16384:6;;;:16;;-1:-1:-1;16394:6:8;;16384:16;16380:55;;;-1:-1:-1;16423:1:8;16416:8;;16380:55;-1:-1:-1;16448:5:8;;;16452:1;16448;:5;:1;16467:5;;;;;:10;;:24;;;;16490:1;16485;16481;:5;;;;;;:10;;16467:24;16463:80;;;16508:24;;;;;;;;;;;16636:260;16692:8;16716:6;16712:67;;16738:30;;;;;;;;;;;16712:67;928:66;16792:1;:18;:29;;;;;16814:1;16819:2;16814:7;16792:29;16788:83;;;16836:24;;;;;;;;;;;16788:83;16888:1;16884;:5;;;;;;;16636:260;-1:-1:-1;;;16636:260:8:o;2539:128::-;2595:8;2619:33;2624:24;2629:1;2632:15;2624:4;:24::i;2619:33::-;2655:5;2619:41;;2539:128;-1:-1:-1;;;2539:128:8:o;4659:1244:4:-;4834:9;4845:8;4963:125;5015:1;5030;5045:5;5064;:14;;;4963:38;:125::i;:::-;4958:130;-1:-1:-1;5134:17:4;4958:130;5134:17;5265:13;:1;5271:6;5265:13;:5;:13;:::i;:::-;5244:34;-1:-1:-1;5305:9:4;5300:563;5324:2;5320:1;:6;5300:563;;;5347:10;5360:51;5388:10;5400;5360:27;:51::i;:::-;5347:64;-1:-1:-1;5425:11:4;5439:51;5475:14;5347:64;5483:5;5475:14;:7;:14;:::i;:::-;5439:35;:51::i;:::-;5425:65;-1:-1:-1;5504:10:4;5517:102;5603:15;:6;5614:3;5603:15;:10;:15;:::i;:::-;5517:64;5577:3;5517:38;:11;5550:4;5517:38;:32;:38;:::i;:64::-;:85;:102;:85;:102;:::i;:::-;5504:115;;5638:84;5662:4;5684:3;5705;5638:84;;;;;;;;;;;;;;;;;5746:1;5740:3;:7;5736:117;;;5780:3;5767:16;;5736:117;;;5835:3;5822:16;;5736:117;5300:563;;;5328:3;;;;;5300:563;;;-1:-1:-1;5885:10:4;;-1:-1:-1;;;4659:1244:4;;;;;;;;:::o;2219:252:8:-;2275:8;794:66;2330:6;;2326:73;;-1:-1:-1;2357:5:8;2352:10;;;;2383:5;2326:73;2409:14;2426:10;2431:1;2434;2426:4;:10::i;:::-;2409:27;;2460:4;2450:7;:14;;;;;;;2219:252;-1:-1:-1;;;;;2219:252:8:o;1748:97::-;1804:8;1828:10;1833:1;1836;1828:4;:10::i;5909:117:4:-;6007:12;5909:117;:::o;1173:790:10:-;1341:6;1363:13;1379:30;1407:1;1400:4;:8;1379:20;:30::i;:::-;1363:46;;1419:19;1441:27;:21;1452:9;:4;:7;:9::i;:::-;1441:6;;:21;:10;:21;:::i;:::-;:25;:27::i;:::-;1419:49;;1478:24;1505:36;1528:12;1505:18;:16;:18::i;:36::-;1478:63;-1:-1:-1;1551:12:10;1566:25;:2;1478:63;1566:25;:6;:25;:::i;:::-;1551:40;-1:-1:-1;1601:12:10;1616:23;:5;1626:12;1616:23;:9;:23;:::i;:::-;1601:38;-1:-1:-1;1650:23:10;1676:102;1706:25;:17;1728:2;1706:25;:21;:25;:::i;:::-;1745:23;:12;1762:5;1745:23;:16;:23;:::i;:::-;1676:16;:102::i;:::-;1650:128;;1788:12;1803:40;1826:16;1803:18;:16;:18::i;:40::-;1788:55;;1853:13;1869:64;1901:31;1929:1;1901:20;:31::i;:::-;1869:27;1890:5;1869:16;:5;1879;1869:16;:9;:16;:::i;:64::-;1853:80;1173:790;-1:-1:-1;;;;;;;;;;;;;;1173:790:10:o;423:107:3:-;509:14;;:6;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;423:107::o;16956:210:8:-;17036:5;;;17012:8;17056:5;;:14;;;;;17069:1;17065;:5;17056:14;:23;;;;;17078:1;17074;:5;17056:23;17055:54;;;;17089:1;17085;:5;:14;;;;;17098:1;17094;:5;17085:14;:23;;;;;17107:1;17103;:5;17085:23;17051:109;;;17125:24;;;;;;;;;;;367:800:10;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:28::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;;1000:136;1037:1;1052;1067:5;1086:8;1108:18;:6;:16;:18::i;:::-;1000:136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;367:800:10;;;;;;:::o;1969:240::-;2070:15;2108:56;2121:42;2144:18;:16;:18::i;:::-;2121;:16;:18::i;:42::-;2108:8;:1;2114;2108:8;:5;:8;:::i;2260:676::-;2354:6;;2441:14;2450:4;;2441:14;:8;:14;:::i;:::-;2420:35;-1:-1:-1;2465:16:10;2484:21;:4;2420:35;2484:21;:8;:21;:::i;:::-;2465:40;-1:-1:-1;2515:16:10;2534:24;2465:40;;2534:24;:13;:24;:::i;:::-;2515:43;-1:-1:-1;2568:19:10;2590:24;2515:43;;2590:24;:13;:24;:::i;:::-;2568:46;-1:-1:-1;2624:23:10;2650:30;2568:46;;2650:30;:16;:30;:::i;:::-;2624:56;-1:-1:-1;2690:24:10;2717:38;2624:56;;2717:38;:20;:38;:::i;:::-;2690:65;-1:-1:-1;2765:22:10;2790:40;2690:65;;2790:40;:21;:40;:::i;:::-;2765:65;-1:-1:-1;2840:23:10;2866:30;2765:65;2886:9;2866:30;:19;:30;:::i;:::-;2840:56;2260:676;-1:-1:-1;;;;;;;;;;2260:676:10:o;4349:216:8:-;4400:8;4443:1;4431;4424:21;4420:101;;;4461:49;;;;;;;;;;;4420:101;4534:24;4546:1;794:66;4534:4;:24::i;5352:5160::-;5397:8;794:66;5421:1;:14;5417:74;;;5451:29;;;;;;;;;;;5417:74;5509:1;5504;:6;5500:66;;5526:29;;;;;;;;;;;5500:66;794;5579:1;:12;5575:51;;;-1:-1:-1;5614:1:8;5607:8;;5575:51;1273:66;5639:1;:15;5635:64;;-1:-1:-1;1453:75:8;5670:18;;5635:64;5709:8;5727;5745;6058:66;6046:1;:79;6042:316;;6141:79;;;;;6267:66;794;6246:11;;:88;6242:92;;6042:316;6402:66;6390:1;:79;6386:316;;6485:79;;;;;6611:66;794;6590:11;;:88;6586:92;;6386:316;6745:66;6733:1;:79;6729:314;;6828:79;;;;;6953:66;794;6932:11;;:88;6928:92;;6729:314;7086:66;7074:1;:79;7070:314;;7169:79;;;;;7294:66;794;7273:11;;:88;7269:92;;7070:314;7427:66;7415:1;:79;7411:314;;7510:79;;;;;7635:66;794;7614:11;;:88;7610:92;;7411:314;7768:66;7756:1;:79;7752:314;;7851:79;;;;;7976:66;7863;7955:11;;:88;7951:92;;7752:314;8111:66;8099:1;:79;8095:318;;8194:79;;;;;8321:66;794;8300:11;;:88;8296:92;;8095:318;8459:66;8447:1;:79;8443:320;;8542:79;;;;;8670:66;794;8649:11;;:88;8645:92;;8443:320;8810:66;8798:1;:79;8794:322;;8893:79;;;;;9022:66;794;9001:11;;:88;8997:92;;8794:322;9281:11;;;;-1:-1:-1;9281:11:8;;-1:-1:-1;794:66:8;9306:5;;;:15;;-1:-1:-1;9384:35:8;9341:39;;;9336:45;;:83;9331:88;;;;794:66;9429:1;9425;:5;:15;;;;;;9421:19;;9532:35;9527:1;9489:35;:39;9484:1;:45;:83;;;;;;9479:88;;;;794:66;9577:1;9573;:5;:15;;;;;;9569:19;;9680:35;9675:1;9637:35;:39;9632:1;:45;:83;;;;;;9627:88;;;;794:66;9725:1;9721;:5;:15;;;;;;9717:19;;9828:35;9823:1;9785:35;:39;9780:1;:45;:83;;;;;;9775:88;;;;794:66;9873:1;9869;:5;:15;;;;;;9865:19;;9976:35;9971:1;9933:35;:39;9928:1;:45;:83;;;;;;9923:88;;;;794:66;10021:1;10017;:5;:15;;;;;;10013:19;;10124:35;10119:1;10081:35;:39;10076:1;:45;:83;;;;;;10071:88;;;;794:66;10169:1;10165;:5;:15;;;;;;10161:19;;10272:35;10267:1;10229:35;:39;10224:1;:45;:83;;;;;;10219:88;;;;794:66;10317:1;10313;:5;:15;;;;;;10309:19;;10420:35;10415:1;10377:35;:39;10372:1;:45;:83;;;;;;10367:88;;;;5352:5160;;;;;;:::o;10609:5613::-;10655:8;1453:75;10679:15;;10675:105;;;-1:-1:-1;10768:1:8;10761:8;;10675:105;10793:6;10789:51;;-1:-1:-1;794:66:8;10815:14;;10789:51;1393:1;10853;:15;10849:77;;;10885:30;;;;;;;;;;;10849:77;794:66;11395;11391:70;;11475:5;;;:15;;;11501:18;11497:22;;11492:27;;;;;11391:70;;11559:5;;;:15;11555:19;;11581:1;11585:18;11581:22;11576:27;;;;794:66;11647:1;11643;:5;:15;;;;;;11639:19;;11665:1;11669:18;11665:22;11660:27;;;;794:66;11731:1;11727;:5;:15;;;;;;11723:19;;11749:1;11753:18;11749:22;11744:27;;;;794:66;11815:1;11811;:5;:15;;;;;;11807:19;;11833:1;11837:18;11833:22;11828:27;;;;794:66;11899:1;11895;:5;:15;;;;;;11891:19;;11917:1;11921:18;11917:22;11912:27;;;;794:66;11983:1;11979;:5;:15;;;;;;11975:19;;12001:1;12005:18;12001:22;11996:27;;;;794:66;12067:1;12063;:5;:15;;;;;;12059:19;;12085:1;12089:18;12085:22;12080:27;;;;794:66;12151:1;12147;:5;:15;;;;;;12143:19;;12169:1;12173:18;12169:22;12164:27;;;;794:66;12235:1;12231;:5;:15;;;;;;12227:19;;12253:1;12257:18;12253:22;12248:27;;;;794:66;12319:1;12315;:5;:15;;;;;;12311:19;;12337:1;12341:18;12337:22;12332:27;;;;794:66;12403:1;12399;:5;:15;;;;;;12395:19;;12421:1;12425:18;12421:22;12416:27;;;;794:66;12487:1;12483;:5;:15;;;;;;12479:19;;12505:1;12509:18;12505:22;12500:27;;;;794:66;12571:1;12567;:5;:15;;;;;;12563:19;;12589:1;12593:18;12589:22;12584:27;;;;794:66;12655:1;12651;:5;:15;;;;;;12647:19;;12673:1;12677:18;12673:22;12668:27;;;;794:66;12739:1;12735;:5;:15;;;;;;12731:19;;12757:1;12761:18;12757:22;12752:27;;;;794:66;12823:1;12819;:5;:15;;;;;;12815:19;;12841:1;12845:18;12841:22;12836:27;;;;794:66;12907:1;12903;:5;:15;;;;;;12899:19;;12925:1;12929:18;12925:22;12920:27;;;;794:66;12991:1;12987;:5;:15;;;;;13221:2;;;;;;13075:18;12987:15;;;13004:27;;;13071:22;:26;;794:66;13071:36;;12987:15;-1:-1:-1;13268:66:8;13257:78;;13256:85;13252:304;;13465:66;13372;13361:78;;:171;13357:175;;13252:304;13600:66;13589:78;;13588:85;13584:304;;13797:66;13704;13693:78;;:171;13689:175;;13584:304;13931:66;13920:78;;13919:85;13915:303;;14128:66;14035;14024:78;;:171;14020:175;;13915:303;14261:66;14250:78;;14249:85;14245:303;;14458:66;14365;14354:78;;:171;14350:175;;14245:303;14591:66;14580:78;;14579:85;14575:303;;14788:66;14695;14684:78;;:171;14680:175;;14575:303;14921:66;14910:78;;14909:85;14905:303;;15118:66;15025;15014:78;;:171;15010:175;;14905:303;15253:66;15242:78;;15241:85;15237:305;;15450:66;15357;15346:78;;:171;15342:175;;15237:305;15588:66;15577:78;;15576:85;15572:306;;15785:66;15692;15681:78;;:171;15677:175;;15572:306;15925:66;15914:78;;15913:85;15909:307;;16122:66;16029;16018:78;;:171;16014:175;;15909:307;10609:5613;;;;;:::o;265:5763:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;279:241:-1:-;;383:2;371:9;362:7;358:23;354:32;351:2;;;-1:-1;;389:12;351:2;85:6;72:20;17055:42;17655:5;17044:54;17630:5;17627:35;17617:2;;-1:-1;;17666:12;527:491;;;;665:2;653:9;644:7;640:23;636:32;633:2;;;-1:-1;;671:12;633:2;85:6;72:20;97:33;124:5;97:33;;;723:63;-1:-1;823:2;862:22;;72:20;97:33;72:20;97:33;;;627:391;;831:63;;-1:-1;;;931:2;970:22;;;;209:20;;627:391;7429:213;17055:42;17044:54;;;;1245:37;;7547:2;7532:18;;7518:124;7649:340;17055:42;17044:54;;;1104:58;;17044:54;;7975:2;7960:18;;1245:37;7803:2;7788:18;;7774:215;7996:675;17055:42;17044:54;;;1104:58;;17044:54;;;8407:2;8392:18;;1245:37;17044:54;;;;8490:2;8475:18;;1245:37;8573:2;8558:18;;1363:36;;;;8656:3;8641:19;;1363:36;;;;8234:3;8219:19;;8205:466;8678:443;17055:42;17044:54;;;;1104:58;;9026:2;9011:18;;1363:36;;;;9107:2;9092:18;;1363:36;8856:2;8841:18;;8827:294;9128:423;1363:36;;;9456:2;9441:18;;1363:36;;;;9537:2;9522:18;;1363:36;9296:2;9281:18;;9267:284;9558:639;1363:36;;;9939:2;9924:18;;1363:36;;;;10020:2;10005:18;;1363:36;;;;10101:2;10086:18;;1363:36;10182:3;10167:19;;1363:36;9778:3;9763:19;;9749:448;10204:407;10395:2;10409:47;;;1636:2;10380:18;;;16738:19;1672:66;16778:14;;;1652:87;1758:12;;;10366:245;10618:407;10809:2;10823:47;;;2009:2;10794:18;;;16738:19;2045:66;16778:14;;;2025:87;2131:12;;;10780:245;11032:407;11223:2;11237:47;;;2382:2;11208:18;;;16738:19;2418:66;16778:14;;;2398:87;2504:12;;;11194:245;11446:407;11637:2;11651:47;;;2755:2;11622:18;;;16738:19;2791:66;16778:14;;;2771:87;2877:12;;;11608:245;11860:407;12051:2;12065:47;;;3128:2;12036:18;;;16738:19;3164:66;16778:14;;;3144:87;3265:66;3251:12;;;3244:88;3351:12;;;12022:245;12274:407;12465:2;12479:47;;;3602:2;12450:18;;;16738:19;3638:66;16778:14;;;3618:87;3724:12;;;12436:245;12688:407;12879:2;12893:47;;;3975:2;12864:18;;;16738:19;4011:66;16778:14;;;3991:87;4112:66;4098:12;;;4091:88;4198:12;;;12850:245;13102:407;13293:2;13307:47;;;4449:2;13278:18;;;16738:19;4485:66;16778:14;;;4465:87;4571:12;;;13264:245;13516:407;13707:2;13721:47;;;4822:2;13692:18;;;16738:19;4858:66;16778:14;;;4838:87;4944:12;;;13678:245;13930:407;14121:2;14135:47;;;5195:2;14106:18;;;16738:19;5231:66;16778:14;;;5211:87;5317:12;;;14092:245;14344:407;14535:2;14549:47;;;5568:2;14520:18;;;16738:19;5604:66;16778:14;;;5584:87;5690:12;;;14506:245;14758:407;14949:2;14963:47;;;5941:2;14934:18;;;16738:19;5977:66;16778:14;;;5957:87;6063:12;;;14920:245;15172:407;15363:2;15377:47;;;6314:2;15348:18;;;16738:19;6350:66;16778:14;;;6330:87;6451:66;6437:12;;;6430:88;6537:12;;;15334:245;15586:407;15777:2;15791:47;;;6788:2;15762:18;;;16738:19;6824:66;16778:14;;;6804:87;6910:12;;;15748:245;16000:407;16191:2;16205:47;;;7161:2;16176:18;;;16738:19;7197:66;16778:14;;;7177:87;7283:12;;;16162:245;16414:213;1363:36;;;16532:2;16517:18;;16503:124;17568:117;17055:42;17655:5;17044:54;17630:5;17627:35;17617:2;;17676:1;;17666:12"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/State.sol": {
			"id": 3
		},
		"core/Ownable.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../core/State.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibFixedMath.toFixed(amount, 10**18), // DAI\n                state\n            );\n            amountReceived = uint256((amountReceivedFixed * int(10**6)).toInteger());\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibFixedMath.toFixed(amount, 10**6), // USDC\n                state\n            );\n            amountReceived = uint256((amountReceivedFixed * int(10**18)).toInteger());\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute\n        (int256 pA, int256 price) = _bisect(\n            a,\n            b,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        // Compute about of `tokenB`\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = int256(0).sub(deltaB); // negate\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000)); // Good for USDC, may vary w token.\n        if (deltaB > 0) {\n            deltaB = 0;\n        } else if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n        }\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA < LibFixedMath.one().div(state.eToKappa).mul(pBarA)) {\n            newPBarA = LibFixedMath.one().div(state.eToKappa).mul(pBarA);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 pA, int256 r)\n    {\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            emit Bisect(\n                lhs1,\n                mid,\n                lhs\n            );\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return (pA, lowerBound);\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        uint256 l;                                          // total liquidity token balance\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**40;\n            base = 2**87;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1 / 2**40), b) * 2**40;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.div(pA),\n            betaToDeltaT.div(pBarA)\n        );\n        int256 term3 = LibFixedMath.one().div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function scaleUp(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.mul(10**10);\n    }\n\n    function scaleDown(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        return a.div(10**10);\n    }\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State gState;\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        return gState;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState = state;\n    }\n\n    function initState()\n        external\n        onlyOwner\n    {\n        _initState();\n    }\n\n    function _initState()\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n        gState.pBarX = LibFixedMath.toFixed(int256(1));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}"
	},
	"sourceTreeHashHex": "0x11fa0ca6aaf7f0b09b137f0cd8737ec96b56b2a2c97087eab15a22c8b9011202",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}