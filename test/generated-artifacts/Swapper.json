{
	"schemaVersion": "2.0.0",
	"contractName": "Swapper",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "mid",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					}
				],
				"name": "Bisect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term2",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term3",
						"type": "int256"
					}
				],
				"name": "E",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rh",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yl",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "yh",
						"type": "int256"
					}
				],
				"name": "EGGG",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountSpent",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountSpent",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amountReceived",
						"type": "int256"
					}
				],
				"name": "FillInternal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "lhs",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhs",
						"type": "int256"
					}
				],
				"name": "L",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaB",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "newPBarX",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					}
				],
				"name": "Price",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "price",
						"type": "int256"
					}
				],
				"name": "Price2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int256",
						"name": "a",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "b",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "pBarA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "deltaA",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "term4",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "k13",
						"type": "int256"
					}
				],
				"name": "T",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "val",
						"type": "int256"
					}
				],
				"name": "VALUE",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "fromToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "toToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountReceived",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b0319163317905561332b806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063afd46eb511610050578063afd46eb51461009f578063df791e50146100c0578063f2fde38b146100e057610067565b80637b6890361461006c5780638da5cb5b14610081575b600080fd5b61007f61007a366004612973565b6100f3565b005b610089610109565b60405161009691906129e7565b60405180910390f35b6100a7610125565b6040516100969d9c9b9a99989796959493929190612a9e565b6100d36100ce3660046129a7565b61017a565b60405161009691906132bd565b61007f6100ee366004612958565b61033a565b6100fb61040d565b6101058282610460565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b600061018461289e565b61018c6105b3565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156101fc5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561022a576000610217868661021187610659565b8561066e565b905061022281610aab565b9250506102f3565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102985750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156102b85760006102ad868661021187610659565b905061022281610ab8565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612c08565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161032a959493929190612a2f565b60405180910390a1509392505050565b61034261040d565b73ffffffffffffffffffffffffffffffffffffffff811661038f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612f36565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906104019033908490612a08565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612b9a565b565b60015460ff161561049d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612bd1565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905561052460636064610ac5565b60065560636007819055610539906064610ac5565b6008556105496005612710610ac5565b60095561057161055d6001620f4240610b66565b610565610b85565b9063ffffffff610b9916565b600c556105826127156103e8610b66565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6105bb61289e565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610666826012610c02565b90505b919050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156106d45750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156106f357505050506060820151608083015160c08401516001610793565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156107615750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102b85785608001519350856060015192506107908660c00151610784610b85565b9063ffffffff610c1716565b91505b60006107a68585858a6101000151610c96565b905060006107b8868684878d8d610d4c565b905060008112156107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906131d9565b8061082c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613247565b600061085e6108428a6101200151610565610b85565b6108528c8563ffffffff61111916565b9063ffffffff61111916565b60009081039150811261089d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612ed9565b60006108ad6001620186a0610b66565b9050806108c0888463ffffffff6111d216565b136108eb576108d5818863ffffffff610b9916565b9150600082126108e65760006108e8565b815b91505b6108f96001620f4240610b66565b8201915060008212610937576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612d12565b60006109578b610140015161094a6111de565b8d6101600151888b6111e2565b6101808c0151909150610970908863ffffffff61111916565b811315610994576101808b015161098d908863ffffffff61111916565b90506109cd565b866109ad8c61018001518361111990919063ffffffff16565b12156109cd576101808b01516109ca90889063ffffffff610c1716565b90505b6109d56111de565b6101408c01528515610a17576109f1898d63ffffffff6111d216565b60608c0152610a06888463ffffffff6111d216565b60808c015260c08b01819052610a53565b610a27888463ffffffff6111d216565b60608c0152610a3c898d63ffffffff6111d216565b60808c0152610a4d81610784610b85565b60c08c01525b610a5c8b6112c3565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d85604051610a8f93929190612a70565b60405180910390a150506000039b9a5050505050505050505050565b60006106668260066112e5565b60006106668260126112e5565b600080831215610b01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613090565b6000821215610b3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612c7e565b610b5f610b59846f800000000000000000000000000000006112f5565b8361136b565b9392505050565b6000610b5f610b59846f800000000000000000000000000000006112f5565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610bf5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613059565b610b5f838360000361143a565b6000610b5f8383600a0a610ac5565b92915050565b600080610c23846114b0565b90508015610c7357610c6b610c37856114b0565b610c60610c6587610c606f80000000000000000000000000000000610c5b8b6114b0565b61136b565b6112f5565b8661136b565b915050610c11565b610c6b610c90856f800000000000000000000000000000006112f5565b8461136b565b600080610ca9848763ffffffff61111916565b90506000610cbd868363ffffffff610c1716565b90506000610cd1838863ffffffff610c1716565b90506000610ce186610565610b85565b90506000610ced610b85565b841215610d1057610d09610d0483610852876114c6565b611bb0565b9050610d2e565b610d2b610d23610d0484610852876114c6565b610784610b85565b90505b610d3e818963ffffffff61111916565b9a9950505050505050505050565b600080610da1610d94610d84610d688a8863ffffffff61111916565b610d788c8c63ffffffff61111916565b9063ffffffff6111d216565b610784898863ffffffff61111916565b899063ffffffff61111916565b90506000610dc5610db88a8763ffffffff6111d216565b8a9063ffffffff610c1716565b90506000610dd78a8a8a8a8a8a6121be565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e089190612b24565b60405180910390a16000610e218b8b8b8b8b878c6122b1565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e5291906130ed565b60405180910390a16000610e6c8c8c8c8c8c8a8a8e612351565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e9d9190612e5b565b60405180910390a1610eb582828961012001516123ea565b156110aa576000610ec9838388888c612484565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610efe90849061312c565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610f359190612e1c565b60405180910390a1610f4d83838a61012001516123ea565b156110a8576000610f6284848989868e61252d565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610f9c908690612f6d565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee683604051610fd39190612e9a565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68260405161100a919061327e565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516110419190612ddd565b60405180910390a161105984848b61012001516123ea565b156110a65761106c848484848b8b6125b5565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68460405161109d9190612fe3565b60405180910390a15b505b505b6110b382612665565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee66110e4838c63ffffffff61111916565b6040516110f19190612c3f565b60405180910390a1611109828b63ffffffff61111916565b9c9b505050505050505050505050565b6000806111456f80000000000000000000000000000000610c6061113c876114b0565b610c60876114b0565b9050600061115e611155866126aa565b610c60866114b0565b9050600061117761116e876114b0565b610c60876126aa565b905060006111a961119361118a896126aa565b610c60896126aa565b6f8000000000000000000000000000000061136b565b90506111c76111c16111bb868661143a565b8461143a565b8261143a565b979650505050505050565b6000610b5f838361143a565b4390565b6000806111f08787036126e7565b90506000611210610d04611203886114c6565b849063ffffffff61111916565b9050600061122082610565610b85565b90506000611234878363ffffffff61111916565b90506000611248878563ffffffff61111916565b9050600061127461125f858a63ffffffff61111916565b61126f878c63ffffffff61111916565b6111d2565b9050600061128c826107848c8c63ffffffff61111916565b905060006112b161129d600261273d565b61078484610d78898963ffffffff6111d216565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610b5f82600a0a84026114b0565b6000821580611302575081155b1561130f57506000610c11565b508181028183828161131d57fe5b0514158061133457508282828161133057fe5b0514155b15610c11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612fac565b6000816113a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea9061316b565b7f8000000000000000000000000000000000000000000000000000000000000000831480156113f25750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15611429576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906131a2565b81838161143257fe5b059392505050565b81810160008312801561144d5750600082125b801561145857508281135b80611479575060008313801561146e5750600082135b801561147957508281125b15610c11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613022565b6f80000000000000000000000000000000900590565b60006f80000000000000000000000000000000821315611512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612cdb565b6000821361154c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612b63565b6f8000000000000000000000000000000082141561156c57506000610669565b640733048c5a821361159f57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610669565b60008060006a01c8464f7616476000000085136115fe577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361165c577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136116be577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611722577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611786577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de7000000000000000000085136117ea577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361184e577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136118b2577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611916577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161198c57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816119bd57fe5b05840193506f80000000000000000000000000000000818302816119dd57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611a0e57fe5b05840193506f8000000000000000000000000000000081830281611a2e57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611a5f57fe5b05840193506f8000000000000000000000000000000081830281611a7f57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611ab057fe5b05840193506f8000000000000000000000000000000081830281611ad057fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611b0157fe5b05840193506f8000000000000000000000000000000081830281611b2157fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611b5257fe5b05840193506f8000000000000000000000000000000081830281611b7257fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611ba357fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611be257506000610669565b81611bfe57506f80000000000000000000000000000000610669565b6000821315611c39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612da6565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281611ca557fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281611cd257fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281611cfe57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281611d2a57fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281611d5657fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611d8157fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611dac57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611dd657fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611e0057fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611e2a57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611e5357fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611e7c57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611ea457fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611ecc57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611ef357fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611f1a57fe5b05905080601402830192506f8000000000000000000000000000000082820281611f4057fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611faf577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611ff1577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561203357701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612075577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156120b75770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156120f7576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612137576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612177576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156121b7576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806121cb600261273d565b9050600061220a6121ea8986610100015161111990919063ffffffff16565b610565896108528d6108528a610100015189610b9990919063ffffffff16565b905060006122306122278a6108528d6108528d610852600461273d565b610d7884612759565b9050600061224c8461078461224785610784610b85565b6114c6565b600003905060008082131561226f5761226a610d2383600003611bb0565b612278565b61227882611bb0565b905060006122a361228f878d63ffffffff61111916565b61078460008890038563ffffffff6111d216565b905060006112b18a83612765565b6000806122e46122d76122ca868a63ffffffff61111916565b8a9063ffffffff610b9916565b8a9063ffffffff61111916565b905060006122fb6122d78b8763ffffffff6111d216565b90506000612312612247848463ffffffff610c1716565b9050600061232b82610852886101000151610565610b85565b90506000612340896107848a61085286611bb0565b9d9c50505050505050505050505050565b600080612364848663ffffffff610c1716565b9050600061239261238086610852876101000151610565610b85565b6101008601519063ffffffff6111d216565b905060006123b66123ae88610852886101000151610565610b85565b610d78610b85565b905060006123ca838363ffffffff610c1716565b90508084126123d95780612340565b50919b9a5050505050505050505050565b6000806123fd848663ffffffff610b9916565b9050600061240d6001600a610b66565b9050600061243d61243061242388610565610b85565b879063ffffffff6111d216565b839063ffffffff61111916565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612470929190612b16565b60405180910390a190911395945050505050565b6000806124968784610100015161277c565b905060006124c86124b286610852876101000151610565610b85565b610100860151610d78908563ffffffff61111916565b905060006124f56124e88a6108528a6108528a6101000151610565610b85565b849063ffffffff6111d216565b9050600061250d826107848c8663ffffffff61111916565b905088811261251c578861251e565b805b94505050509550959350505050565b600080600080600061253f8b8b6127b9565b905060006125528288610100015161277c565b905060006125766125698c8563ffffffff61111916565b8b9063ffffffff610b9916565b905080821361259b57828c8361258b8f6127ff565b96509650965096505050506125a8565b508b955090935086925090505b9650965096509692505050565b6000806125fe6125db6125ce898b63ffffffff610b9916565b859063ffffffff61111916565b610d786125ee898b63ffffffff61111916565b610565898d63ffffffff61111916565b905060006126356126256126188a8c63ffffffff610b9916565b879063ffffffff61111916565b610d78888a63ffffffff610b9916565b90506000612649838363ffffffff610c1716565b90508981136126585789610d3e565b9998505050505050505050565b612671605f6064610b66565b81121561040a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613210565b60008082136126d1576f7fffffffffffffffffffffffffffffff8260000316600003610666565b506f7fffffffffffffffffffffffffffffff1690565b600080821215612723576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612d49565b610666826f800000000000000000000000000000006112f5565b6000610666826f800000000000000000000000000000006112f5565b60006106668283611119565b6000818313156127755781610b5f565b5090919050565b60008061278e610d2384610565610b85565b9050600061279b856114c6565b90506127b0610d04838363ffffffff61111916565b95945050505050565b6000610b5f6127c8600a61273d565b6107846127e56127d8600661273d565b869063ffffffff61111916565b610d786127f2600461273d565b889063ffffffff61111916565b600080612812838063ffffffff61111916565b90506000612826848363ffffffff61111916565b9050600061283a828063ffffffff61111916565b9050600061284e828063ffffffff61111916565b90506000612862828063ffffffff61111916565b90506000612876828063ffffffff61111916565b9050600061288a828863ffffffff61111916565b90506000610d3e828063ffffffff61111916565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c1157600080fd5b600060208284031215612969578081fd5b610b5f8383612934565b60008060408385031215612985578081fd5b61298f8484612934565b915061299e8460208501612934565b90509250929050565b6000806000606084860312156129bb578081fd5b83356129c6816132c6565b925060208401356129d6816132c6565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461040a57600080fdfea365627a7a7231582099a143c90d1ce3bb11590fe0206c63c63c15dab7843451805aa7d1eaa6b8e6956c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x332B DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE0 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x2973 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x29E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A9E JUMP JUMPDEST PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x29A7 JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x32BD JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2958 JUMP JUMPDEST PUSH2 0x33A JUMP JUMPDEST PUSH2 0xFB PUSH2 0x40D JUMP JUMPDEST PUSH2 0x105 DUP3 DUP3 PUSH2 0x460 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x18C PUSH2 0x5B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1FC JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 PUSH2 0x217 DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0xAAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F3 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x298 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 PUSH2 0x2AD DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x40D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2F36 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x401 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x45E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2B9A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2BD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x524 PUSH1 0x63 PUSH1 0x64 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x539 SWAP1 PUSH1 0x64 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x549 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x571 PUSH2 0x55D PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x582 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xB66 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x289E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xC02 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x6D4 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x6F3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x793 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x790 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7A6 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xC96 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B8 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xD4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x31D9 JUMP JUMPDEST DUP1 PUSH2 0x82C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85E PUSH2 0x842 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x852 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x89D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2ED9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AD PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8C0 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SGT PUSH2 0x8EB JUMPI PUSH2 0x8D5 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x8E6 JUMPI PUSH1 0x0 PUSH2 0x8E8 JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x8F9 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB66 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2D12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x957 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x94A PUSH2 0x11DE JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x970 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x994 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x98D SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x9CD JUMP JUMPDEST DUP7 PUSH2 0x9AD DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0x1119 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x9CD JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x9CA SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x9D5 PUSH2 0x11DE JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0xA17 JUMPI PUSH2 0x9F1 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA06 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0xA53 JUMP JUMPDEST PUSH2 0xA27 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA3C DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0xA4D DUP2 PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0xA5C DUP12 PUSH2 0x12C3 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA8F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x6 PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2C7E JUMP JUMPDEST PUSH2 0xB5F PUSH2 0xB59 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST DUP4 PUSH2 0x136B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F PUSH2 0xB59 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3059 JUMP JUMPDEST PUSH2 0xB5F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x143A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xAC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC23 DUP5 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xC73 JUMPI PUSH2 0xC6B PUSH2 0xC37 DUP6 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 PUSH2 0xC65 DUP8 PUSH2 0xC60 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC5B DUP12 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0x136B JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST DUP7 PUSH2 0x136B JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC11 JUMP JUMPDEST PUSH2 0xC6B PUSH2 0xC90 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST DUP5 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCA9 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCBD DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD1 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCE1 DUP7 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCED PUSH2 0xB85 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xD10 JUMPI PUSH2 0xD09 PUSH2 0xD04 DUP4 PUSH2 0x852 DUP8 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x1BB0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD2E JUMP JUMPDEST PUSH2 0xD2B PUSH2 0xD23 PUSH2 0xD04 DUP5 PUSH2 0x852 DUP8 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xD3E DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDA1 PUSH2 0xD94 PUSH2 0xD84 PUSH2 0xD68 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH2 0x784 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDC5 PUSH2 0xDB8 DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD7 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21BE JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE08 SWAP2 SWAP1 PUSH2 0x2B24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE21 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x22B1 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE52 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE6C DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2351 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE9D SWAP2 SWAP1 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xEB5 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10AA JUMPI PUSH1 0x0 PUSH2 0xEC9 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2484 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xEFE SWAP1 DUP5 SWAP1 PUSH2 0x312C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xF4D DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10A8 JUMPI PUSH1 0x0 PUSH2 0xF62 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x252D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xF9C SWAP1 DUP7 SWAP1 PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFD3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x100A SWAP2 SWAP1 PUSH2 0x327E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1041 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1059 DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10A6 JUMPI PUSH2 0x106C DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x25B5 JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x10B3 DUP3 PUSH2 0x2665 JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x10E4 DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F1 SWAP2 SWAP1 PUSH2 0x2C3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1109 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1145 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC60 PUSH2 0x113C DUP8 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 DUP8 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x115E PUSH2 0x1155 DUP7 PUSH2 0x26AA JUMP JUMPDEST PUSH2 0xC60 DUP7 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1177 PUSH2 0x116E DUP8 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 DUP8 PUSH2 0x26AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11A9 PUSH2 0x1193 PUSH2 0x118A DUP10 PUSH2 0x26AA JUMP JUMPDEST PUSH2 0xC60 DUP10 PUSH2 0x26AA JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x136B JUMP JUMPDEST SWAP1 POP PUSH2 0x11C7 PUSH2 0x11C1 PUSH2 0x11BB DUP7 DUP7 PUSH2 0x143A JUMP JUMPDEST DUP5 PUSH2 0x143A JUMP JUMPDEST DUP3 PUSH2 0x143A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP4 DUP4 PUSH2 0x143A JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11F0 DUP8 DUP8 SUB PUSH2 0x26E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1210 PUSH2 0xD04 PUSH2 0x1203 DUP9 PUSH2 0x14C6 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1220 DUP3 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1234 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1248 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1274 PUSH2 0x125F DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x126F DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x11D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x128C DUP3 PUSH2 0x784 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 PUSH2 0x129D PUSH1 0x2 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x784 DUP5 PUSH2 0xD78 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1302 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x130F JUMPI POP PUSH1 0x0 PUSH2 0xC11 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x131D JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1334 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1330 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2FAC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x13A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x316B JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x13F2 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x1429 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x31A2 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1432 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x144D JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1458 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x1479 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x146E JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x1479 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3022 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x154C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2B63 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x156C JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x159F JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x15FE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x165C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x16BE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1722 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1786 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x17EA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x184E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x18B2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1916 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x198C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x19BD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x19DD JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1A0E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A2E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1A5F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A7F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1AB0 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AD0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1B01 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B21 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1B52 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B72 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1BA3 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1BE2 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST DUP2 PUSH2 0x1BFE JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2DA6 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CA5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CD2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CFE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D2A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D56 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D81 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DAC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DD6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E00 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E2A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E53 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E7C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EA4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ECC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EF3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F1A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F40 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FAF JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FF1 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2033 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2075 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20B7 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20F7 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2137 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2177 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21B7 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21CB PUSH1 0x2 PUSH2 0x273D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x220A PUSH2 0x21EA DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x1119 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x565 DUP10 PUSH2 0x852 DUP14 PUSH2 0x852 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xB99 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2230 PUSH2 0x2227 DUP11 PUSH2 0x852 DUP14 PUSH2 0x852 DUP14 PUSH2 0x852 PUSH1 0x4 PUSH2 0x273D JUMP JUMPDEST PUSH2 0xD78 DUP5 PUSH2 0x2759 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x224C DUP5 PUSH2 0x784 PUSH2 0x2247 DUP6 PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x14C6 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x226F JUMPI PUSH2 0x226A PUSH2 0xD23 DUP4 PUSH1 0x0 SUB PUSH2 0x1BB0 JUMP JUMPDEST PUSH2 0x2278 JUMP JUMPDEST PUSH2 0x2278 DUP3 PUSH2 0x1BB0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22A3 PUSH2 0x228F DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x784 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 DUP11 DUP4 PUSH2 0x2765 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22E4 PUSH2 0x22D7 PUSH2 0x22CA DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22FB PUSH2 0x22D7 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2312 PUSH2 0x2247 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x232B DUP3 PUSH2 0x852 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2340 DUP10 PUSH2 0x784 DUP11 PUSH2 0x852 DUP7 PUSH2 0x1BB0 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2364 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2392 PUSH2 0x2380 DUP7 PUSH2 0x852 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23B6 PUSH2 0x23AE DUP9 PUSH2 0x852 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0xD78 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23CA DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x23D9 JUMPI DUP1 PUSH2 0x2340 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23FD DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x240D PUSH1 0x1 PUSH1 0xA PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x243D PUSH2 0x2430 PUSH2 0x2423 DUP9 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2470 SWAP3 SWAP2 SWAP1 PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2496 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x277C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24C8 PUSH2 0x24B2 DUP7 PUSH2 0x852 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xD78 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24F5 PUSH2 0x24E8 DUP11 PUSH2 0x852 DUP11 PUSH2 0x852 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x250D DUP3 PUSH2 0x784 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x251C JUMPI DUP9 PUSH2 0x251E JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x253F DUP12 DUP12 PUSH2 0x27B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2552 DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x277C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2576 PUSH2 0x2569 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x259B JUMPI DUP3 DUP13 DUP4 PUSH2 0x258B DUP16 PUSH2 0x27FF JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x25A8 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25FE PUSH2 0x25DB PUSH2 0x25CE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 PUSH2 0x25EE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x565 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2635 PUSH2 0x2625 PUSH2 0x2618 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2649 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2658 JUMPI DUP10 PUSH2 0xD3E JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2671 PUSH1 0x5F PUSH1 0x64 PUSH2 0xB66 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3210 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x26D1 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x666 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2723 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2D49 JUMP JUMPDEST PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 DUP4 PUSH2 0x1119 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2775 JUMPI DUP2 PUSH2 0xB5F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278E PUSH2 0xD23 DUP5 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x279B DUP6 PUSH2 0x14C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x27B0 PUSH2 0xD04 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F PUSH2 0x27C8 PUSH1 0xA PUSH2 0x273D JUMP JUMPDEST PUSH2 0x784 PUSH2 0x27E5 PUSH2 0x27D8 PUSH1 0x6 PUSH2 0x273D JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 PUSH2 0x27F2 PUSH1 0x4 PUSH2 0x273D JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2812 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2826 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x283A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x284E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2862 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2876 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x288A DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD3E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2969 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB5F DUP4 DUP4 PUSH2 0x2934 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2985 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x298F DUP5 DUP5 PUSH2 0x2934 JUMP JUMPDEST SWAP2 POP PUSH2 0x299E DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2934 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x29BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x29C6 DUP2 PUSH2 0x32C6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x29D6 DUP2 PUSH2 0x32C6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP10 LOG1 NUMBER 0xc9 0xd SHR 0xe3 0xbb GT MSIZE 0xf 0xe0 KECCAK256 PUSH13 0x63C63C15DAB7843451805AA7D1 0xea 0xa6 0xb8 0xe6 SWAP6 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "331:14849:4:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;331:14849:4;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063afd46eb511610050578063afd46eb51461009f578063df791e50146100c0578063f2fde38b146100e057610067565b80637b6890361461006c5780638da5cb5b14610081575b600080fd5b61007f61007a366004612973565b6100f3565b005b610089610109565b60405161009691906129e7565b60405180910390f35b6100a7610125565b6040516100969d9c9b9a99989796959493929190612a9e565b6100d36100ce3660046129a7565b61017a565b60405161009691906132bd565b61007f6100ee366004612958565b61033a565b6100fb61040d565b6101058282610460565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b600061018461289e565b61018c6105b3565b9050806020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156101fc5750806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561022a576000610217868661021187610659565b8561066e565b905061022281610aab565b9250506102f3565b806040015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156102985750806020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156102b85760006102ad868661021187610659565b905061022281610ab8565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612c08565b60405180910390fd5b7f256db8090fa51c3bac981768637d5a7c46b5540644dcef89052b89dbb2f6c8ea338686868660405161032a959493929190612a2f565b60405180910390a1509392505050565b61034261040d565b73ffffffffffffffffffffffffffffffffffffffff811661038f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612f36565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906104019033908490612a08565b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612b9a565b565b60015460ff161561049d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612bd1565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905561052460636064610ac5565b60065560636007819055610539906064610ac5565b6008556105496005612710610ac5565b60095561057161055d6001620f4240610b66565b610565610b85565b9063ffffffff610b9916565b600c556105826127156103e8610b66565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6105bb61289e565b50604080516101a08101825260015460ff81161515825273ffffffffffffffffffffffffffffffffffffffff610100918290048116602084015260025416928201929092526003546060820152600454608082015260055460a082015260065460c082015260075460e082015260085491810191909152600954610120820152600a54610140820152600c54610160820152600d5461018082015290565b6000610666826012610c02565b90505b919050565b6020810151600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8a811691161480156106d45750856040015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156106f357505050506060820151608083015160c08401516001610793565b856040015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480156107615750856020015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156102b85785608001519350856060015192506107908660c00151610784610b85565b9063ffffffff610c1716565b91505b60006107a68585858a6101000151610c96565b905060006107b8868684878d8d610d4c565b905060008112156107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906131d9565b8061082c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613247565b600061085e6108428a6101200151610565610b85565b6108528c8563ffffffff61111916565b9063ffffffff61111916565b60009081039150811261089d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612ed9565b60006108ad6001620186a0610b66565b9050806108c0888463ffffffff6111d216565b136108eb576108d5818863ffffffff610b9916565b9150600082126108e65760006108e8565b815b91505b6108f96001620f4240610b66565b8201915060008212610937576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612d12565b60006109578b610140015161094a6111de565b8d6101600151888b6111e2565b6101808c0151909150610970908863ffffffff61111916565b811315610994576101808b015161098d908863ffffffff61111916565b90506109cd565b866109ad8c61018001518361111990919063ffffffff16565b12156109cd576101808b01516109ca90889063ffffffff610c1716565b90505b6109d56111de565b6101408c01528515610a17576109f1898d63ffffffff6111d216565b60608c0152610a06888463ffffffff6111d216565b60808c015260c08b01819052610a53565b610a27888463ffffffff6111d216565b60608c0152610a3c898d63ffffffff6111d216565b60808c0152610a4d81610784610b85565b60c08c01525b610a5c8b6112c3565b7f666804e599b015edcfb9de12153bf8a48aa5a84b8861b8fa88c1cf4b11974c15338d85604051610a8f93929190612a70565b60405180910390a150506000039b9a5050505050505050505050565b60006106668260066112e5565b60006106668260126112e5565b600080831215610b01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613090565b6000821215610b3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612c7e565b610b5f610b59846f800000000000000000000000000000006112f5565b8361136b565b9392505050565b6000610b5f610b59846f800000000000000000000000000000006112f5565b6f8000000000000000000000000000000090565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610bf5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613059565b610b5f838360000361143a565b6000610b5f8383600a0a610ac5565b92915050565b600080610c23846114b0565b90508015610c7357610c6b610c37856114b0565b610c60610c6587610c606f80000000000000000000000000000000610c5b8b6114b0565b61136b565b6112f5565b8661136b565b915050610c11565b610c6b610c90856f800000000000000000000000000000006112f5565b8461136b565b600080610ca9848763ffffffff61111916565b90506000610cbd868363ffffffff610c1716565b90506000610cd1838863ffffffff610c1716565b90506000610ce186610565610b85565b90506000610ced610b85565b841215610d1057610d09610d0483610852876114c6565b611bb0565b9050610d2e565b610d2b610d23610d0484610852876114c6565b610784610b85565b90505b610d3e818963ffffffff61111916565b9a9950505050505050505050565b600080610da1610d94610d84610d688a8863ffffffff61111916565b610d788c8c63ffffffff61111916565b9063ffffffff6111d216565b610784898863ffffffff61111916565b899063ffffffff61111916565b90506000610dc5610db88a8763ffffffff6111d216565b8a9063ffffffff610c1716565b90506000610dd78a8a8a8a8a8a6121be565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e089190612b24565b60405180910390a16000610e218b8b8b8b8b878c6122b1565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e5291906130ed565b60405180910390a16000610e6c8c8c8c8c8c8a8a8e612351565b90507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610e9d9190612e5b565b60405180910390a1610eb582828961012001516123ea565b156110aa576000610ec9838388888c612484565b60405191935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610efe90849061312c565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee681604051610f359190612e1c565b60405180910390a1610f4d83838a61012001516123ea565b156110a8576000610f6284848989868e61252d565b604051939750919550935091507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee690610f9c908690612f6d565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee683604051610fd39190612e9a565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68260405161100a919061327e565b60405180910390a17feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee6816040516110419190612ddd565b60405180910390a161105984848b61012001516123ea565b156110a65761106c848484848b8b6125b5565b93507feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee68460405161109d9190612fe3565b60405180910390a15b505b505b6110b382612665565b7feab289761059c96752af5f89d5fae009fad63b60a50a884c5ce5936384b16ee66110e4838c63ffffffff61111916565b6040516110f19190612c3f565b60405180910390a1611109828b63ffffffff61111916565b9c9b505050505050505050505050565b6000806111456f80000000000000000000000000000000610c6061113c876114b0565b610c60876114b0565b9050600061115e611155866126aa565b610c60866114b0565b9050600061117761116e876114b0565b610c60876126aa565b905060006111a961119361118a896126aa565b610c60896126aa565b6f8000000000000000000000000000000061136b565b90506111c76111c16111bb868661143a565b8461143a565b8261143a565b979650505050505050565b6000610b5f838361143a565b4390565b6000806111f08787036126e7565b90506000611210610d04611203886114c6565b849063ffffffff61111916565b9050600061122082610565610b85565b90506000611234878363ffffffff61111916565b90506000611248878563ffffffff61111916565b9050600061127461125f858a63ffffffff61111916565b61126f878c63ffffffff61111916565b6111d2565b9050600061128c826107848c8c63ffffffff61111916565b905060006112b161129d600261273d565b61078484610d78898963ffffffff6111d216565b9e9d5050505050505050505050505050565b6060810151600355608081015160045560c08101516006556101400151600a55565b6000610b5f82600a0a84026114b0565b6000821580611302575081155b1561130f57506000610c11565b508181028183828161131d57fe5b0514158061133457508282828161133057fe5b0514155b15610c11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612fac565b6000816113a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea9061316b565b7f8000000000000000000000000000000000000000000000000000000000000000831480156113f25750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15611429576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea906131a2565b81838161143257fe5b059392505050565b81810160008312801561144d5750600082125b801561145857508281135b80611479575060008313801561146e5750600082135b801561147957508281125b15610c11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613022565b6f80000000000000000000000000000000900590565b60006f80000000000000000000000000000000821315611512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612cdb565b6000821361154c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612b63565b6f8000000000000000000000000000000082141561156c57506000610669565b640733048c5a821361159f57507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610669565b60008060006a01c8464f7616476000000085136115fe577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e90000000000000851361165c577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d7800000000000000085136116be577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513611722577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc0000000000000000008513611786577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de7000000000000000000085136117ea577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be5828000000000000000000851361184e577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c00000000000000000085136118b2577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d8513611916577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f800000000000000000000000000000008183028161198c57fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa038302816119bd57fe5b05840193506f80000000000000000000000000000000818302816119dd57fe5b059150700300000000000000000000000000000000836f9999999999999999999999999999999903830281611a0e57fe5b05840193506f8000000000000000000000000000000081830281611a2e57fe5b059150700400000000000000000000000000000000836f9249249249249249249249249249249203830281611a5f57fe5b05840193506f8000000000000000000000000000000081830281611a7f57fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281611ab057fe5b05840193506f8000000000000000000000000000000081830281611ad057fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281611b0157fe5b05840193506f8000000000000000000000000000000081830281611b2157fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281611b5257fe5b05840193506f8000000000000000000000000000000081830281611b7257fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281611ba357fe5b0584019350505050919050565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215611be257506000610669565b81611bfe57506f80000000000000000000000000000000610669565b6000821315611c39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612da6565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281611ca557fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281611cd257fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281611cfe57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281611d2a57fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281611d5657fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281611d8157fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281611dac57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281611dd657fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281611e0057fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281611e2a57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281611e5357fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281611e7c57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281611ea457fe5b059050806201c63802830192506f8000000000000000000000000000000082820281611ecc57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281611ef357fe5b0590508061017c02830192506f8000000000000000000000000000000082820281611f1a57fe5b05905080601402830192506f8000000000000000000000000000000082820281611f4057fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615611faf577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615611ff1577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b70040000000000000000000000000000000084161561203357701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615612075577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b7001000000000000000000000000000000008416156120b75770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f800000000000000000000000000000008416156120f7576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615612137576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f20000000000000000000000000000000841615612177576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156121b7576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b6000806121cb600261273d565b9050600061220a6121ea8986610100015161111990919063ffffffff16565b610565896108528d6108528a610100015189610b9990919063ffffffff16565b905060006122306122278a6108528d6108528d610852600461273d565b610d7884612759565b9050600061224c8461078461224785610784610b85565b6114c6565b600003905060008082131561226f5761226a610d2383600003611bb0565b612278565b61227882611bb0565b905060006122a361228f878d63ffffffff61111916565b61078460008890038563ffffffff6111d216565b905060006112b18a83612765565b6000806122e46122d76122ca868a63ffffffff61111916565b8a9063ffffffff610b9916565b8a9063ffffffff61111916565b905060006122fb6122d78b8763ffffffff6111d216565b90506000612312612247848463ffffffff610c1716565b9050600061232b82610852886101000151610565610b85565b90506000612340896107848a61085286611bb0565b9d9c50505050505050505050505050565b600080612364848663ffffffff610c1716565b9050600061239261238086610852876101000151610565610b85565b6101008601519063ffffffff6111d216565b905060006123b66123ae88610852886101000151610565610b85565b610d78610b85565b905060006123ca838363ffffffff610c1716565b90508084126123d95780612340565b50919b9a5050505050505050505050565b6000806123fd848663ffffffff610b9916565b9050600061240d6001600a610b66565b9050600061243d61243061242388610565610b85565b879063ffffffff6111d216565b839063ffffffff61111916565b90507f34ae76bc42b30cb0f8b76bfddc91a95efe45ed0b3c7419efccce432de252a8228382604051612470929190612b16565b60405180910390a190911395945050505050565b6000806124968784610100015161277c565b905060006124c86124b286610852876101000151610565610b85565b610100860151610d78908563ffffffff61111916565b905060006124f56124e88a6108528a6108528a6101000151610565610b85565b849063ffffffff6111d216565b9050600061250d826107848c8663ffffffff61111916565b905088811261251c578861251e565b805b94505050509550959350505050565b600080600080600061253f8b8b6127b9565b905060006125528288610100015161277c565b905060006125766125698c8563ffffffff61111916565b8b9063ffffffff610b9916565b905080821361259b57828c8361258b8f6127ff565b96509650965096505050506125a8565b508b955090935086925090505b9650965096509692505050565b6000806125fe6125db6125ce898b63ffffffff610b9916565b859063ffffffff61111916565b610d786125ee898b63ffffffff61111916565b610565898d63ffffffff61111916565b905060006126356126256126188a8c63ffffffff610b9916565b879063ffffffff61111916565b610d78888a63ffffffff610b9916565b90506000612649838363ffffffff610c1716565b90508981136126585789610d3e565b9998505050505050505050565b612671605f6064610b66565b81121561040a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90613210565b60008082136126d1576f7fffffffffffffffffffffffffffffff8260000316600003610666565b506f7fffffffffffffffffffffffffffffff1690565b600080821215612723576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90612d49565b610666826f800000000000000000000000000000006112f5565b6000610666826f800000000000000000000000000000006112f5565b60006106668283611119565b6000818313156127755781610b5f565b5090919050565b60008061278e610d2384610565610b85565b9050600061279b856114c6565b90506127b0610d04838363ffffffff61111916565b95945050505050565b6000610b5f6127c8600a61273d565b6107846127e56127d8600661273d565b869063ffffffff61111916565b610d786127f2600461273d565b889063ffffffff61111916565b600080612812838063ffffffff61111916565b90506000612826848363ffffffff61111916565b9050600061283a828063ffffffff61111916565b9050600061284e828063ffffffff61111916565b90506000612862828063ffffffff61111916565b90506000612876828063ffffffff61111916565b9050600061288a828863ffffffff61111916565b90506000610d3e828063ffffffff61111916565b604051806101a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c1157600080fd5b600060208284031215612969578081fd5b610b5f8383612934565b60008060408385031215612985578081fd5b61298f8484612934565b915061299e8460208501612934565b90509250929050565b6000806000606084860312156129bb578081fd5b83356129c6816132c6565b925060208401356129d6816132c6565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b918252602082015260400190565b60408082526011908201527f64656c74612061667465722073746570300000000000000000000000000000006060820152602081019190915260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f20736d616c6c00000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526017908201527f496e76616c696420746f6b656e20616464726573736573000000000000000000604082015260600190565b6040808252600b908201527f66696e616c2070726963650000000000000000000000000000000000000000006060820152602081019190915260800190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526013908201527f6c6e3a2076616c756520746f6f206c6172676500000000000000000000000000604082015260600190565b6020808252601a908201527f547269656420746f20707572636861736520746f6f206d756368000000000000604082015260600190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f6578703a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b6040808252600f908201527f79682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f796c2061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203200000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b60208082526022908201527f64656c7461422069732067726561746572206f7220657175616c20746f207a6560408201527f726f000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6040808252600f908201527f726c2061667465722073746570203500000000000000000000000000000000006060820152602081019190915260800190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b6040808252600f908201527f726c2061667465722073746570203100000000000000000000000000000000006060820152602081019190915260800190565b6040808252600f908201527f72682061667465722073746570203300000000000000000000000000000000006060820152602081019190915260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526013908201527f70726963652063616e6e6f74206265203c203000000000000000000000000000604082015260600190565b6020808252600f908201527f4f7264657220746f6f206c617267650000000000000000000000000000000000604082015260600190565b60208082526014908201527f70726963652063616e6e6f74206265207a65726f000000000000000000000000604082015260600190565b6040808252600f908201527f796c2061667465722073746570203400000000000000000000000000000000006060820152602081019190915260800190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461040a57600080fdfea365627a7a7231582099a143c90d1ce3bb11590fe0206c63c63c15dab7843451805aa7d1eaa6b8e6956c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFD46EB5 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xDF791E50 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE0 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7B689036 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x81 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x2973 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x89 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x29E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A9E JUMP JUMPDEST PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x29A7 JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x32BD JUMP JUMPDEST PUSH2 0x7F PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x2958 JUMP JUMPDEST PUSH2 0x33A JUMP JUMPDEST PUSH2 0xFB PUSH2 0x40D JUMP JUMPDEST PUSH2 0x105 DUP3 DUP3 PUSH2 0x460 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x18C PUSH2 0x5B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1FC JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 PUSH2 0x217 DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0xAAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F3 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x298 JUMPI POP DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 PUSH2 0x2AD DUP7 DUP7 PUSH2 0x211 DUP8 PUSH2 0x659 JUMP JUMPDEST SWAP1 POP PUSH2 0x222 DUP2 PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x256DB8090FA51C3BAC981768637D5A7C46B5540644DCEF89052B89DBB2F6C8EA CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x32A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x40D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2F36 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x401 SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x45E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2B9A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2BD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x524 PUSH1 0x63 PUSH1 0x64 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x539 SWAP1 PUSH1 0x64 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x549 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x571 PUSH2 0x55D PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x582 PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xB66 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x289E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 SLOAD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x9 SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x180 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0xC02 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x6D4 JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x6F3 JUMPI POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH2 0x793 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP6 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2B8 JUMPI DUP6 PUSH1 0x80 ADD MLOAD SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x790 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x7A6 DUP6 DUP6 DUP6 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0xC96 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B8 DUP7 DUP7 DUP5 DUP8 DUP14 DUP14 PUSH2 0xD4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x31D9 JUMP JUMPDEST DUP1 PUSH2 0x82C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85E PUSH2 0x842 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x852 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SUB SWAP2 POP DUP2 SLT PUSH2 0x89D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2ED9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AD PUSH1 0x1 PUSH3 0x186A0 PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8C0 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SGT PUSH2 0x8EB JUMPI PUSH2 0x8D5 DUP2 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x8E6 JUMPI PUSH1 0x0 PUSH2 0x8E8 JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x8F9 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xB66 JUMP JUMPDEST DUP3 ADD SWAP2 POP PUSH1 0x0 DUP3 SLT PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2D12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x957 DUP12 PUSH2 0x140 ADD MLOAD PUSH2 0x94A PUSH2 0x11DE JUMP JUMPDEST DUP14 PUSH2 0x160 ADD MLOAD DUP9 DUP12 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0x180 DUP13 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x970 SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP2 SGT ISZERO PUSH2 0x994 JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x98D SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x9CD JUMP JUMPDEST DUP7 PUSH2 0x9AD DUP13 PUSH2 0x180 ADD MLOAD DUP4 PUSH2 0x1119 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SLT ISZERO PUSH2 0x9CD JUMPI PUSH2 0x180 DUP12 ADD MLOAD PUSH2 0x9CA SWAP1 DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x9D5 PUSH2 0x11DE JUMP JUMPDEST PUSH2 0x140 DUP13 ADD MSTORE DUP6 ISZERO PUSH2 0xA17 JUMPI PUSH2 0x9F1 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA06 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xC0 DUP12 ADD DUP2 SWAP1 MSTORE PUSH2 0xA53 JUMP JUMPDEST PUSH2 0xA27 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0xA3C DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH1 0x80 DUP13 ADD MSTORE PUSH2 0xA4D DUP2 PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0xC0 DUP13 ADD MSTORE JUMPDEST PUSH2 0xA5C DUP12 PUSH2 0x12C3 JUMP JUMPDEST PUSH32 0x666804E599B015EDCFB9DE12153BF8A48AA5A84B8861B8FA88C1CF4B11974C15 CALLER DUP14 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA8F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x6 PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH1 0x12 PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2C7E JUMP JUMPDEST PUSH2 0xB5F PUSH2 0xB59 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST DUP4 PUSH2 0x136B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F PUSH2 0xB59 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3059 JUMP JUMPDEST PUSH2 0xB5F DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x143A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP4 DUP4 PUSH1 0xA EXP PUSH2 0xAC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC23 DUP5 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xC73 JUMPI PUSH2 0xC6B PUSH2 0xC37 DUP6 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 PUSH2 0xC65 DUP8 PUSH2 0xC60 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC5B DUP12 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0x136B JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST DUP7 PUSH2 0x136B JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC11 JUMP JUMPDEST PUSH2 0xC6B PUSH2 0xC90 DUP6 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST DUP5 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCA9 DUP5 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCBD DUP7 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD1 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCE1 DUP7 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCED PUSH2 0xB85 JUMP JUMPDEST DUP5 SLT ISZERO PUSH2 0xD10 JUMPI PUSH2 0xD09 PUSH2 0xD04 DUP4 PUSH2 0x852 DUP8 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x1BB0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD2E JUMP JUMPDEST PUSH2 0xD2B PUSH2 0xD23 PUSH2 0xD04 DUP5 PUSH2 0x852 DUP8 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xD3E DUP2 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDA1 PUSH2 0xD94 PUSH2 0xD84 PUSH2 0xD68 DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST PUSH2 0x784 DUP10 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDC5 PUSH2 0xDB8 DUP11 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD7 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x21BE JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE08 SWAP2 SWAP1 PUSH2 0x2B24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE21 DUP12 DUP12 DUP12 DUP12 DUP12 DUP8 DUP13 PUSH2 0x22B1 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE52 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0xE6C DUP13 DUP13 DUP13 DUP13 DUP13 DUP11 DUP11 DUP15 PUSH2 0x2351 JUMP JUMPDEST SWAP1 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xE9D SWAP2 SWAP1 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xEB5 DUP3 DUP3 DUP10 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10AA JUMPI PUSH1 0x0 PUSH2 0xEC9 DUP4 DUP4 DUP9 DUP9 DUP13 PUSH2 0x2484 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xEFE SWAP1 DUP5 SWAP1 PUSH2 0x312C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xF4D DUP4 DUP4 DUP11 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10A8 JUMPI PUSH1 0x0 PUSH2 0xF62 DUP5 DUP5 DUP10 DUP10 DUP7 DUP15 PUSH2 0x252D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 SWAP1 PUSH2 0xF9C SWAP1 DUP7 SWAP1 PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFD3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x100A SWAP2 SWAP1 PUSH2 0x327E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1041 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1059 DUP5 DUP5 DUP12 PUSH2 0x120 ADD MLOAD PUSH2 0x23EA JUMP JUMPDEST ISZERO PUSH2 0x10A6 JUMPI PUSH2 0x106C DUP5 DUP5 DUP5 DUP5 DUP12 DUP12 PUSH2 0x25B5 JUMP JUMPDEST SWAP4 POP PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMPDEST POP JUMPDEST PUSH2 0x10B3 DUP3 PUSH2 0x2665 JUMP JUMPDEST PUSH32 0xEAB289761059C96752AF5F89D5FAE009FAD63B60A50A884C5CE5936384B16EE6 PUSH2 0x10E4 DUP4 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F1 SWAP2 SWAP1 PUSH2 0x2C3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1109 DUP3 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1145 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC60 PUSH2 0x113C DUP8 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 DUP8 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x115E PUSH2 0x1155 DUP7 PUSH2 0x26AA JUMP JUMPDEST PUSH2 0xC60 DUP7 PUSH2 0x14B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1177 PUSH2 0x116E DUP8 PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0xC60 DUP8 PUSH2 0x26AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11A9 PUSH2 0x1193 PUSH2 0x118A DUP10 PUSH2 0x26AA JUMP JUMPDEST PUSH2 0xC60 DUP10 PUSH2 0x26AA JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0x136B JUMP JUMPDEST SWAP1 POP PUSH2 0x11C7 PUSH2 0x11C1 PUSH2 0x11BB DUP7 DUP7 PUSH2 0x143A JUMP JUMPDEST DUP5 PUSH2 0x143A JUMP JUMPDEST DUP3 PUSH2 0x143A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP4 DUP4 PUSH2 0x143A JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11F0 DUP8 DUP8 SUB PUSH2 0x26E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1210 PUSH2 0xD04 PUSH2 0x1203 DUP9 PUSH2 0x14C6 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1220 DUP3 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1234 DUP8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1248 DUP8 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1274 PUSH2 0x125F DUP6 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x126F DUP8 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x11D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x128C DUP3 PUSH2 0x784 DUP13 DUP13 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 PUSH2 0x129D PUSH1 0x2 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x784 DUP5 PUSH2 0xD78 DUP10 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH2 0x140 ADD MLOAD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F DUP3 PUSH1 0xA EXP DUP5 MUL PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1302 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x130F JUMPI POP PUSH1 0x0 PUSH2 0xC11 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x131D JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x1334 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1330 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0xC11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2FAC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x13A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x316B JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x13F2 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x1429 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x31A2 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1432 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x144D JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x1458 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x1479 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x146E JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x1479 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0xC11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3022 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x1512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x154C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2B63 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x156C JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x159F JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x15FE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x165C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x16BE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x1722 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x1786 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x17EA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x184E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x18B2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x1916 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x198C JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x19BD JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x19DD JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x1A0E JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A2E JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x1A5F JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1A7F JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x1AB0 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1AD0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x1B01 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B21 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x1B52 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x1B72 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x1BA3 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x1BE2 JUMPI POP PUSH1 0x0 PUSH2 0x669 JUMP JUMPDEST DUP2 PUSH2 0x1BFE JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2DA6 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CA5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CD2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1CFE JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D2A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D56 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1D81 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DAC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1DD6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E00 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E2A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E53 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1E7C JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EA4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1ECC JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1EF3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F1A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x1F40 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FAF JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x1FF1 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2033 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2075 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20B7 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x20F7 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2137 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x2177 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x21B7 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21CB PUSH1 0x2 PUSH2 0x273D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x220A PUSH2 0x21EA DUP10 DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x1119 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x565 DUP10 PUSH2 0x852 DUP14 PUSH2 0x852 DUP11 PUSH2 0x100 ADD MLOAD DUP10 PUSH2 0xB99 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2230 PUSH2 0x2227 DUP11 PUSH2 0x852 DUP14 PUSH2 0x852 DUP14 PUSH2 0x852 PUSH1 0x4 PUSH2 0x273D JUMP JUMPDEST PUSH2 0xD78 DUP5 PUSH2 0x2759 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x224C DUP5 PUSH2 0x784 PUSH2 0x2247 DUP6 PUSH2 0x784 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x14C6 JUMP JUMPDEST PUSH1 0x0 SUB SWAP1 POP PUSH1 0x0 DUP1 DUP3 SGT ISZERO PUSH2 0x226F JUMPI PUSH2 0x226A PUSH2 0xD23 DUP4 PUSH1 0x0 SUB PUSH2 0x1BB0 JUMP JUMPDEST PUSH2 0x2278 JUMP JUMPDEST PUSH2 0x2278 DUP3 PUSH2 0x1BB0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22A3 PUSH2 0x228F DUP8 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x784 PUSH1 0x0 DUP9 SWAP1 SUB DUP6 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 DUP11 DUP4 PUSH2 0x2765 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22E4 PUSH2 0x22D7 PUSH2 0x22CA DUP7 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP11 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22FB PUSH2 0x22D7 DUP12 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2312 PUSH2 0x2247 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x232B DUP3 PUSH2 0x852 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2340 DUP10 PUSH2 0x784 DUP11 PUSH2 0x852 DUP7 PUSH2 0x1BB0 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2364 DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2392 PUSH2 0x2380 DUP7 PUSH2 0x852 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23B6 PUSH2 0x23AE DUP9 PUSH2 0x852 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0xD78 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23CA DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP5 SLT PUSH2 0x23D9 JUMPI DUP1 PUSH2 0x2340 JUMP JUMPDEST POP SWAP2 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23FD DUP5 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x240D PUSH1 0x1 PUSH1 0xA PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x243D PUSH2 0x2430 PUSH2 0x2423 DUP9 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH32 0x34AE76BC42B30CB0F8B76BFDDC91A95EFE45ED0B3C7419EFCCCE432DE252A822 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2470 SWAP3 SWAP2 SWAP1 PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 SWAP2 SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2496 DUP8 DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x277C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24C8 PUSH2 0x24B2 DUP7 PUSH2 0x852 DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xD78 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24F5 PUSH2 0x24E8 DUP11 PUSH2 0x852 DUP11 PUSH2 0x852 DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x11D2 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x250D DUP3 PUSH2 0x784 DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP DUP9 DUP2 SLT PUSH2 0x251C JUMPI DUP9 PUSH2 0x251E JUMP JUMPDEST DUP1 JUMPDEST SWAP5 POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x253F DUP12 DUP12 PUSH2 0x27B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2552 DUP3 DUP9 PUSH2 0x100 ADD MLOAD PUSH2 0x277C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2576 PUSH2 0x2569 DUP13 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST DUP12 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SGT PUSH2 0x259B JUMPI DUP3 DUP13 DUP4 PUSH2 0x258B DUP16 PUSH2 0x27FF JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x25A8 JUMP JUMPDEST POP DUP12 SWAP6 POP SWAP1 SWAP4 POP DUP7 SWAP3 POP SWAP1 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25FE PUSH2 0x25DB PUSH2 0x25CE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP6 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 PUSH2 0x25EE DUP10 DUP12 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0x565 DUP10 DUP14 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2635 PUSH2 0x2625 PUSH2 0x2618 DUP11 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST DUP8 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 DUP9 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xB99 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2649 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xC17 AND JUMP JUMPDEST SWAP1 POP DUP10 DUP2 SGT PUSH2 0x2658 JUMPI DUP10 PUSH2 0xD3E JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2671 PUSH1 0x5F PUSH1 0x64 PUSH2 0xB66 JUMP JUMPDEST DUP2 SLT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x3210 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0x26D1 JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x666 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2723 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EA SWAP1 PUSH2 0x2D49 JUMP JUMPDEST PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x666 DUP3 DUP4 PUSH2 0x1119 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x2775 JUMPI DUP2 PUSH2 0xB5F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278E PUSH2 0xD23 DUP5 PUSH2 0x565 PUSH2 0xB85 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x279B DUP6 PUSH2 0x14C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x27B0 PUSH2 0xD04 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5F PUSH2 0x27C8 PUSH1 0xA PUSH2 0x273D JUMP JUMPDEST PUSH2 0x784 PUSH2 0x27E5 PUSH2 0x27D8 PUSH1 0x6 PUSH2 0x273D JUMP JUMPDEST DUP7 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH2 0xD78 PUSH2 0x27F2 PUSH1 0x4 PUSH2 0x273D JUMP JUMPDEST DUP9 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2812 DUP4 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2826 DUP5 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x283A DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x284E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2862 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2876 DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x288A DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD3E DUP3 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1119 AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2969 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB5F DUP4 DUP4 PUSH2 0x2934 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2985 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x298F DUP5 DUP5 PUSH2 0x2934 JUMP JUMPDEST SWAP2 POP PUSH2 0x299E DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2934 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x29BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x29C6 DUP2 PUSH2 0x32C6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x29D6 DUP2 PUSH2 0x32C6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461206166746572207374657030000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F20736D616C6C00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420746F6B656E20616464726573736573000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C207072696365000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6E3A2076616C756520746F6F206C6172676500000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x547269656420746F20707572636861736520746F6F206D756368000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x6578703A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7968206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020320000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x64656C7461422069732067726561746572206F7220657175616C20746F207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x726F000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020350000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x726C206166746572207374657020310000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x7268206166746572207374657020330000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265203C203000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x4F7264657220746F6F206C617267650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x70726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x796C206166746572207374657020340000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP10 LOG1 NUMBER 0xc9 0xd SHR 0xe3 0xbb GT MSIZE 0xf 0xe0 KECCAK256 PUSH13 0x63C63C15DAB7843451805AA7D1 0xea 0xa6 0xb8 0xe6 SWAP6 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "331:14849:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;331:14849:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;264:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;525:1593:4;;;;;;;;;:::i;:::-;;;;;;;;320:293:2;;;;;;;;;:::i;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;525:1593:4:-;653:22;691:27;;:::i;:::-;721:18;:16;:18::i;:::-;691:48;;767:5;:14;;;754:27;;:9;:27;;;:56;;;;;796:5;:14;;;785:25;;:7;:25;;;754:56;750:726;;;826:26;855:139;878:9;905:7;930:27;950:6;930:19;:27::i;:::-;975:5;855;:139::i;:::-;826:168;;1025:43;1048:19;1025:22;:43::i;:::-;1008:60;;750:726;;;;1101:5;:14;;;1088:27;;:9;:27;;;:56;;;;;1130:5;:14;;;1119:25;;:7;:25;;;1088:56;1085:391;;;1160:26;1189:139;1212:9;1239:7;1264:27;1284:6;1264:19;:27::i;1189:139::-;1160:168;;1359:42;1381:19;1359:21;:42::i;1085:391::-;1432:33;;;;;;;;;;;;;;;;;;;1085:391;1941:138;1967:10;1991:9;2014:7;2035:6;2055:14;1941:138;;;;;;;;;;;;;;;;;;;-1:-1:-1;525:1593:4;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;412:195;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;446:148::-;508:27;;:::i;:::-;-1:-1:-1;551:14:3;;;;;;;;559:6;551:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446:148;:::o;182:177:11:-;265:18;306:46;331:6;125:2;306:24;:46::i;:::-;299:53;;182:177;;;;:::o;2124:3404:4:-;2488:14;;;;2291:21;;;;;;;;;;2475:27;;;;;;;:56;;;;;2517:5;:14;;;2506:25;;:7;:25;;;2475:56;2471:433;;;-1:-1:-1;;;;2551:7:4;;;;2576;;;;2605:11;;;;2640:4;2471:433;;;2677:5;:14;;;2664:27;;:9;:27;;;:56;;;;;2706:5;:14;;;2695:25;;:7;:25;;;2664:56;2661:243;;;2740:5;:7;;;2736:11;;2765:5;:7;;;2761:11;;2794:35;2817:5;:11;;;2794:18;:16;:18::i;:::-;:22;:35;:22;:35;:::i;:::-;2786:43;;2661:243;3003:9;3015:125;3067:1;3082;3097:5;3116;:14;;;3015:38;:125::i;:::-;3003:137;;3170:12;3185:122;3207:1;3222;3237:2;3253:5;3272:6;3292:5;3185:8;:122::i;:::-;3170:137;;3523:1;3515:5;:9;3511:147;;;3541:29;;;;;;;;;;;3511:147;3591:10;3587:71;;3617:30;;;;;;;;;;;3587:71;3707:13;3723:112;3788:33;3811:5;:9;;;3788:18;:16;:18::i;:33::-;3723:30;:6;3747:5;3723:30;:23;:30;:::i;:::-;:47;:112;:47;:112;:::i;:::-;3854:7;;;;;-1:-1:-1;3876:11:4;;3872:86;;3903:44;;;;;;;;;;;3872:86;3990:14;4007:47;4035:1;4046:6;4007:20;:47::i;:::-;3990:64;-1:-1:-1;3990:64:4;4068:13;:1;4074:6;4068:13;:5;:13;:::i;:::-;:24;4064:126;;4117:14;:7;4129:1;4117:14;:11;:14;:::i;:::-;4108:23;;4164:1;4155:6;:10;4154:25;;4178:1;4154:25;;;4169:6;4154:25;4145:34;;4064:126;4332:46;4360:1;4371:5;4332:20;:46::i;:::-;4322:56;;;;4403:1;4393:6;:11;4389:78;;4420:36;;;;;;;;;;;4389:78;4518:15;4536:155;4577:5;:7;;;4598:24;:22;:24::i;:::-;4636:5;:10;;;4660:2;4676:5;4536:27;:155::i;:::-;4717:14;;;;4518:173;;-1:-1:-1;4717:25:4;;4736:5;4717:25;:18;:25;:::i;:::-;4706:8;:36;4702:211;;;4769:14;;;;:25;;4788:5;4769:25;:18;:25;:::i;:::-;4758:36;;4702:211;;;4845:5;4814:28;4827:5;:14;;;4814:8;:12;;:28;;;;:::i;:::-;:36;4811:102;;;4887:14;;;;4877:25;;:5;;:25;:9;:25;:::i;:::-;4866:36;;4811:102;4957:24;:22;:24::i;:::-;4947:7;;;:34;4991:285;;;;5028:13;:1;5034:6;5028:13;:5;:13;:::i;:::-;5018:7;;;:23;5065:13;:1;5071:6;5065:13;:5;:13;:::i;:::-;5055:7;;;:23;5092:11;;;:22;;;4991:285;;;5155:13;:1;5161:6;5155:13;:5;:13;:::i;:::-;5145:7;;;:23;5192:13;:1;5198:6;5192:13;:5;:13;:::i;:::-;5182:7;;;:23;5233:32;5256:8;5233:18;:16;:18::i;:32::-;5219:11;;;:46;4991:285;5310:23;5327:5;5310:16;:23::i;:::-;5349:106;5387:10;5415:6;5439;5349:106;;;;;;;;;;;;;;;;;-1:-1:-1;;5483:7:4;;;2124:3404;-1:-1:-1;;;;;;;;;;;2124:3404:4:o;737:183:11:-;822:19;864:49;891:6;174:1;864:26;:49::i;365:181::-;449:19;491:48;518:6;125:2;491:26;:48::i;7893:386:8:-;7955:8;7998:1;7986;7979:21;7975:116;;;8016:64;;;;;;;;;;;7975:116;8123:1;8111;8104:21;8100:118;;;8141:66;;;;;;;;;;;8100:118;8231:41;8236:24;8248:1;889:66;8236:4;:24::i;:::-;8269:1;8231:4;:41::i;:::-;8227:45;7893:386;-1:-1:-1;;;7893:386:8:o;7269:116::-;7329:8;7353:25;7358:16;7363:1;889:66;7358:4;:16::i;1830:76::-;889:66;;1830:76::o;2395:186::-;2451:8;1023:66;2475:1;:18;2471:79;;;2509:30;;;;;;;;;;;2471:79;2563:11;2568:1;2572;2571:2;;2563:4;:11::i;3998:195:10:-;4102:18;4143:43;4164:6;4176:9;4172:2;:13;4143:20;:43::i;3998:195::-;;;;;:::o;4502:624:8:-;4558:8;4578:15;4596:12;4606:1;4596:9;:12::i;:::-;4578:30;-1:-1:-1;4622:13:8;;4618:179;;4658:65;4663:12;4673:1;4663:9;:12::i;:::-;4677:45;4682:36;4687:1;4690:27;889:66;4704:12;4714:1;4704:9;:12::i;:::-;4690:4;:27::i;:::-;4682:4;:36::i;:::-;4720:1;4677:4;:45::i;4658:65::-;4651:72;;;;;4618:179;4761:25;4766:16;4771:1;889:66;4766:4;:16::i;:::-;4784:1;4761:4;:25::i;367:814:10:-;526:13;;567:12;:5;577:1;567:12;:9;:12;:::i;:::-;555:24;-1:-1:-1;589:10:10;602:12;:1;555:24;602:12;:5;:12;:::i;:::-;589:25;-1:-1:-1;624:10:10;637:12;:5;647:1;637:12;:9;:12;:::i;:::-;624:25;;659:9;671:32;694:8;671:18;:16;:18::i;:32::-;659:44;;713:12;748:18;:16;:18::i;:::-;739:6;:27;735:215;;;790:28;:22;806:5;790:11;:6;:9;:11::i;:22::-;:26;:28::i;:::-;782:36;;735:215;;;857:82;897:28;:22;913:5;897:11;:6;:9;:11::i;:28::-;857:18;:16;:18::i;:82::-;849:90;;735:215;968:16;:5;978;968:16;:9;:16;:::i;:::-;959:25;367:814;-1:-1:-1;;;;;;;;;;367:814:10:o;11595:2541:4:-;11790:6;;11898:102;11917:73;11962:27;11975:13;:1;11981:6;11975:13;:5;:13;:::i;:::-;11962:8;:1;11968;11962:8;:5;:8;:::i;:::-;:12;:27;:12;:27;:::i;:::-;11917;:2;11937:6;11917:27;:19;:27;:::i;:73::-;11898:1;;:102;:5;:102;:::i;:::-;11886:114;-1:-1:-1;12010:10:4;12023:42;12042:13;:1;12048:6;12042:13;:5;:13;:::i;:::-;12023:1;;:42;:5;:42;:::i;:::-;12010:55;;12118:12;12133:127;12160:1;12175;12190:2;12206:5;12225:6;12245:5;12133:13;:127::i;:::-;12118:142;;12276:33;12303:5;12276:33;;;;;;;;;;;;;;;12320:9;12332:146;12359:1;12374;12389:2;12405:5;12424:6;12444:5;12463;12332:13;:146::i;:::-;12320:158;;12494:28;12519:2;12494:28;;;;;;;;;;;;;;;12533:9;12545:160;12572:1;12587;12602:2;12618:5;12637:6;12657:2;12673:3;12690:5;12545:13;:160::i;:::-;12533:172;;12721:28;12746:2;12721:28;;;;;;;;;;;;;;;12765:42;12789:2;12793;12797:5;:9;;;12765:23;:42::i;:::-;12761:1229;;;12823:9;12857:131;12888:2;12908;12928;12948:3;12969:5;12857:13;:131::i;:::-;13007:28;;12846:142;;-1:-1:-1;12846:142:4;-1:-1:-1;13007:28:4;;;;12846:142;;13007:28;;;;;;;;;;13054;13079:2;13054:28;;;;;;;;;;;;;;;13101:42;13125:2;13129;13133:5;:9;;;13101:23;:42::i;:::-;13097:883;;;13163:9;13209:179;13244:2;13268;13292;13316:3;13341:2;13365:5;13209:13;:179::i;:::-;13412:28;;13190:198;;-1:-1:-1;13190:198:4;;-1:-1:-1;13190:198:4;-1:-1:-1;13190:198:4;-1:-1:-1;13412:28:4;;;;13190:198;;13412:28;;;;;;;;;;13463;13488:2;13463:28;;;;;;;;;;;;;;;13514;13539:2;13514:28;;;;;;;;;;;;;;;13565;13590:2;13565:28;;;;;;;;;;;;;;;13616:42;13640:2;13644;13648:5;:9;;;13616:23;:42::i;:::-;13612:354;;;13687:204;13726:2;13754;13782;13810;13838;13866:3;13687:13;:204::i;:::-;13682:209;;13919:28;13944:2;13919:28;;;;;;;;;;;;;;;13612:354;13097:883;;12761:1229;;14018:17;14032:2;14018:13;:17::i;:::-;14051:32;14072:10;:2;14079;14072:10;:6;:10;:::i;:::-;14051:32;;;;;;;;;;;;;;;14119:10;:2;14126;14119:10;:6;:10;:::i;:::-;14112:17;11595:2541;-1:-1:-1;;;;;;;;;;;;11595:2541:4:o;2678:772:8:-;2734:8;2755:18;2776:47;889:66;2790:32;2795:12;2805:1;2795:9;:12::i;:::-;2809;2819:1;2809:9;:12::i;2776:47::-;2755:68;;2911:20;2934:33;2939:13;2950:1;2939:10;:13::i;:::-;2954:12;2964:1;2954:9;:12::i;2934:33::-;2911:56;;2977:20;3000:33;3005:12;3015:1;3005:9;:12::i;:::-;3019:13;3030:1;3019:10;:13::i;3000:33::-;2977:56;;3043:23;3069:49;3074:34;3079:13;3090:1;3079:10;:13::i;:::-;3094;3105:1;3094:10;:13::i;3074:34::-;889:66;3069:4;:49::i;:::-;3043:75;;3136:77;3141:53;3146:32;3151:11;3164:13;3146:4;:32::i;:::-;3180:13;3141:4;:53::i;:::-;3196:16;3136:4;:77::i;:::-;3129:84;2678:772;-1:-1:-1;;;;;;;2678:772:8:o;2207:97::-;2263:8;2287:10;2292:1;2295;2287:4;:10::i;15061:117:4:-;15159:12;15061:117;:::o;1187:785:10:-;1355:6;1377:13;1393:30;1421:1;1414:4;:8;1393:20;:30::i;:::-;1377:46;;1433:19;1455:27;:21;1466:9;:4;:7;:9::i;:::-;1455:6;;:21;:10;:21;:::i;:27::-;1433:49;;1492:24;1519:36;1542:12;1519:18;:16;:18::i;:36::-;1492:63;-1:-1:-1;1565:12:10;1580:25;:2;1492:63;1580:25;:6;:25;:::i;:::-;1565:40;-1:-1:-1;1615:12:10;1630:23;:5;1640:12;1630:23;:9;:23;:::i;:::-;1615:38;-1:-1:-1;1664:23:10;1690:102;1720:28;:17;1742:5;1720:28;:21;:28;:::i;:::-;1762:20;:12;1779:2;1762:20;:16;:20;:::i;:::-;1690:16;:102::i;:::-;1664:128;-1:-1:-1;1802:12:10;1817:35;1664:128;1817:13;:2;1824:5;1817:13;:6;:13;:::i;:35::-;1802:50;;1862:13;1878:64;1910:31;1938:1;1910:20;:31::i;:::-;1878:27;1899:5;1878:16;:5;1888;1878:16;:9;:16;:::i;:64::-;1862:80;1187:785;-1:-1:-1;;;;;;;;;;;;;;1187:785:10:o;600:203:3:-;697:7;;;;686:8;:18;725:7;;;;714:8;:18;757:11;;;;742:12;:26;789:7;;;778:8;:18;600:203::o;4199:207:10:-;4304:19;4354:44;4375:9;4371:2;:13;4355:6;:30;4354:42;:44::i;19626:245:8:-;19682:8;19706:6;;;:16;;-1:-1:-1;19716:6:8;;19706:16;19702:55;;;-1:-1:-1;19745:1:8;19738:8;;19702:55;-1:-1:-1;19770:5:8;;;19774:1;19770;:5;:1;19789:5;;;;;:10;;:24;;;;19812:1;19807;19803;:5;;;;;;:10;;19789:24;19785:80;;;19830:24;;;;;;;;;;;19958:260;20014:8;20038:6;20034:67;;20060:30;;;;;;;;;;;20034:67;1023:66;20114:1;:18;:29;;;;;20136:1;20141:2;20136:7;20114:29;20110:83;;;20158:24;;;;;;;;;;;20110:83;20210:1;20206;:5;;;;;;;19958:260;-1:-1:-1;;;19958:260:8:o;20278:210::-;20358:5;;;20334:8;20378:5;;:14;;;;;20391:1;20387;:5;20378:14;:23;;;;;20400:1;20396;:5;20378:23;20377:54;;;;20411:1;20407;:5;:14;;;;;20420:1;20416;:5;20407:14;:23;;;;;20429:1;20425;:5;20407:23;20373:109;;;20447:24;;;;;;;;;;;8342:97;889:66;8421:11;;;8342:97::o;8674:5160::-;8719:8;889:66;8743:1;:14;8739:74;;;8773:29;;;;;;;;;;;8739:74;8831:1;8826;:6;8822:66;;8848:29;;;;;;;;;;;8822:66;889;8901:1;:12;8897:51;;;-1:-1:-1;8936:1:8;8929:8;;8897:51;1368:66;8961:1;:15;8957:64;;-1:-1:-1;1548:75:8;8992:18;;8957:64;9031:8;9049;9067;9380:66;9368:1;:79;9364:316;;9463:79;;;;;9589:66;889;9568:11;;:88;9564:92;;9364:316;9724:66;9712:1;:79;9708:316;;9807:79;;;;;9933:66;889;9912:11;;:88;9908:92;;9708:316;10067:66;10055:1;:79;10051:314;;10150:79;;;;;10275:66;889;10254:11;;:88;10250:92;;10051:314;10408:66;10396:1;:79;10392:314;;10491:79;;;;;10616:66;889;10595:11;;:88;10591:92;;10392:314;10749:66;10737:1;:79;10733:314;;10832:79;;;;;10957:66;889;10936:11;;:88;10932:92;;10733:314;11090:66;11078:1;:79;11074:314;;11173:79;;;;;11298:66;11185;11277:11;;:88;11273:92;;11074:314;11433:66;11421:1;:79;11417:318;;11516:79;;;;;11643:66;889;11622:11;;:88;11618:92;;11417:318;11781:66;11769:1;:79;11765:320;;11864:79;;;;;11992:66;889;11971:11;;:88;11967:92;;11765:320;12132:66;12120:1;:79;12116:322;;12215:79;;;;;12344:66;889;12323:11;;:88;12319:92;;12116:322;12603:11;;;;-1:-1:-1;12603:11:8;;-1:-1:-1;889:66:8;12628:5;;;:15;;-1:-1:-1;12706:35:8;12663:39;;;12658:45;;:83;12653:88;;;;889:66;12751:1;12747;:5;:15;;;;;;12743:19;;12854:35;12849:1;12811:35;:39;12806:1;:45;:83;;;;;;12801:88;;;;889:66;12899:1;12895;:5;:15;;;;;;12891:19;;13002:35;12997:1;12959:35;:39;12954:1;:45;:83;;;;;;12949:88;;;;889:66;13047:1;13043;:5;:15;;;;;;13039:19;;13150:35;13145:1;13107:35;:39;13102:1;:45;:83;;;;;;13097:88;;;;889:66;13195:1;13191;:5;:15;;;;;;13187:19;;13298:35;13293:1;13255:35;:39;13250:1;:45;:83;;;;;;13245:88;;;;889:66;13343:1;13339;:5;:15;;;;;;13335:19;;13446:35;13441:1;13403:35;:39;13398:1;:45;:83;;;;;;13393:88;;;;889:66;13491:1;13487;:5;:15;;;;;;13483:19;;13594:35;13589:1;13551:35;:39;13546:1;:45;:83;;;;;;13541:88;;;;889:66;13639:1;13635;:5;:15;;;;;;13631:19;;13742:35;13737:1;13699:35;:39;13694:1;:45;:83;;;;;;13689:88;;;;8674:5160;;;;;;:::o;13931:5613::-;13977:8;1548:75;14001:15;;13997:105;;;-1:-1:-1;14090:1:8;14083:8;;13997:105;14115:6;14111:51;;-1:-1:-1;889:66:8;14137:14;;14111:51;1488:1;14175;:15;14171:77;;;14207:30;;;;;;;;;;;14171:77;889:66;14717;14713:70;;14797:5;;;:15;;;14823:18;14819:22;;14814:27;;;;;14713:70;;14881:5;;;:15;14877:19;;14903:1;14907:18;14903:22;14898:27;;;;889:66;14969:1;14965;:5;:15;;;;;;14961:19;;14987:1;14991:18;14987:22;14982:27;;;;889:66;15053:1;15049;:5;:15;;;;;;15045:19;;15071:1;15075:18;15071:22;15066:27;;;;889:66;15137:1;15133;:5;:15;;;;;;15129:19;;15155:1;15159:18;15155:22;15150:27;;;;889:66;15221:1;15217;:5;:15;;;;;;15213:19;;15239:1;15243:18;15239:22;15234:27;;;;889:66;15305:1;15301;:5;:15;;;;;;15297:19;;15323:1;15327:18;15323:22;15318:27;;;;889:66;15389:1;15385;:5;:15;;;;;;15381:19;;15407:1;15411:18;15407:22;15402:27;;;;889:66;15473:1;15469;:5;:15;;;;;;15465:19;;15491:1;15495:18;15491:22;15486:27;;;;889:66;15557:1;15553;:5;:15;;;;;;15549:19;;15575:1;15579:18;15575:22;15570:27;;;;889:66;15641:1;15637;:5;:15;;;;;;15633:19;;15659:1;15663:18;15659:22;15654:27;;;;889:66;15725:1;15721;:5;:15;;;;;;15717:19;;15743:1;15747:18;15743:22;15738:27;;;;889:66;15809:1;15805;:5;:15;;;;;;15801:19;;15827:1;15831:18;15827:22;15822:27;;;;889:66;15893:1;15889;:5;:15;;;;;;15885:19;;15911:1;15915:18;15911:22;15906:27;;;;889:66;15977:1;15973;:5;:15;;;;;;15969:19;;15995:1;15999:18;15995:22;15990:27;;;;889:66;16061:1;16057;:5;:15;;;;;;16053:19;;16079:1;16083:18;16079:22;16074:27;;;;889:66;16145:1;16141;:5;:15;;;;;;16137:19;;16163:1;16167:18;16163:22;16158:27;;;;889:66;16229:1;16225;:5;:15;;;;;;16221:19;;16247:1;16251:18;16247:22;16242:27;;;;889:66;16313:1;16309;:5;:15;;;;;16543:2;;;;;;16397:18;16309:15;;;16326:27;;;16393:22;:26;;889:66;16393:36;;16309:15;-1:-1:-1;16590:66:8;16579:78;;16578:85;16574:304;;16787:66;16694;16683:78;;:171;16679:175;;16574:304;16922:66;16911:78;;16910:85;16906:304;;17119:66;17026;17015:78;;:171;17011:175;;16906:304;17253:66;17242:78;;17241:85;17237:303;;17450:66;17357;17346:78;;:171;17342:175;;17237:303;17583:66;17572:78;;17571:85;17567:303;;17780:66;17687;17676:78;;:171;17672:175;;17567:303;17913:66;17902:78;;17901:85;17897:303;;18110:66;18017;18006:78;;:171;18002:175;;17897:303;18243:66;18232:78;;18231:85;18227:303;;18440:66;18347;18336:78;;:171;18332:175;;18227:303;18575:66;18564:78;;18563:85;18559:305;;18772:66;18679;18668:78;;:171;18664:175;;18559:305;18910:66;18899:78;;18898:85;18894:306;;19107:66;19014;19003:78;;:171;18999:175;;18894:306;19247:66;19236:78;;19235:85;19231:307;;19444:66;19351;19340:78;;:171;19336:175;;19231:307;13931:5613;;;;;:::o;5807:942:4:-;6007:6;6029:10;6042:31;6070:1;6042:20;:31::i;:::-;6029:44;;6083:10;6096:65;6139:21;6158:1;6139:5;:14;;;:18;;:21;;;;:::i;:::-;6096:38;6131:2;6096:30;6124:1;6096:23;6104:5;:14;;;6096:3;:7;;:23;;;;:::i;:65::-;6083:78;;6172:12;6187:132;6217:92;6307:1;6217:72;6287:1;6217:52;6266:2;6217:31;6245:1;6217:20;:31::i;:92::-;6187:12;:3;:10;:12::i;:132::-;6172:147;;6329:12;6346:82;6424:3;6346:60;:42;6382:5;6346:18;:16;:18::i;:42::-;:58;:60::i;:82::-;6344:85;;6329:100;;6441:12;6466:1;6457:5;:10;;6456:121;;6509:68;6549:14;6551:5;6550:6;;6549:12;:14::i;6509:68::-;6456:121;;;6483:11;:5;:9;:11::i;:::-;6441:136;-1:-1:-1;6588:12:4;6603:60;6651:11;:3;6659:2;6651:11;:7;:11;:::i;:::-;6603:30;6604:4;;;;6627:5;6603:30;:23;:30;:::i;:60::-;6588:75;;6674:12;6689:31;6706:6;6714:5;6689:16;:31::i;6755:544::-;6977:6;;7014:27;7020:20;7026:13;:5;7036:2;7026:13;:9;:13;:::i;:::-;7020:1;;:20;:5;:20;:::i;:::-;7014:1;;:27;:5;:27;:::i;:::-;6999:42;-1:-1:-1;7051:12:4;7066:19;7072:12;:1;7078:5;7072:12;:5;:12;:::i;7066:19::-;7051:34;-1:-1:-1;7098:12:4;7113:21;:16;:5;7051:34;7113:16;:9;:16;:::i;:21::-;7098:36;;7147:12;7162:49;7205:5;7162:38;7185:5;:14;;;7162:18;:16;:18::i;:49::-;7147:64;;7221:12;7236:34;7263:6;7236:22;7252:5;7236:11;:5;:9;:11::i;:34::-;7221:49;6755:544;-1:-1:-1;;;;;;;;;;;;;6755:544:4:o;7369:688::-;7608:6;;7645:11;:3;7653:2;7645:11;:7;:11;:::i;:::-;7630:26;;7666:12;7681:115;7713:73;7782:3;7713:51;7749:5;:14;;;7713:18;:16;:18::i;:73::-;7681:14;;;;;:115;:18;:115;:::i;:::-;7666:130;;7806:12;7821:118;7857:72;7926:2;7857:51;7893:5;:14;;;7857:18;:16;:18::i;:72::-;7821:18;:16;:18::i;:118::-;7806:133;-1:-1:-1;7949:12:4;7964:16;:5;7806:133;7964:16;:9;:16;:::i;:::-;7949:31;;8005:5;7997;:13;:53;;8045:5;7997:53;;;-1:-1:-1;8025:5:4;;7990:60;-1:-1:-1;;;;;;;;;;;7369:688:4:o;11015:442::-;11146:27;;11202:10;:2;11209;11202:10;:6;:10;:::i;:::-;11189:23;;11222:10;11235:43;11263:1;11274:2;11235:20;:43::i;:::-;11222:56;;11288:10;11301:96;11322:65;11347:26;11370:2;11347:18;:16;:18::i;:26::-;11322:3;;:65;:7;:65;:::i;:::-;11301:3;;:96;:7;:96;:::i;:::-;11288:109;;11413:10;11415:3;11419;11413:10;;;;;;;;;;;;;;;;11441:9;;;;11015:442;-1:-1:-1;;;;;11015:442:4:o;8357:755::-;8534:12;8548:9;8578:27;8586:2;8590:5;:14;;;8578:7;:27::i;:::-;8573:32;;8616:12;8631:152;8688:81;8765:3;8688:55;8728:5;:14;;;8688:18;:16;:18::i;:81::-;8631:14;;;;:22;;8650:2;8631:22;:18;:22;:::i;:152::-;8616:167;;8793:12;8808:156;8845:105;8947:2;8845:80;8922:2;8845:55;8885:5;:14;;;8845:18;:16;:18::i;:105::-;8808:2;;:156;:19;:156;:::i;:::-;8793:171;-1:-1:-1;8974:9:4;8986:24;8793:171;8986:13;:2;8993:5;8986:13;:6;:13;:::i;:24::-;8974:36;;9037:2;9029:5;:10;:47;;9074:2;9029:47;;;9054:5;9029:47;9021:55;-1:-1:-1;;;;8357:755:4;;;;;;;;:::o;9483:833::-;9692:12;9718;9744;9770;9831;9846:17;9856:2;9860;9846:9;:17::i;:::-;9831:32;;9873:11;9888:30;9896:5;9903;:14;;;9888:7;:30::i;:::-;9873:45;-1:-1:-1;9940:12:4;9955:22;9963:13;:2;9970:5;9963:13;:6;:13;:::i;:::-;9955:3;;:22;:7;:22;:::i;:::-;9940:37;;9999:5;9991:4;:13;9987:323;;10045:5;10068:2;10088:4;10110:39;10146:2;10110:35;:39::i;:::-;10020:143;;;;;;;;;;;;;9987:323;-1:-1:-1;10219:2:4;;-1:-1:-1;10239:5:4;;-1:-1:-1;10262:2:4;;-1:-1:-1;10282:4:4;-1:-1:-1;9483:833:4;;;;;;;;;;;;:::o;10322:490::-;10500:6;;10537:77;10594:19;10602:10;:2;10609;10602:10;:6;:10;:::i;:::-;10594:3;;:19;:7;:19;:::i;:::-;10537:39;10565:10;:2;10572;10565:10;:6;:10;:::i;:::-;10537;:2;10544;10537:10;:6;:10;:::i;:77::-;10522:92;-1:-1:-1;10624:12:4;10639:60;10680:18;10687:10;:2;10694;10687:10;:6;:10;:::i;:::-;10680:2;;:18;:6;:18;:::i;:::-;10639:23;:2;10659;10639:23;:19;:23;:::i;:60::-;10624:75;-1:-1:-1;10709:12:4;10724:16;:5;10624:75;10724:16;:9;:16;:::i;:::-;10709:31;;10766:2;10758:5;:10;:47;;10803:2;10758:47;;;10783:5;10751:54;-1:-1:-1;;;;;;;;;10322:490:4:o;10818:191::-;10906:45;10934:2;10946:3;10906:20;:45::i;:::-;10901:2;:50;10897:106;;;10967:25;;;;;;;;;;;8445:138:8;8498:8;8529:1;8525;:5;:51;;798:34;8558:1;8557:2;;:18;8555:21;;8525:51;;;-1:-1:-1;798:34:8;8534:17;;8445:138::o;7527:216::-;7578:8;7621:1;7609;7602:21;7598:101;;;7639:49;;;;;;;;;;;7598:101;7712:24;7724:1;889:66;7712:4;:24::i;7103:97::-;7153:8;7177:16;7182:1;889:66;7177:4;:16::i;2024:92::-;2073:8;2100:9;2104:1;2107;2100:3;:9::i;1912:106::-;1968:8;2001:1;1996;:6;;1995:16;;2010:1;1995:16;;;-1:-1:-1;2006:1:8;;1912:106;-1:-1:-1;1912:106:8:o;8063:288:4:-;8161:6;8183:12;8198:73;8234:27;8257:3;8234:18;:16;:18::i;8198:73::-;8183:88;;8281:12;8296:9;:4;:7;:9::i;:::-;8281:24;-1:-1:-1;8322:22:4;:16;:5;8281:24;8322:16;:9;:16;:::i;:22::-;8315:29;8063:288;-1:-1:-1;;;;;8063:288:4:o;9217:259::-;9292:6;9321:148;9436:32;9464:2;9436:20;:32::i;:::-;9321:97;9378:39;9385:31;9413:1;9385:20;:31::i;:::-;9378:2;;:39;:6;:39;:::i;:::-;9321;9328:31;9356:1;9328:20;:31::i;:::-;9321:2;;:39;:6;:39;:::i;2983:614:10:-;3077:6;;3120:14;3129:4;;3120:14;:8;:14;:::i;:::-;3099:35;-1:-1:-1;3144:16:10;3163:21;:4;3099:35;3163:21;:8;:21;:::i;:::-;3144:40;-1:-1:-1;3194:16:10;3213:24;3144:40;;3213:24;:13;:24;:::i;:::-;3194:43;-1:-1:-1;3247:19:10;3269:24;3194:43;;3269:24;:13;:24;:::i;:::-;3247:46;-1:-1:-1;3303:23:10;3329:30;3247:46;;3329:30;:16;:30;:::i;:::-;3303:56;-1:-1:-1;3369:24:10;3396:38;3303:56;;3396:38;:20;:38;:::i;:::-;3369:65;-1:-1:-1;3444:18:10;3465:34;3369:65;3487:11;3465:34;:21;:34;:::i;:::-;3444:55;-1:-1:-1;3509:20:10;3532:28;3444:55;;3532:28;:15;:28;:::i;331:14849:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;32276:42;32265:54;;32848:35;;32838:2;;32897:1;;32887:12;279:241;;383:2;371:9;362:7;358:23;354:32;351:2;;;-1:-1;;389:12;351:2;451:53;496:7;472:22;451:53;;527:366;;;648:2;636:9;627:7;623:23;619:32;616:2;;;-1:-1;;654:12;616:2;716:53;761:7;737:22;716:53;;;706:63;;824:53;869:7;806:2;849:9;845:22;824:53;;;814:63;;610:283;;;;;;900:491;;;;1038:2;1026:9;1017:7;1013:23;1009:32;1006:2;;;-1:-1;;1044:12;1006:2;85:6;72:20;97:33;124:5;97:33;;;1096:63;-1:-1;1196:2;1235:22;;72:20;97:33;72:20;97:33;;;1000:391;;1204:63;;-1:-1;;;1304:2;1343:22;;;;209:20;;1000:391;13982:213;32276:42;32265:54;;;;1618:37;;14100:2;14085:18;;14071:124;14202:340;32276:42;32265:54;;;1477:58;;32265:54;;14528:2;14513:18;;1618:37;14356:2;14341:18;;14327:215;14549:675;32276:42;32265:54;;;1477:58;;32265:54;;;14960:2;14945:18;;1618:37;32265:54;;;;15043:2;15028:18;;1618:37;15126:2;15111:18;;1847:36;;;;15209:3;15194:19;;1847:36;;;;14787:3;14772:19;;14758:466;15231:443;32276:42;32265:54;;;;1477:58;;15579:2;15564:18;;1847:36;;;;15660:2;15645:18;;1847:36;15409:2;15394:18;;15380:294;15681:1521;32099:13;;32092:21;1732:34;;32276:42;32265:54;;;16277:2;16262:18;;1618:37;32265:54;;;;16360:2;16345:18;;1618:37;16441:2;16426:18;;1847:36;;;;16522:3;16507:19;;1847:36;;;;16606:3;16591:19;;1847:36;;;;16688:3;16673:19;;1847:36;;;;16772:3;16757:19;;1847:36;16854:3;16839:19;;1847:36;16936:3;16921:19;;1847:36;17021:3;17006:19;;1847:36;17104:3;17089:19;;1847:36;;;;17187:3;17172:19;;1847:36;16118:3;16103:19;;16089:1113;17209:316;1847:36;;;17511:2;17496:18;;1847:36;17351:2;17336:18;;17322:203;17532:514;17749:2;17763:47;;;2120:2;17734:18;;;31867:19;2156:66;31907:14;;;2136:87;31916:4;18017:18;;1847:36;;;;2242:12;;;17720:326;18053:407;18244:2;18258:47;;;2493:2;18229:18;;;31867:19;2529:66;31907:14;;;2509:87;2615:12;;;18215:245;18467:407;18658:2;18672:47;;;2866:2;18643:18;;;31867:19;2902:66;31907:14;;;2882:87;2988:12;;;18629:245;18881:407;19072:2;19086:47;;;3239:2;19057:18;;;31867:19;3275:66;31907:14;;;3255:87;3361:12;;;19043:245;19295:407;19486:2;19500:47;;;3612:2;19471:18;;;31867:19;3648:66;31907:14;;;3628:87;3734:12;;;19457:245;19709:514;19926:2;19940:47;;;3985:2;19911:18;;;31867:19;4021:66;31907:14;;;4001:87;31916:4;20194:18;;1847:36;;;;4107:12;;;19897:326;20230:407;20421:2;20435:47;;;4358:2;20406:18;;;31867:19;4394:66;31907:14;;;4374:87;4495:66;4481:12;;;4474:88;4581:12;;;20392:245;20644:407;20835:2;20849:47;;;4832:2;20820:18;;;31867:19;4868:66;31907:14;;;4848:87;4954:12;;;20806:245;21058:407;21249:2;21263:47;;;5205:2;21234:18;;;31867:19;5241:66;31907:14;;;5221:87;5327:12;;;21220:245;21472:407;21663:2;21677:47;;;5578:2;21648:18;;;31867:19;5614:66;31907:14;;;5594:87;5715:66;5701:12;;;5694:88;5801:12;;;21634:245;21886:407;22077:2;22091:47;;;6052:2;22062:18;;;31867:19;6088:66;31907:14;;;6068:87;6174:12;;;22048:245;22300:514;22517:2;22531:47;;;6425:2;22502:18;;;31867:19;6461:66;31907:14;;;6441:87;31916:4;22785:18;;1847:36;;;;6547:12;;;22488:326;22821:514;23038:2;23052:47;;;6798:2;23023:18;;;31867:19;6834:66;31907:14;;;6814:87;31916:4;23306:18;;1847:36;;;;6920:12;;;23009:326;23342:514;23559:2;23573:47;;;7171:2;23544:18;;;31867:19;7207:66;31907:14;;;7187:87;31916:4;23827:18;;1847:36;;;;7293:12;;;23530:326;23863:514;24080:2;24094:47;;;7544:2;24065:18;;;31867:19;7580:66;31907:14;;;7560:87;31916:4;24348:18;;1847:36;;;;7666:12;;;24051:326;24384:407;24575:2;24589:47;;;7917:2;24560:18;;;31867:19;7953:66;31907:14;;;7933:87;8054:66;8040:12;;;8033:88;8140:12;;;24546:245;24798:407;24989:2;25003:47;;;8391:2;24974:18;;;31867:19;8427:66;31907:14;;;8407:87;8513:12;;;24960:245;25212:514;25429:2;25443:47;;;8764:2;25414:18;;;31867:19;8800:66;31907:14;;;8780:87;31916:4;25697:18;;1847:36;;;;8886:12;;;25400:326;25733:407;25924:2;25938:47;;;9137:2;25909:18;;;31867:19;9173:66;31907:14;;;9153:87;9259:12;;;25895:245;26147:514;26364:2;26378:47;;;9510:2;26349:18;;;31867:19;9546:66;31907:14;;;9526:87;31916:4;26632:18;;1847:36;;;;9632:12;;;26335:326;26668:407;26859:2;26873:47;;;9883:2;26844:18;;;31867:19;9919:66;31907:14;;;9899:87;10005:12;;;26830:245;27082:407;27273:2;27287:47;;;10256:2;27258:18;;;31867:19;10292:66;31907:14;;;10272:87;10378:12;;;27244:245;27496:407;27687:2;27701:47;;;10629:2;27672:18;;;31867:19;10665:66;31907:14;;;10645:87;10766:66;10752:12;;;10745:88;10852:12;;;27658:245;27910:514;28127:2;28141:47;;;11103:2;28112:18;;;31867:19;11139:66;31907:14;;;11119:87;31916:4;28395:18;;1847:36;;;;11225:12;;;28098:326;28431:514;28648:2;28662:47;;;11476:2;28633:18;;;31867:19;11512:66;31907:14;;;11492:87;31916:4;28916:18;;1847:36;;;;11598:12;;;28619:326;28952:407;29143:2;29157:47;;;11849:2;29128:18;;;31867:19;11885:66;31907:14;;;11865:87;11971:12;;;29114:245;29366:407;29557:2;29571:47;;;12222:2;29542:18;;;31867:19;12258:66;31907:14;;;12238:87;12344:12;;;29528:245;29780:407;29971:2;29985:47;;;12595:2;29956:18;;;31867:19;12631:66;31907:14;;;12611:87;12717:12;;;29942:245;30194:407;30385:2;30399:47;;;12968:2;30370:18;;;31867:19;13004:66;31907:14;;;12984:87;13090:12;;;30356:245;30608:407;30799:2;30813:47;;;13341:2;30784:18;;;31867:19;13377:66;31907:14;;;13357:87;13463:12;;;30770:245;31022:514;31239:2;31253:47;;;13714:2;31224:18;;;31867:19;13750:66;31907:14;;;13730:87;31916:4;31507:18;;1847:36;;;;13836:12;;;31210:326;31543:213;1847:36;;;31661:2;31646:18;;31632:124;32789:117;32276:42;32876:5;32265:54;32851:5;32848:35;32838:2;;32897:1;;32887:12"
			}
		}
	},
	"sources": {
		"core/Swapper.sol": {
			"id": 4
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"interfaces/IEvents.sol": {
			"id": 6
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"libs/LibToken.sol": {
			"id": 11
		},
		"core/State.sol": {
			"id": 3
		},
		"core/Ownable.sol": {
			"id": 2
		},
		"interfaces/IERC20.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"core/Swapper.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../interfaces/IEvents.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"../libs/LibToken.sol\";\nimport \"../core/State.sol\";\nimport \"../interfaces/IERC20.sol\";\n\n\ncontract Swapper is\n    IEvents,\n    State\n{\n\n    using LibFixedMath for int256;\n\n    event Price(int256 price, int256 deltaB, int256 newPBarX, int256 pA);\n\n    event Price2(int256 price);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    )\n        public\n        returns (uint256 amountReceived)\n    {\n        IStructs.State memory state = _loadGlobalState();\n\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.usdcFromFixed(amountReceivedFixed);\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            int256 amountReceivedFixed = _swap(\n                fromToken,\n                toToken,\n                LibToken.daiToFixed(amount),\n                state\n            );\n            amountReceived = LibToken.daiFromFixed(amountReceivedFixed);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Make transfers\n        /*\n        require(\n            IERC20(fromToken).transferFrom(msg.sender, address(this), amount),\n            'INSUFFICIENT_FROM_TOKEN_BALANCE'\n        );\n        require(\n            // IERC20(toToken).transferFrom(address(this), msg.sender, amountReceived),\n            IERC20(toToken).transfer(msg.sender, amountReceived),\n            'INSUFFICIENT_TO_TOKEN_BALANCE'\n        );\n        */\n\n        // Emit event\n        emit IEvents.Fill(\n            msg.sender,\n            fromToken,\n            toToken,\n            amount,\n            amountReceived\n        );\n\n        return amountReceived;\n    }\n\n    function _swap(\n        address fromToken,\n        address toToken,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 amountReceived)\n    {\n        // Compute initial balances (fixed point).\n        int256 a = 0;\n        int256 b = 0;\n        int256 pBarA = 0;\n        bool fromIsX;\n        if (fromToken == state.xAddress && toToken == state.yAddress) {\n            a = state.x;\n            b = state.y;\n            pBarA = state.pBarX;\n            fromIsX = true;\n        } else if(fromToken == state.yAddress && toToken == state.xAddress) {\n            a = state.y;\n            b = state.x;\n            pBarA = LibFixedMath.one().div(state.pBarX);\n        } else {\n            revert(\"Invalid token addresses\");\n        }\n\n        // Compute initial midpoint on bond curve; this will be the initial lower bound.\n        int256 pA = LibScamMath.computeMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            state.rhoRatio\n        );\n\n        // Compute\n        int256 price = _bracket(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n\n/*\n        (int256 price) = _bisect(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n        emit Price2(price);\n        */\n\n\n        if (price < 0)  {\n            revert('price cannot be < 0');\n        } else if (price == 0) {\n            revert('price cannot be zero');\n        }\n\n        // Compute about of `tokenB`\n\n\n        int256 deltaB = deltaA\n            .mul(price)\n            .mul(\n                LibFixedMath.one().sub(state.fee)\n            );\n        deltaB = -deltaB;\n\n        if (deltaB >= 0) {\n            revert('deltaB is greater or equal to zero');\n        }\n\n        // Edge Cases\n        int256 epsilon = LibFixedMath.toFixed(int256(1), int256(100000));\n        if (b.add(deltaB) <= epsilon) {\n            deltaB = epsilon.sub(b);\n            deltaB = (deltaB < 0) ? deltaB : 0;\n        }\n\n        // Round up to favor the contract\n        // We impose a dust amount of 1/10^6. This is the minimum token amount.\n        deltaB += LibFixedMath.toFixed(int256(1), int256(10**6));\n\n        if (deltaB >= 0) {\n            revert('Tried to purchase too much');\n        }\n\n\n        // Handle additional edge cases\n        int256 newPBarA = LibScamMath.computeNewPBarA(\n            state.t,\n            _getCurrentBlockNumber(),\n            state.beta,\n            pA,\n            pBarA\n        );\n\n        if (newPBarA > state.eToKappa.mul(pBarA)) {\n            newPBarA = state.eToKappa.mul(pBarA);\n        } else if(newPBarA.mul(state.eToKappa) < pBarA) {\n            newPBarA = pBarA.div(state.eToKappa);\n        }\n\n        // Update state\n        state.t = _getCurrentBlockNumber();\n        if (fromIsX) {\n            state.x = a.add(deltaA);\n            state.y = b.add(deltaB);\n            state.pBarX = newPBarA;\n        } else {\n            state.x = b.add(deltaB);\n            state.y = a.add(deltaA);\n            state.pBarX = LibFixedMath.one().div(newPBarA);\n        }\n\n        // Update state\n        _saveGlobalState(state);\n\n        emit IEvents.FillInternal(\n                msg.sender,\n                deltaA,\n                deltaB\n        );\n\n        amountReceived = -deltaB;\n        return amountReceived;\n    }\n\n    event Bisect(\n        int256 lhs1,\n        int256 mid,\n        int256 lhs\n    );\n\n    event T(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 rhoRatio,\n        int256 term4,\n        int256 k13\n    );\n\n    function _computeStep0(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 two = LibFixedMath.toFixed(int256(2));\n        int256 k13 = two.sub(state.rhoRatio).mul(a).mul(pA).sub(state.rhoRatio.mul(b));\n\n        int256 term1 = k13.square().add(\n            LibFixedMath.toFixed(int256(4))\n            .mul(pA)\n            .mul(a)\n            .mul(b)\n        );\n        int256 term2 = -(LibFixedMath.one()\n            .div(term1)\n            .ln()\n            .div(two));\n\n\n        int256 term3 = (term2 <= 0)\n            ? term2.exp()\n            : LibFixedMath.one().div(\n                (-term2).exp()\n            );\n\n        int256 term4 = (-k13)\n            .add(term3)\n            .div(two.mul(pA));\n\n        int256 delta = LibFixedMath.min(deltaA, term4);\n        return delta;\n    }\n\n    function _computeStep1(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 delta,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = a.mul(b.sub(delta.mul(pA)));\n        int256 term2 = b.mul(a.add(delta));\n\n\n\n        int256 term3 = term1.div(term2).ln();\n\n\n\n        int256 term4 = LibFixedMath.one().sub(state.rhoRatio).mul(term3);\n        int256 term5 = term4.exp().mul(delta).div(deltaA);\n        return term5;\n    }\n\n    event E(\n        int256 term2,\n        int256 term3\n    );\n\n    function _computeStep2(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = k12.div(k8);\n        int256 term2 = state.rhoRatio.add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k12)\n        );\n        int256 term3 = LibFixedMath.one().add(\n            LibFixedMath.one()\n            .sub(state.rhoRatio)\n            .mul(k8)\n        );\n        int256 term4 = term2.div(term3);\n        return term1 < term4\n            ? term1\n            : term4;\n    }\n\n    function _rhoPow(\n        int256 base,\n        int256 rho\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = LibFixedMath.one().div(\n            LibFixedMath.one().sub(rho)\n        );\n        int256 term2 = base.ln();\n        return term1.mul(term2).exp();\n    }\n\n    function _computeStep3(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 newRh, int256 yl)\n    {\n        yl = _rhoPow(rl, state.rhoRatio);\n\n        int256 term1 = state.rhoRatio.mul(yl)\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k12)\n            );\n        int256 term2 = yl\n            .add(\n                LibFixedMath.one()\n                .sub(state.rhoRatio)\n                .mul(k8)\n                .mul(rl)\n            );\n        int term3 = rl.mul(term1).div(term2);\n\n        newRh = term3 < rh\n            ? term3\n            : rh;\n\n        return (newRh, yl);\n    }\n\n    event EGGG(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh\n    );\n\n    function _computeA(int256 rl, int256 rh)\n        internal\n        returns (int256)\n    {\n        return rl.mul(LibFixedMath.toFixed(int256(4)))\n            .add(rh.mul(LibFixedMath.toFixed(int256(6))))\n            .div(LibFixedMath.toFixed(int256(10)));\n    }\n\n     function _computeStep4(\n        int256 rl,\n        int256 rh,\n        int256 k8,\n        int256 k12,\n        int256 yl,\n        IStructs.State memory state\n    )\n        internal\n        returns (\n            int256 newRl,\n            int256 newRh,\n            int256 newYl,\n            int256 newYh\n        )\n    {\n        // compute yBis\n        int256 term1 = _computeA(rl, rh);\n        int256 yBis =  _rhoPow(term1, state.rhoRatio);\n\n        //\n        int256 term2 = k12.sub(k8.mul(term1));\n        if (yBis <= term2) {\n            return (\n                term1,\n                rh,\n                yBis,\n                LibScamMath.computeBaseToOneHundred(rh)\n            );\n        } else {\n            return (\n                rl,\n                term1,\n                yl,\n                yBis\n            );\n       }\n    }\n\n    function _computeStep5(\n        int256 rl,\n        int256 rh,\n        int256 yl,\n        int256 yh,\n        int256 k8,\n        int256 k12\n    )\n        internal\n        returns (int256)\n    {\n        int256 term1 = yh.mul(rl)\n            .sub(yl.mul(rh))\n            .add(k12.mul(rh.sub(rl)));\n        int256 term2 = yh\n            .sub(yl)\n            .add(k8.mul(rh.sub(rl)));\n        int256 term3 = term1.div(term2);\n\n        return term3 > rl\n            ? term3\n            : rl;\n    }\n\n    function _computeStep6(\n        int256 rl\n    )\n        internal\n    {\n        if (rl < LibFixedMath.toFixed(int256(95), int256(100))) {\n            revert('Order too large');\n        }\n    }\n\n    function _shouldImprovePrecision(\n        int256 rl,\n        int256 rh,\n        int256 fee\n    )\n        internal\n        returns (bool shouldImprovePrecision)\n    {\n        int256 lhs = rh.sub(rl);\n        int256 tao = LibFixedMath.toFixed(int256(1), int256(10));\n        int256 rhs = tao.mul(\n            fee.add(\n                LibFixedMath.one().sub(rh)\n            )\n        );\n\n        emit L(lhs,rhs);\n\n        return lhs > rhs;\n    }\n\n    event L(\n        int256 lhs,\n        int256 rhs\n    );\n\n    event VALUE(\n        string description,\n        int256 val\n    );\n\n    function _bracket(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256)\n    {\n        // Cache constants that are used throughout bracketing algorithm.\n        int256 k8 = a.mul(\n            pA\n            .mul(deltaA)\n            .div(a.mul(b).add(b.mul(deltaA)))\n        );\n        int256 k12 = a.div(\n            a.add(deltaA)\n        );\n\n\n\n        //////// Run bracketing ///////\n        int256 delta = _computeStep0(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            state\n        );\n\n        emit VALUE(\"delta after step0\", delta);\n\n        int256 rl = _computeStep1(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            delta,\n            state\n        );\n\n        emit VALUE(\"rl after step 1\", rl);\n\n        int256 rh = _computeStep2(\n            a,\n            b,\n            pA,\n            pBarA,\n            deltaA,\n            k8,\n            k12,\n            state\n        );\n\n        emit VALUE(\"rh after step 2\", rh);\n\n\n        if (_shouldImprovePrecision(rl, rh, state.fee)) {\n            int256 yl;\n            (rh, yl) = _computeStep3(\n                rl,\n                rh,\n                k8,\n                k12,\n                state\n            );\n            emit VALUE(\"rh after step 3\", rh);\n            emit VALUE(\"yl after step 3\", yl);\n\n            if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                int256 yh;\n                (rl, rh, yl, yh) = _computeStep4(\n                    rl,\n                    rh,\n                    k8,\n                    k12,\n                    yl,\n                    state\n                );\n\n                emit VALUE(\"rl after step 4\", rl);\n                emit VALUE(\"rh after step 4\", rh);\n                emit VALUE(\"yl after step 4\", yl);\n                emit VALUE(\"yh after step 4\", yh);\n\n                if (_shouldImprovePrecision(rl, rh, state.fee)) {\n                    rl = _computeStep5(\n                        rl,\n                        rh,\n                        yl,\n                        yh,\n                        k8,\n                        k12\n                    );\n\n                    emit VALUE(\"rl after step 5\", rl);\n                }\n            }\n        }\n\n        // Step 6\n        _computeStep6(rl);\n\n        emit VALUE(\"final price\", rl.mul(pA));\n\n        // Step 7\n        return rl.mul(pA);\n    }\n\n    function _bisect(\n        int256 a,\n        int256 b,\n        int256 pA,\n        int256 pBarA,\n        int256 deltaA,\n        IStructs.State memory state\n    )\n        internal\n        returns (int256 r)\n    {\n        // Compute initial bounds.\n        int256 lowerBound = 0;\n        int256 upperBound = pA;\n\n        // Cache this value for computations.\n        int256 aPlusAmount = a.add(deltaA);\n\n        //\n        for (uint256 i = 0; i < 20; ++i) {\n            int256 mid = LibScamMath.computeMidpoint(lowerBound, upperBound);\n            int256 lhs1 = LibScamMath.computeBaseToNinetyNine(mid.div(pBarA));\n            int256 lhs = aPlusAmount\n                .mul(lhs1)\n                .mul(mid)\n                .add(deltaA.mul(mid));\n            if (lhs > b) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return lowerBound;\n    }\n\n    function _getCurrentBlockNumber()\n        internal\n        returns (uint256)\n    {\n        return block.number;\n    }\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"interfaces/IEvents.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IEvents {\n\n    event Fill(\n        address from,\n        address fromToken,\n        address toToken,\n        uint256 amountSpent,\n        uint256 amountReceived\n    );\n\n    event FillInternal(\n        address from,\n        int256 amountSpent,\n        int256 amountReceived\n    );\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n\n    function getRanges() internal pure returns (int256,int256,int256,int256) {\n        return (LN_MIN_VAL, LN_MAX_VAL, EXP_MIN_VAL, EXP_MAX_VAL);\n    }\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    function pow(int256 base, int256 power) internal pure returns (int256) {\n        // KEY INSIGHT --> e^(0.5*ln(7)) - 1/e^(0.5*ln(1/7))\n        // So I think a^x = e^(xln(a)) = 1/e^(xln(1/a))\n\n        // 1 Sanity check on `ln`\n        int256 ePower;\n        bool invert;\n        if (base <= 0) {\n            revert('Invalid ln() value');\n        } else if (base < FIXED_1) {\n            ePower = mul(power, ln(base));\n        } else {\n            // Make smaller\n            ePower = mul(power, ln(_div(FIXED_1, base)));\n            invert = true;\n        }\n\n        // 2 Sanity check on ePower\\\n        if (ePower < 0) {\n            invert = invert ? false : true;\n            ePower = abs(ePower);\n        }\n\n        // Comput e^ePower\n        // Key Insight --> e^x = 1/e^(-x)\n        /*\n        int256 exp;\n        if (ePower < FIXED_1) {\n            return exp(ePower);\n        } else {\n            return div(FIXED_1, )\n        }\n        */\n        return exp(ePower);\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n/*\n    function ceil(int256 f, int256 digits) internal pure returns (int256) {\n        int256 integer = toInteger(f);\n        int256 mantissa = toMantissa(f);\n        int256 mantissaShifted = _mul(f, 10**(digits + 1));\n        if (mantissaShifted % 10 == 0) {\n            mantissaShifted /= 10;\n        } else {\n            mantissaShifted /= 10;\n            mantissaShifted += 1;\n        }\n        int256 newMantissa = toMantissa(toInteger(mantissaShifted));\n\n        return toFraction(f, newMantissa);\n\n        // IDEAL: return _div(_add(f, 10**digits - 1), 10**digits);\n    }\n    */\n\n    function toFraction(int256 integer, int256 mantissa) internal pure returns (int256) {\n        return integer | mantissa;\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"libs/LibToken.sol": "pragma solidity ^0.5.9;\n\nimport \"../libs/LibScamMath.sol\";\n\n\nlibrary LibToken {\n\n    uint256 private constant DAI_DECIMALS = 18;\n    uint256 private constant USDC_DECIMALS = 6;\n\n    function daiToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, DAI_DECIMALS);\n    }\n\n    function daiFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, DAI_DECIMALS);\n    }\n\n    function usdcToFixed(uint256 amount)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibScamMath.tokenToFixed(amount, USDC_DECIMALS);\n    }\n\n    function usdcFromFixed(int256 amount)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return LibScamMath.tokenFromFixed(amount, USDC_DECIMALS);\n    }\n}",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n"
	},
	"sourceTreeHashHex": "0x3c156fdb185685cfff4f247592dbfef6575699306dc397044d4de03d8f1e9cba",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}