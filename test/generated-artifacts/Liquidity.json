{
	"schemaVersion": "2.0.0",
	"contractName": "Liquidity",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "y_amount",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "l_amount",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Allows a sender to deposit tokens into the contract to provide liquidity.",
					"params": {
						"x_amount": "The amount of x that should be taken from the sender's balance.",
						"y_amount": "The amount of x that should be taken from the sender's balance."
					}
				},
				"removeLiquidity(uint256)": {
					"details": "Allows a sender to withdraw tokens by burning liquidity tokens.",
					"params": {
						"l_amount": "The amount of liquidity tokens to burn."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b03191633179055611519806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c8f9f231161005b5780639c8f9f23146100d55780639cd441da146100e8578063afd46eb5146100fb578063f2fde38b1461011c5761007d565b806370a08231146100825780637b689036146100ab5780638da5cb5b146100c0575b600080fd5b610095610090366004610f06565b61012f565b6040516100a291906114cd565b60405180910390f35b6100be6100b9366004610f21565b610157565b005b6100c861016d565b6040516100a29190610fae565b6100be6100e3366004610f75565b610189565b6100be6100f6366004610f8d565b6103c6565b61010361067f565b6040516100a29d9c9b9a9998979695949392919061104d565b6100be61012a366004610f06565b6106d4565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b61015f6107a6565b61016982826107f9565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6005546003546001916000916101ba91906101ae908690607f1c63ffffffff61094c16565b9063ffffffff6109a916565b905060006101e183600401546101ae607f8660030154901c8761094c90919063ffffffff16565b90506101f983600201546101f4846109f6565b610a4c565b60028401556003830154610210906101f4836109f6565b6003840155336000908152600a84016020526040902054610237908563ffffffff610abc16565b336000908152600a85016020526040902055600483015461025e908563ffffffff610afe16565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb916102c0913391879101611027565b602060405180830381600087803b1580156102da57600080fd5b505af11580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103129190810190610f55565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb9061036d9033908590600401611027565b602060405180830381600087803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103bf9190810190610f55565b5050505050565b600160006103dc84670de0b6b3a7640000610b3d565b905060006103ed84620f4240610b3d565b9050610406836002015482610bd790919063ffffffff16565b600384015461041c90849063ffffffff610bd716565b1461045c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906110fc565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906104b990339030908a90600401610ff6565b602060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061050b9190810190610f55565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061056890339030908990600401610ff6565b602060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ba9190810190610f55565b5060008360020154600014156105d957506001600484015560006105ff565b6105fc607f8560020154901c6101ae86600401548961094c90919063ffffffff16565b90505b61060d846002015484610c95565b600285015560038401546106219083610c95565b6003850155336000908152600a85016020526040902054610648908263ffffffff610afe16565b336000908152600a86016020526040902055600484015461066f908263ffffffff610afe16565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6106dc6107a6565b73ffffffffffffffffffffffffffffffffffffffff8116610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611326565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061079b9033908490610fcf565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906111c7565b565b60015460ff1615610836576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906111fe565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790556108bd60636064610b3d565b600655606360078190556108d2906064610b3d565b6008556108e26005612710610b3d565b60095561090a6108f66001620f4240610ca1565b6108fe610cc0565b9063ffffffff610a4c16565b600c5561091b6127156103e8610ca1565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b60008261095b575060006109a3565b8282028284828161096857fe5b04146109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906112ef565b90505b92915050565b6000816109e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611159565b60008284816109ed57fe5b04949350505050565b600080821215610a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611292565b6109a3826f80000000000000000000000000000000610cd4565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906113cb565b610ab58383600003610d4a565b9392505050565b600082821115610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611190565b50900390565b6000828201838110156109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906110c5565b600080831215610b79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611402565b6000821215610bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611235565b610ab5610bd1846f80000000000000000000000000000000610cd4565b83610dc0565b600080610c086f80000000000000000000000000000000610c03610bfa87610e8f565b610c0387610e8f565b610cd4565b90506000610c21610c1886610ea5565b610c0386610e8f565b90506000610c3a610c3187610e8f565b610c0387610ea5565b90506000610c6c610c56610c4d89610ea5565b610c0389610ea5565b6f80000000000000000000000000000000610dc0565b9050610c8a610c84610c7e8686610d4a565b84610d4a565b82610d4a565b979650505050505050565b6000610ab58383610d4a565b6000610ab5610bd1846f80000000000000000000000000000000610cd4565b6f8000000000000000000000000000000090565b6000821580610ce1575081155b15610cee575060006109a3565b5081810281838281610cfc57fe5b05141580610d13575082828281610d0f57fe5b0514155b156109a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104539061135d565b818101600083128015610d5d5750600082125b8015610d6857508281135b80610d895750600083138015610d7e5750600082135b8015610d8957508281125b156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611394565b600081610df9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104539061145f565b7f800000000000000000000000000000000000000000000000000000000000000083148015610e475750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611496565b818381610e8757fe5b059392505050565b6f80000000000000000000000000000000900590565b6000808213610ecc576f7fffffffffffffffffffffffffffffff82600003166000036109a3565b506f7fffffffffffffffffffffffffffffff1690565b803573ffffffffffffffffffffffffffffffffffffffff811681146109a357600080fd5b600060208284031215610f17578081fd5b610ab58383610ee2565b60008060408385031215610f33578081fd5b610f3d8484610ee2565b9150610f4c8460208501610ee2565b90509250929050565b600060208284031215610f66578081fd5b815180151581146109a0578182fd5b600060208284031215610f86578081fd5b5035919050565b60008060408385031215610f9f578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b9081526020019056fea365627a7a72315820cd09d58ac221591cbe6caa3c97f11ba9d177b317a9261caa1c75a9fd2951316d6c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x1519 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9C8F9F23 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11C JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF21 JUMP JUMPDEST PUSH2 0x157 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xFAE JUMP JUMPDEST PUSH2 0xBE PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF75 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF8D JUMP JUMPDEST PUSH2 0x3C6 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x67F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x104D JUMP JUMPDEST PUSH2 0xBE PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x169 DUP3 DUP3 PUSH2 0x7F9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1AE SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0x94C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x9A9 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E1 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x1AE PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0x94C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1F9 DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x1F4 DUP5 PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xA4C JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x210 SWAP1 PUSH2 0x1F4 DUP4 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x237 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xABC AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x25E SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x2C0 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x312 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x36D SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3BF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x3DC DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3ED DUP5 PUSH3 0xF4240 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH2 0x406 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xBD7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x41C SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBD7 AND JUMP JUMPDEST EQ PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x10FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x4B9 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x50B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x568 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x596 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5BA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5D9 JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x5FC PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x1AE DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0x94C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x60D DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x621 SWAP1 DUP4 PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x648 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x66F SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH2 0x6DC PUSH2 0x7A6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x729 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1326 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x79B SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0xFCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x11C7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x8BD PUSH1 0x63 PUSH1 0x64 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x8D2 SWAP1 PUSH1 0x64 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x8E2 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x90A PUSH2 0x8F6 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xCA1 JUMP JUMPDEST PUSH2 0x8FE PUSH2 0xCC0 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA4C AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x91B PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x95B JUMPI POP PUSH1 0x0 PUSH2 0x9A3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x968 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x12EF JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x9ED JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xA32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1292 JUMP JUMPDEST PUSH2 0x9A3 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0xAB5 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xD4A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1190 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x10C5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB79 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xBB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0xBD1 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST DUP4 PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC08 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC03 PUSH2 0xBFA DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC03 DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xCD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC21 PUSH2 0xC18 DUP7 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0xC03 DUP7 PUSH2 0xE8F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC3A PUSH2 0xC31 DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC03 DUP8 PUSH2 0xEA5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6C PUSH2 0xC56 PUSH2 0xC4D DUP10 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0xC03 DUP10 PUSH2 0xEA5 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0xDC0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8A PUSH2 0xC84 PUSH2 0xC7E DUP7 DUP7 PUSH2 0xD4A JUMP JUMPDEST DUP5 PUSH2 0xD4A JUMP JUMPDEST DUP3 PUSH2 0xD4A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP4 DUP4 PUSH2 0xD4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 PUSH2 0xBD1 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xCE1 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xCEE JUMPI POP PUSH1 0x0 PUSH2 0x9A3 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xCFC JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xD13 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xD0F JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x135D JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xD5D JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xD68 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xD89 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xD7E JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xD89 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xDF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x145F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0xE47 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1496 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xE87 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0xECC JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x9A3 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF17 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAB5 DUP4 DUP4 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF33 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF3D DUP5 DUP5 PUSH2 0xEE2 JUMP JUMPDEST SWAP2 POP PUSH2 0xF4C DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xEE2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF66 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9A0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF86 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF9F JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xcd MULMOD 0xd5 DUP11 0xc2 0x21 MSIZE SHR 0xbe PUSH13 0xAA3C97F11BA9D177B317A9261C 0xaa SHR PUSH22 0xA9FD2951316D6C6578706572696D656E74616CF56473 PUSH16 0x6C634300050C00400000000000000000 ",
				"sourceMap": "293:3247:1:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;293:3247:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c8f9f231161005b5780639c8f9f23146100d55780639cd441da146100e8578063afd46eb5146100fb578063f2fde38b1461011c5761007d565b806370a08231146100825780637b689036146100ab5780638da5cb5b146100c0575b600080fd5b610095610090366004610f06565b61012f565b6040516100a291906114cd565b60405180910390f35b6100be6100b9366004610f21565b610157565b005b6100c861016d565b6040516100a29190610fae565b6100be6100e3366004610f75565b610189565b6100be6100f6366004610f8d565b6103c6565b61010361067f565b6040516100a29d9c9b9a9998979695949392919061104d565b6100be61012a366004610f06565b6106d4565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b61015f6107a6565b61016982826107f9565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6005546003546001916000916101ba91906101ae908690607f1c63ffffffff61094c16565b9063ffffffff6109a916565b905060006101e183600401546101ae607f8660030154901c8761094c90919063ffffffff16565b90506101f983600201546101f4846109f6565b610a4c565b60028401556003830154610210906101f4836109f6565b6003840155336000908152600a84016020526040902054610237908563ffffffff610abc16565b336000908152600a85016020526040902055600483015461025e908563ffffffff610afe16565b60048481019190915583546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169163a9059cbb916102c0913391879101611027565b602060405180830381600087803b1580156102da57600080fd5b505af11580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103129190810190610f55565b5060018301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb9061036d9033908590600401611027565b602060405180830381600087803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103bf9190810190610f55565b5050505050565b600160006103dc84670de0b6b3a7640000610b3d565b905060006103ed84620f4240610b3d565b9050610406836002015482610bd790919063ffffffff16565b600384015461041c90849063ffffffff610bd716565b1461045c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906110fc565b60405180910390fd5b82546040517f23b872dd00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906104b990339030908a90600401610ff6565b602060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061050b9190810190610f55565b5060018301546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061056890339030908990600401610ff6565b602060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ba9190810190610f55565b5060008360020154600014156105d957506001600484015560006105ff565b6105fc607f8560020154901c6101ae86600401548961094c90919063ffffffff16565b90505b61060d846002015484610c95565b600285015560038401546106219083610c95565b6003850155336000908152600a85016020526040902054610648908263ffffffff610afe16565b336000908152600a86016020526040902055600484015461066f908263ffffffff610afe16565b8460040181905550505050505050565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b6106dc6107a6565b73ffffffffffffffffffffffffffffffffffffffff8116610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611326565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061079b9033908490610fcf565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906111c7565b565b60015460ff1615610836576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906111fe565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790556108bd60636064610b3d565b600655606360078190556108d2906064610b3d565b6008556108e26005612710610b3d565b60095561090a6108f66001620f4240610ca1565b6108fe610cc0565b9063ffffffff610a4c16565b600c5561091b6127156103e8610ca1565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b60008261095b575060006109a3565b8282028284828161096857fe5b04146109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906112ef565b90505b92915050565b6000816109e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611159565b60008284816109ed57fe5b04949350505050565b600080821215610a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611292565b6109a3826f80000000000000000000000000000000610cd4565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906113cb565b610ab58383600003610d4a565b9392505050565b600082821115610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611190565b50900390565b6000828201838110156109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610453906110c5565b600080831215610b79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611402565b6000821215610bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611235565b610ab5610bd1846f80000000000000000000000000000000610cd4565b83610dc0565b600080610c086f80000000000000000000000000000000610c03610bfa87610e8f565b610c0387610e8f565b610cd4565b90506000610c21610c1886610ea5565b610c0386610e8f565b90506000610c3a610c3187610e8f565b610c0387610ea5565b90506000610c6c610c56610c4d89610ea5565b610c0389610ea5565b6f80000000000000000000000000000000610dc0565b9050610c8a610c84610c7e8686610d4a565b84610d4a565b82610d4a565b979650505050505050565b6000610ab58383610d4a565b6000610ab5610bd1846f80000000000000000000000000000000610cd4565b6f8000000000000000000000000000000090565b6000821580610ce1575081155b15610cee575060006109a3565b5081810281838281610cfc57fe5b05141580610d13575082828281610d0f57fe5b0514155b156109a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104539061135d565b818101600083128015610d5d5750600082125b8015610d6857508281135b80610d895750600083138015610d7e5750600082135b8015610d8957508281125b156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611394565b600081610df9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104539061145f565b7f800000000000000000000000000000000000000000000000000000000000000083148015610e475750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611496565b818381610e8757fe5b059392505050565b6f80000000000000000000000000000000900590565b6000808213610ecc576f7fffffffffffffffffffffffffffffff82600003166000036109a3565b506f7fffffffffffffffffffffffffffffff1690565b803573ffffffffffffffffffffffffffffffffffffffff811681146109a357600080fd5b600060208284031215610f17578081fd5b610ab58383610ee2565b60008060408385031215610f33578081fd5b610f3d8484610ee2565b9150610f4c8460208501610ee2565b90509250929050565b600060208284031215610f66578081fd5b815180151581146109a0578182fd5b600060208284031215610f86578081fd5b5035919050565b60008060408385031215610f9f578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b60208082526011908201527f736166654164643a206f766572666c6f77000000000000000000000000000000604082015260600190565b6020808252602a908201527f4c697175696474793a416d6f756e74206465706f7369746564206e6f7420707260408201527f6f706f7274696f6e616c00000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654469763a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526012908201527f736166655375623a20756e646572666c6f770000000000000000000000000000604082015260600190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526027908201527f746f46697865643a2076616c75652063616e6e6f74206265206c65737320746860408201527f616e207a65726f00000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f736166654d756c3a206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b9081526020019056fea365627a7a72315820cd09d58ac221591cbe6caa3c97f11ba9d177b317a9261caa1c75a9fd2951316d6c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9C8F9F23 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11C JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x7B689036 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF21 JUMP JUMPDEST PUSH2 0x157 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xFAE JUMP JUMPDEST PUSH2 0xBE PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF75 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF8D JUMP JUMPDEST PUSH2 0x3C6 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x67F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x104D JUMP JUMPDEST PUSH2 0xBE PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x15F PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x169 DUP3 DUP3 PUSH2 0x7F9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1AE SWAP1 DUP7 SWAP1 PUSH1 0x7F SHR PUSH4 0xFFFFFFFF PUSH2 0x94C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x9A9 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E1 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x1AE PUSH1 0x7F DUP7 PUSH1 0x3 ADD SLOAD SWAP1 SHR DUP8 PUSH2 0x94C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1F9 DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x1F4 DUP5 PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xA4C JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x210 SWAP1 PUSH2 0x1F4 DUP4 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x237 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xABC AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH2 0x25E SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST PUSH1 0x4 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x2C0 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x312 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x36D SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3BF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x3DC DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3ED DUP5 PUSH3 0xF4240 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH2 0x406 DUP4 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0xBD7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x41C SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBD7 AND JUMP JUMPDEST EQ PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x10FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x4B9 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x50B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x568 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x596 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5BA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF55 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5D9 JUMPI POP PUSH1 0x1 PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x5FC PUSH1 0x7F DUP6 PUSH1 0x2 ADD SLOAD SWAP1 SHR PUSH2 0x1AE DUP7 PUSH1 0x4 ADD SLOAD DUP10 PUSH2 0x94C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x60D DUP5 PUSH1 0x2 ADD SLOAD DUP5 PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH2 0x621 SWAP1 DUP4 PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x648 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x66F SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xAFE AND JUMP JUMPDEST DUP5 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH2 0x6DC PUSH2 0x7A6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x729 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1326 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x79B SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0xFCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x11C7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x8BD PUSH1 0x63 PUSH1 0x64 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x8D2 SWAP1 PUSH1 0x64 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x8E2 PUSH1 0x5 PUSH2 0x2710 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x90A PUSH2 0x8F6 PUSH1 0x1 PUSH3 0xF4240 PUSH2 0xCA1 JUMP JUMPDEST PUSH2 0x8FE PUSH2 0xCC0 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA4C AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x91B PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x95B JUMPI POP PUSH1 0x0 PUSH2 0x9A3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x968 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x12EF JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x9ED JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xA32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1292 JUMP JUMPDEST PUSH2 0x9A3 DUP3 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0xAB5 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0xD4A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1190 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x10C5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xB79 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xBB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1235 JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0xBD1 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST DUP4 PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC08 PUSH16 0x80000000000000000000000000000000 PUSH2 0xC03 PUSH2 0xBFA DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC03 DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xCD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC21 PUSH2 0xC18 DUP7 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0xC03 DUP7 PUSH2 0xE8F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC3A PUSH2 0xC31 DUP8 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC03 DUP8 PUSH2 0xEA5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6C PUSH2 0xC56 PUSH2 0xC4D DUP10 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0xC03 DUP10 PUSH2 0xEA5 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH2 0xDC0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8A PUSH2 0xC84 PUSH2 0xC7E DUP7 DUP7 PUSH2 0xD4A JUMP JUMPDEST DUP5 PUSH2 0xD4A JUMP JUMPDEST DUP3 PUSH2 0xD4A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 DUP4 DUP4 PUSH2 0xD4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB5 PUSH2 0xBD1 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0xCD4 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xCE1 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xCEE JUMPI POP PUSH1 0x0 PUSH2 0x9A3 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xCFC JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0xD13 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0xD0F JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x135D JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xD5D JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0xD68 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0xD89 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xD7E JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0xD89 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xDF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x145F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0xE47 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x1496 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0xE87 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 SDIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SGT PUSH2 0xECC JUMPI PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x0 SUB AND PUSH1 0x0 SUB PUSH2 0x9A3 JUMP JUMPDEST POP PUSH16 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF17 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAB5 DUP4 DUP4 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF33 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF3D DUP5 DUP5 PUSH2 0xEE2 JUMP JUMPDEST SWAP2 POP PUSH2 0xF4C DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xEE2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF66 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9A0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF86 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF9F JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654164643A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4C697175696474793A416D6F756E74206465706F7369746564206E6F74207072 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F706F7274696F6E616C00000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654469763A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166655375623A20756E646572666C6F770000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865643A2076616C75652063616E6E6F74206265206C657373207468 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616E207A65726F00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x736166654D756C3A206F766572666C6F77000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xcd MULMOD 0xd5 DUP11 0xc2 0x21 MSIZE SHR 0xbe PUSH13 0xAA3C97F11BA9D177B317A9261C 0xaa SHR PUSH22 0xA9FD2951316D6C6578706572696D656E74616CF56473 PUSH16 0x6C634300050C00400000000000000000 ",
				"sourceMap": "293:3247:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;293:3247:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;380:196;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;299:141:3;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;2536:1002:1;;;;;;;;;:::i;845:1544::-;;;;;;;;;:::i;264:28:3:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;320:293:2;;;;;;;;;:::i;380:196:1:-;538:31;;461:7;538:31;;;:22;:31;;;;;;;380:196::o;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;2536:1002:1:-;2843:7;;2818;;2679:6;;2648:28;;2793:58;;2843:7;2793:41;;:8;;2830:3;2810:23;2793:41;:16;:41;:::i;:::-;:49;:58;:49;:58;:::i;:::-;2774:77;;2861:16;2880:58;2930:5;:7;;;2880:41;2917:3;2905:5;:7;;;2897:23;;2880:8;:16;;:41;;;;:::i;:58::-;2861:77;;3003:57;3020:5;:7;;;3029:30;3050:8;3029:20;:30::i;:::-;3003:16;:57::i;:::-;2993:7;;;:67;3097:7;;;;3080:57;;3106:30;3127:8;3106:20;:30::i;3080:57::-;3070:7;;;:67;3248:10;3225:34;;;;:22;;;:34;;;;;;:74;;3281:8;3225:74;:42;:74;:::i;:::-;3211:10;3188:34;;;;:22;;;:34;;;;;:111;3319:7;;;;:25;;3335:8;3319:25;:15;:25;:::i;:::-;3309:7;;;;:35;;;;3422:14;;3415:53;;;;;3422:14;;;;;;;3415:31;;:53;;3447:10;;3459:8;;3415:53;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3415:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3415:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3415:53:1;;;;;;;;;-1:-1:-1;3485:14:1;;;;3478:53;;;;;3485:14;;;;;3478:31;;:53;;3510:10;;3522:8;;3478:53;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3478:53:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3478:53:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3478:53:1;;;;;;;;;;2536:1002;;;;:::o;845:1544::-;1003:6;972:28;1041:38;1062:8;1072:6;1041:20;:38::i;:::-;1019:60;;1089:19;1111:37;1132:8;1142:5;1111:20;:37::i;:::-;1089:59;;1296:25;1313:5;:7;;;1296:12;:16;;:25;;;;:::i;:::-;1284:7;;;;1267:25;;:12;;:25;:16;:25;:::i;:::-;:54;1246:143;;;;;;;;;;;;;;;;;;;;;;1485:14;;1478:72;;;;;1485:14;;;;;;;1478:35;;:72;;1514:10;;1534:4;;1541:8;;1478:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1478:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1478:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1478:72:1;;;;;;;;;-1:-1:-1;1567:14:1;;;;1560:72;;;;;1567:14;;;;;1560:35;;:72;;1596:10;;1616:4;;1623:8;;1560:72;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1560:72:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1560:72:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1560:72:1;;;;;;;;;;1769:24;1807:5;:7;;;1818:1;1807:12;1803:196;;;-1:-1:-1;1879:1:1;1869:7;;;:11;1854:1;1803:196;;;1930:58;1984:3;1972:5;:7;;;1964:23;;1930:25;1947:5;:7;;;1930:8;:16;;:25;;;;:::i;:58::-;1911:77;;1803:196;2063:39;2080:5;:7;;;2089:12;2063:16;:39::i;:::-;2053:7;;;:49;2139:7;;;;2122:39;;2148:12;2122:16;:39::i;:::-;2112:7;;;:49;2270:10;2247:34;;;;:22;;;:34;;;;;;:82;;2303:16;2247:82;:42;:82;:::i;:::-;2233:10;2210:34;;;;:22;;;:34;;;;;:119;2349:7;;;;:33;;2365:16;2349:33;:15;:33;:::i;:::-;2339:5;:7;;:43;;;;845:1544;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;53:282:9:-;139:7;166:6;162:45;;-1:-1:-1;195:1:9;188:8;;162:45;228:5;;;232:1;228;:5;:1;247:5;;;;;:10;243:68;;273:27;;;;;;;;;;;243:68;327:1;-1:-1:-1;53:282:9;;;;;:::o;341:224::-;427:7;454:6;450:64;;476:27;;;;;;;;;;;450:64;523:9;539:1;535;:5;;;;;;;341:224;-1:-1:-1;;;;341:224:9:o;5670:216:8:-;5721:8;5764:1;5752;5745:21;5741:101;;;5782:49;;;;;;;;;;;5741:101;5855:24;5867:1;889:66;5855:4;:24::i;2241:186::-;2297:8;1023:66;2321:1;:18;2317:79;;;2355:30;;;;;;;;;;;2317:79;2409:11;2414:1;2418;2417:2;;2409:4;:11::i;:::-;2405:15;2241:186;-1:-1:-1;;;2241:186:8:o;571:201:9:-;657:7;688:1;684;:5;680:64;;;705:28;;;;;;;;;;;680:64;-1:-1:-1;760:5:9;;;571:201::o;778:223::-;864:7;899:5;;;918;;;914:63;;;939:27;;;;;;;;;;;6036:386:8;6098:8;6141:1;6129;6122:21;6118:116;;;6159:64;;;;;;;;;;;6118:116;6266:1;6254;6247:21;6243:118;;;6284:66;;;;;;;;;;;6243:118;6374:41;6379:24;6391:1;889:66;6379:4;:24::i;:::-;6412:1;6374:4;:41::i;2524:772::-;2580:8;2601:18;2622:47;889:66;2636:32;2641:12;2651:1;2641:9;:12::i;:::-;2655;2665:1;2655:9;:12::i;:::-;2636:4;:32::i;2622:47::-;2601:68;;2757:20;2780:33;2785:13;2796:1;2785:10;:13::i;:::-;2800:12;2810:1;2800:9;:12::i;2780:33::-;2757:56;;2823:20;2846:33;2851:12;2861:1;2851:9;:12::i;:::-;2865:13;2876:1;2865:10;:13::i;2846:33::-;2823:56;;2889:23;2915:49;2920:34;2925:13;2936:1;2925:10;:13::i;:::-;2940;2951:1;2940:10;:13::i;2920:34::-;889:66;2915:4;:49::i;:::-;2889:75;;2982:77;2987:53;2992:32;2997:11;3010:13;2992:4;:32::i;:::-;3026:13;2987:4;:53::i;:::-;3042:16;2982:4;:77::i;:::-;2975:84;2524:772;-1:-1:-1;;;;;;;2524:772:8:o;2053:97::-;2109:8;2133:10;2138:1;2141;2133:4;:10::i;5412:116::-;5472:8;5496:25;5501:16;5506:1;889:66;5501:4;:16::i;1676:76::-;889:66;;1676:76::o;17769:245::-;17825:8;17849:6;;;:16;;-1:-1:-1;17859:6:8;;17849:16;17845:55;;;-1:-1:-1;17888:1:8;17881:8;;17845:55;-1:-1:-1;17913:5:8;;;17917:1;17913;:5;:1;17932:5;;;;;:10;;:24;;;;17955:1;17950;17946;:5;;;;;;:10;;17932:24;17928:80;;;17973:24;;;;;;;;;;;18421:210;18501:5;;;18477:8;18521:5;;:14;;;;;18534:1;18530;:5;18521:14;:23;;;;;18543:1;18539;:5;18521:23;18520:54;;;;18554:1;18550;:5;:14;;;;;18563:1;18559;:5;18550:14;:23;;;;;18572:1;18568;:5;18550:23;18516:109;;;18590:24;;;;;;;;;;;18101:260;18157:8;18181:6;18177:67;;18203:30;;;;;;;;;;;18177:67;1023:66;18257:1;:18;:29;;;;;18279:1;18284:2;18279:7;18257:29;18253:83;;;18301:24;;;;;;;;;;;18253:83;18353:1;18349;:5;;;;;;;18101:260;-1:-1:-1;;;18101:260:8:o;6485:97::-;889:66;6564:11;;;6485:97::o;6588:138::-;6641:8;6672:1;6668;:5;:51;;798:34;6701:1;6700:2;;:18;6698:21;;6668:51;;;-1:-1:-1;798:34:8;6677:17;;6588:138::o;5:130:-1:-;72:20;;19166:42;19155:54;;19738:35;;19728:2;;19787:1;;19777:12;414:241;;518:2;506:9;497:7;493:23;489:32;486:2;;;-1:-1;;524:12;486:2;586:53;631:7;607:22;586:53;;662:366;;;783:2;771:9;762:7;758:23;754:32;751:2;;;-1:-1;;789:12;751:2;851:53;896:7;872:22;851:53;;;841:63;;959:53;1004:7;941:2;984:9;980:22;959:53;;;949:63;;745:283;;;;;;1035:257;;1147:2;1135:9;1126:7;1122:23;1118:32;1115:2;;;-1:-1;;1153:12;1115:2;223:6;217:13;19884:5;18989:13;18982:21;19862:5;19859:32;19849:2;;-1:-1;;19895:12;1299:241;;1403:2;1391:9;1382:7;1378:23;1374:32;1371:2;;;-1:-1;;1409:12;1371:2;-1:-1;344:20;;1365:175;-1:-1;1365:175;1547:366;;;1668:2;1656:9;1647:7;1643:23;1639:32;1636:2;;;-1:-1;;1674:12;1636:2;-1:-1;;344:20;;;1826:2;1865:22;;;344:20;;-1:-1;1630:283;8909:213;19166:42;19155:54;;;;2140:37;;9027:2;9012:18;;8998:124;9129:340;19166:42;19155:54;;;1999:58;;19155:54;;9455:2;9440:18;;2140:37;9283:2;9268:18;;9254:215;9476:451;19166:42;19155:54;;;1999:58;;19155:54;;;;9830:2;9815:18;;2140:37;9913:2;9898:18;;2369:36;;;;9658:2;9643:18;;9629:298;9934:340;19166:42;19155:54;;;;1999:58;;10260:2;10245:18;;2369:36;10088:2;10073:18;;10059:215;10281:1521;18989:13;;18982:21;2254:34;;19166:42;19155:54;;;10877:2;10862:18;;2140:37;19155:54;;;;10960:2;10945:18;;2140:37;11041:2;11026:18;;2369:36;;;;11122:3;11107:19;;2369:36;;;;11206:3;11191:19;;2369:36;;;;11288:3;11273:19;;2369:36;;;;11372:3;11357:19;;2369:36;11454:3;11439:19;;2369:36;11536:3;11521:19;;2369:36;11621:3;11606:19;;2369:36;11704:3;11689:19;;2369:36;;;;11787:3;11772:19;;2369:36;10718:3;10703:19;;10689:1113;11809:407;12000:2;12014:47;;;2642:2;11985:18;;;18757:19;2678:66;18797:14;;;2658:87;2764:12;;;11971:245;12223:407;12414:2;12428:47;;;3015:2;12399:18;;;18757:19;3051:66;18797:14;;;3031:87;3152:66;3138:12;;;3131:88;3238:12;;;12385:245;12637:407;12828:2;12842:47;;;3489:2;12813:18;;;18757:19;3525:66;18797:14;;;3505:87;3611:12;;;12799:245;13051:407;13242:2;13256:47;;;3862:2;13227:18;;;18757:19;3898:66;18797:14;;;3878:87;3984:12;;;13213:245;13465:407;13656:2;13670:47;;;4235:2;13641:18;;;18757:19;4271:66;18797:14;;;4251:87;4357:12;;;13627:245;13879:407;14070:2;14084:47;;;4608:2;14055:18;;;18757:19;4644:66;18797:14;;;4624:87;4730:12;;;14041:245;14293:407;14484:2;14498:47;;;4981:2;14469:18;;;18757:19;5017:66;18797:14;;;4997:87;5118:66;5104:12;;;5097:88;5204:12;;;14455:245;14707:407;14898:2;14912:47;;;5455:2;14883:18;;;18757:19;5491:66;18797:14;;;5471:87;5592:66;5578:12;;;5571:88;5678:12;;;14869:245;15121:407;15312:2;15326:47;;;5929:2;15297:18;;;18757:19;5965:66;18797:14;;;5945:87;6051:12;;;15283:245;15535:407;15726:2;15740:47;;;6302:2;15711:18;;;18757:19;6338:66;18797:14;;;6318:87;6424:12;;;15697:245;15949:407;16140:2;16154:47;;;6675:2;16125:18;;;18757:19;6711:66;18797:14;;;6691:87;6797:12;;;16111:245;16363:407;16554:2;16568:47;;;7048:2;16539:18;;;18757:19;7084:66;18797:14;;;7064:87;7170:12;;;16525:245;16777:407;16968:2;16982:47;;;7421:2;16953:18;;;18757:19;7457:66;18797:14;;;7437:87;7543:12;;;16939:245;17191:407;17382:2;17396:47;;;7794:2;17367:18;;;18757:19;7830:66;18797:14;;;7810:87;7931:66;7917:12;;;7910:88;8017:12;;;17353:245;17605:407;17796:2;17810:47;;;8268:2;17781:18;;;18757:19;8304:66;18797:14;;;8284:87;8390:12;;;17767:245;18019:407;18210:2;18224:47;;;8641:2;18195:18;;;18757:19;8677:66;18797:14;;;8657:87;8763:12;;;18181:245;18433:213;2369:36;;;18551:2;18536:18;;18522:124"
			}
		}
	},
	"sources": {
		"core/Liquidity.sol": {
			"id": 1
		},
		"libs/LibSafeMath.sol": {
			"id": 9
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"interfaces/IERC20.sol": {
			"id": 5
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"core/State.sol": {
			"id": 3
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/Ownable.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"core/Liquidity.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeMath.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../core/State.sol\";\n\n\n/// FIXME(jalextowle): Add in the bias factor and ponzi scheme\ncontract Liquidity is\n    State,\n    IStructs\n{\n    using LibSafeMath for uint256;\n    function balanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        IStructs.State storage state = gState;\n        return state.liquidityBalance[account];\n    }\n\n    /// @dev Allows a sender to deposit tokens into the contract to provide liquidity.\n    /// @param x_amount The amount of x that should be taken from the sender's balance.\n    /// @param y_amount The amount of x that should be taken from the sender's balance.\n    function addLiquidity(uint256 x_amount, uint256 y_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n        int256 xAmountFixed = LibFixedMath.toFixed(x_amount, 10**18);\n        int256 yAmountFixed = LibFixedMath.toFixed(y_amount, 10**6);\n\n        // Ensure that the amount of x and y that are being deposited are proportional.\n       require(\n            xAmountFixed.mul(state.y) == yAmountFixed.mul(state.x),\n            \"Liquidty:Amount deposited not proportional\"\n        );\n\n        // Charge the sender the amount of x and y tokens that were specified\n        IERC20(state.xAddress).transferFrom(msg.sender, address(this), x_amount);\n        IERC20(state.yAddress).transferFrom(msg.sender, address(this), y_amount);\n\n        // Grant the sender some liquidity tokens.\n        // FIXME(jalextowle): (Look into whether more precision is needed)\n        uint256 liquidity_reward;\n        if (state.x == 0) {\n            liquidity_reward = 0;\n            state.l = 1;\n        } else {\n            liquidity_reward = x_amount.safeMul(state.l).safeDiv(uint256(state.x) >> 127);\n        }\n\n        // Increase the balances of x and y\n        state.x = LibFixedMath.add(state.x, xAmountFixed);\n        state.y = LibFixedMath.add(state.y, yAmountFixed);\n\n        // Grant the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeAdd(\n            liquidity_reward\n        );\n        state.l = state.l.safeAdd(liquidity_reward);\n    }\n\n    /// @dev Allows a sender to withdraw tokens by burning liquidity tokens.\n    /// @param l_amount The amount of liquidity tokens to burn.\n    function removeLiquidity(uint256 l_amount)\n        external\n    {\n        // Load the contract's state.\n        IStructs.State storage state = gState;\n\n        // Calculate the amounts of tokens that should be sent to the sender.\n        uint256 x_amount = l_amount.safeMul(uint256(state.x) >> 127).safeDiv(state.l);\n        uint256 y_amount = l_amount.safeMul(uint256(state.y) >> 127).safeDiv(state.l);\n\n        // Decrease the balances of x and y\n        state.x = LibFixedMath.sub(state.x, LibFixedMath.toFixed(x_amount));\n        state.y = LibFixedMath.sub(state.y, LibFixedMath.toFixed(y_amount));\n\n        // Destroy the liquidity tokens\n        state.liquidityBalance[msg.sender] = state.liquidityBalance[msg.sender].safeSub(\n            l_amount\n        );\n        state.l = state.l.safeAdd(l_amount);\n\n        // Reward sender in the correct amounts of x and y.\n        IERC20(state.xAddress).transfer(msg.sender, x_amount);\n        IERC20(state.yAddress).transfer(msg.sender, y_amount);\n    }\n}\n",
		"libs/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            revert(\"safeMul: overflow\");\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            revert(\"safeDiv: overflow\");\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            revert(\"safeSub: underflow\");\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            revert(\"safeAdd: overflow\");\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"interfaces/IERC20.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.div(pA),\n            betaToDeltaT.div(pBarA)\n        );\n        int256 term3 = LibFixedMath.one().div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}"
	},
	"sourceTreeHashHex": "0xfc48164f536127ae4e9d9146d98ebb957f7caf6a4fe3ca0719280893642e4b2e",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}