{
	"schemaVersion": "2.0.0",
	"contractName": "State",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "gState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isInitialized",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					},
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "l",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "pBarX",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "rhoNumerator",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rhoRatio",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "fee",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "t",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "beta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "eToKappa",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "xAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "yAddress",
						"type": "address"
					}
				],
				"name": "initState",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x6080604052600080546001600160a01b03191633179055610aa6806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637b689036146100515780638da5cb5b14610066578063afd46eb514610084578063f2fde38b146100a5575b600080fd5b61006461005f3660046106fd565b6100b8565b005b61006e6100ce565b60405161007b9190610731565b60405180910390f35b61008c6100ea565b60405161007b9d9c9b9a99989796959493929190610779565b6100646100b33660046106e2565b61013f565b6100c061021a565b6100ca828261026d565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b61014761021a565b73ffffffffffffffffffffffffffffffffffffffff811661019d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906108bc565b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061020f9033908490610752565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461026b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906107f1565b565b60015460ff16156102aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610828565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610331606360646103c0565b600655606360078190556103469060646103c0565b60085561035660056127106103c0565b60095561037e61036a6001620f4240610461565b610372610480565b9063ffffffff61049416565b600c5561038f6127156103e8610461565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6000808312156103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610998565b6000821215610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061085f565b61045a610454846f800000000000000000000000000000006104fd565b83610579565b9392505050565b600061045a610454846f800000000000000000000000000000006104fd565b6f8000000000000000000000000000000090565b60007f80000000000000000000000000000000000000000000000000000000000000008214156104f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610961565b61045a8383600003610648565b600082158061050a575081155b1561051757506000610573565b508181028183828161052557fe5b0514158061053c57508282828161053857fe5b0514155b15610573576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906108f3565b92915050565b6000816105b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906109f5565b7f8000000000000000000000000000000000000000000000000000000000000000831480156106005750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610a2c565b81838161064057fe5b059392505050565b81810160008312801561065b5750600082125b801561066657508281135b80610687575060008313801561067c5750600082135b801561068757508281125b15610573576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061092a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057357600080fd5b6000602082840312156106f3578081fd5b61045a83836106be565b6000806040838503121561070f578081fd5b61071984846106be565b915061072884602085016106be565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f7700000000000000000000000000000000000060408201526060019056fea365627a7a7231582037e7bdd10bbeaa9abdcbc5a7175ce96ed0007a48fc2bdd45fcfe906d74bdccae6c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xAA6 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B689036 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xA5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0xB8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6E PUSH2 0xCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x731 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH2 0xEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH2 0x64 PUSH2 0xB3 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x13F JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x21A JUMP JUMPDEST PUSH2 0xCA DUP3 DUP3 PUSH2 0x26D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH2 0x147 PUSH2 0x21A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x20F SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x752 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x26B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x828 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x331 PUSH1 0x63 PUSH1 0x64 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x346 SWAP1 PUSH1 0x64 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x356 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x37E PUSH2 0x36A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x461 JUMP JUMPDEST PUSH2 0x372 PUSH2 0x480 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x494 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x38F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x461 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x3FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x437 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x85F JUMP JUMPDEST PUSH2 0x45A PUSH2 0x454 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x4FD JUMP JUMPDEST DUP4 PUSH2 0x579 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45A PUSH2 0x454 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x4FD JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x961 JUMP JUMPDEST PUSH2 0x45A DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x648 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x50A JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x517 JUMPI POP PUSH1 0x0 PUSH2 0x573 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x525 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x53C JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x538 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x9F5 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x600 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0xA2C JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x640 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x65B JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x666 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x687 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x67C JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x687 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x92A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x45A DUP4 DUP4 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x719 DUP5 DUP5 PUSH2 0x6BE JUMP JUMPDEST SWAP2 POP PUSH2 0x728 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x6BE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 CALLDATACOPY 0xe7 0xbd 0xd1 SIGNEXTEND 0xbe 0xaa SWAP11 0xbd 0xcb 0xc5 0xa7 OR 0x5c 0xe9 PUSH15 0xD0007A48FC2BDD45FCFE906D74BDCC 0xae PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "191:1421:3:-;;;212:5:2;:18;;-1:-1:-1;;;;;;212:18:2;220:10;212:18;;;191:1421:3;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637b689036146100515780638da5cb5b14610066578063afd46eb514610084578063f2fde38b146100a5575b600080fd5b61006461005f3660046106fd565b6100b8565b005b61006e6100ce565b60405161007b9190610731565b60405180910390f35b61008c6100ea565b60405161007b9d9c9b9a99989796959493929190610779565b6100646100b33660046106e2565b61013f565b6100c061021a565b6100ca828261026d565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600154600254600354600454600554600654600754600854600954600a54600c54600d5460ff8c169b73ffffffffffffffffffffffffffffffffffffffff61010090910481169b16999897969594939291908d565b61014761021a565b73ffffffffffffffffffffffffffffffffffffffff811661019d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906108bc565b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09061020f9033908490610752565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461026b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906107f1565b565b60015460ff16156102aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610828565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8581169190910291909117909155600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091179055610331606360646103c0565b600655606360078190556103469060646103c0565b60085561035660056127106103c0565b60095561037e61036a6001620f4240610461565b610372610480565b9063ffffffff61049416565b600c5561038f6127156103e8610461565b600d555050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055565b6000808312156103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610998565b6000821215610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061085f565b61045a610454846f800000000000000000000000000000006104fd565b83610579565b9392505050565b600061045a610454846f800000000000000000000000000000006104fd565b6f8000000000000000000000000000000090565b60007f80000000000000000000000000000000000000000000000000000000000000008214156104f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610961565b61045a8383600003610648565b600082158061050a575081155b1561051757506000610573565b508181028183828161052557fe5b0514158061053c57508282828161053857fe5b0514155b15610573576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906108f3565b92915050565b6000816105b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906109f5565b7f8000000000000000000000000000000000000000000000000000000000000000831480156106005750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019490610a2c565b81838161064057fe5b059392505050565b81810160008312801561065b5750600082125b801561066657508281135b80610687575060008313801561067c5750600082135b801561068757508281125b15610573576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061092a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057357600080fd5b6000602082840312156106f3578081fd5b61045a83836106be565b6000806040838503121561070f578081fd5b61071984846106be565b915061072884602085016106be565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b9c15158d5273ffffffffffffffffffffffffffffffffffffffff9b8c1660208e015299909a1660408c015260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301919091526101808201526101a00190565b6020808252600e908201527f4f6e6c794f776e65724572726f72000000000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920496e697469616c697a656400000000000000000000000000604082015260600190565b60208082526038908201527f746f46697865642875696e742c75696e74293a2064656e6f6d696e61746f722060408201527f63616e6e6f74206265206c657373207468616e207a65726f0000000000000000606082015260800190565b60208082526018908201527f5472616e736665724f776e6572546f5a65726f4572726f720000000000000000604082015260600190565b6020808252600e908201527f5f6d756c3a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f5f6164643a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b60208082526014908201527f7375623a2076616c756520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526036908201527f746f46697865642875696e742c75696e74293a206e756d657261746f7220636160408201527f6e6e6f74206265206c657373207468616e207a65726f00000000000000000000606082015260800190565b60208082526014908201527f5f6469763a20646976696465206279207a65726f000000000000000000000000604082015260600190565b6020808252600e908201527f5f6469763a206f766572666c6f7700000000000000000000000000000000000060408201526060019056fea365627a7a7231582037e7bdd10bbeaa9abdcbc5a7175ce96ed0007a48fc2bdd45fcfe906d74bdccae6c6578706572696d656e74616cf564736f6c634300050c0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B689036 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xAFD46EB5 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xA5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0xB8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6E PUSH2 0xCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x731 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH2 0xEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH2 0x64 PUSH2 0xB3 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x13F JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x21A JUMP JUMPDEST PUSH2 0xCA DUP3 DUP3 PUSH2 0x26D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xFF DUP13 AND SWAP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP12 AND SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 DUP14 JUMP JUMPDEST PUSH2 0x147 PUSH2 0x21A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH2 0x20F SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH2 0x752 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x26B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x828 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x331 PUSH1 0x63 PUSH1 0x64 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x63 PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x346 SWAP1 PUSH1 0x64 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x356 PUSH1 0x5 PUSH2 0x2710 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x37E PUSH2 0x36A PUSH1 0x1 PUSH3 0xF4240 PUSH2 0x461 JUMP JUMPDEST PUSH2 0x372 PUSH2 0x480 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x494 AND JUMP JUMPDEST PUSH1 0xC SSTORE PUSH2 0x38F PUSH2 0x2715 PUSH2 0x3E8 PUSH2 0x461 JUMP JUMPDEST PUSH1 0xD SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x3FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x437 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x85F JUMP JUMPDEST PUSH2 0x45A PUSH2 0x454 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x4FD JUMP JUMPDEST DUP4 PUSH2 0x579 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45A PUSH2 0x454 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x4FD JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x961 JUMP JUMPDEST PUSH2 0x45A DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x648 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x50A JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x517 JUMPI POP PUSH1 0x0 PUSH2 0x573 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x525 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x53C JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x538 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x9F5 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x600 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0xA2C JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x640 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x65B JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x666 JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x687 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x67C JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x687 JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x92A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x45A DUP4 DUP4 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x70F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x719 DUP5 DUP5 PUSH2 0x6BE JUMP JUMPDEST SWAP2 POP PUSH2 0x728 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x6BE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP13 ISZERO ISZERO DUP14 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP12 DUP13 AND PUSH1 0x20 DUP15 ADD MSTORE SWAP10 SWAP1 SWAP11 AND PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP11 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xA0 DUP10 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C794F776E65724572726F72000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x416C726561647920496E697469616C697A656400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A2064656E6F6D696E61746F7220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x63616E6E6F74206265206C657373207468616E207A65726F0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F776E6572546F5A65726F4572726F720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D756C3A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6164643A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x7375623A2076616C756520746F6F20736D616C6C000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F46697865642875696E742C75696E74293A206E756D657261746F72206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6E6F74206265206C657373207468616E207A65726F00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A20646976696465206279207A65726F000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6469763A206F766572666C6F77000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 CALLDATACOPY 0xe7 0xbd 0xd1 SIGNEXTEND 0xbe 0xaa SWAP11 0xbd 0xcb 0xc5 0xa7 OR 0x5c 0xe9 PUSH15 0xD0007A48FC2BDD45FCFE906D74BDCC 0xae PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV 0xc STOP BLOCKHASH ",
				"sourceMap": "191:1421:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;191:1421:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;299:141;;;;;;;;;:::i;:::-;;50:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;264:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;320:293:2;;;;;;;;;:::i;299:141:3:-;274:22:2;:20;:22::i;:::-;403:30:3;414:8;424;403:10;:30::i;:::-;299:141;;:::o;50:20:2:-;;;;;;:::o;264:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;320:293:2:-;274:22;:20;:22::i;:::-;416;;;412:195;;454:34;;;;;;;;;;;;;;;;;;;412:195;519:5;:16;;;;;;;;;;554:42;;;;;;575:10;;519:16;;554:42;;;;;;;;;;320:293;:::o;619:156::-;713:5;;;;699:10;:19;695:74;;734:24;;;;;;;;;;;695:74;619:156::o;809:800:3:-;918:6;:20;;;917:21;896:87;;;;;;;;;;;;;;994:6;:26;;;;;;;;;;;;;;;;;;;;1030:15;:26;;;;;;;;;;;;;1081:47;1110:2;1123:3;1081:20;:47::i;:::-;1066:12;:62;1208:2;1178:19;:33;;;1239:47;;1281:3;1239:20;:47::i;:::-;1221:15;:65;1309:48;1338:1;1350:5;1309:20;:48::i;:::-;1296:10;:61;1394:94;1430:48;1296:6;1469:7;1430:20;:48::i;:::-;1394:18;:16;:18::i;:::-;:22;:94;:22;:94;:::i;:::-;1380:11;:108;1516:49;1544:5;1559:4;1516:20;:49::i;:::-;1498:15;:67;-1:-1:-1;;1498:6:3;1575:27;;;;;;;;809:800::o;7174:386:8:-;7236:8;7279:1;7267;7260:21;7256:116;;;7297:64;;;;;;;;;;;7256:116;7404:1;7392;7385:21;7381:118;;;7422:66;;;;;;;;;;;7381:118;7512:41;7517:24;7529:1;889:66;7517:4;:24::i;:::-;7550:1;7512:4;:41::i;:::-;7508:45;7174:386;-1:-1:-1;;;7174:386:8:o;6550:116::-;6610:8;6634:25;6639:16;6644:1;889:66;6639:4;:16::i;1830:76::-;889:66;;1830:76::o;2395:186::-;2451:8;1023:66;2475:1;:18;2471:79;;;2509:30;;;;;;;;;;;2471:79;2563:11;2568:1;2572;2571:2;;2563:4;:11::i;18907:245::-;18963:8;18987:6;;;:16;;-1:-1:-1;18997:6:8;;18987:16;18983:55;;;-1:-1:-1;19026:1:8;19019:8;;18983:55;-1:-1:-1;19051:5:8;;;19055:1;19051;:5;:1;19070:5;;;;;:10;;:24;;;;19093:1;19088;19084;:5;;;;;;:10;;19070:24;19066:80;;;19111:24;;;;;;;;;;;19066:80;18907:245;;;;:::o;19239:260::-;19295:8;19319:6;19315:67;;19341:30;;;;;;;;;;;19315:67;1023:66;19395:1;:18;:29;;;;;19417:1;19422:2;19417:7;19395:29;19391:83;;;19439:24;;;;;;;;;;;19391:83;19491:1;19487;:5;;;;;;;19239:260;-1:-1:-1;;;19239:260:8:o;19559:210::-;19639:5;;;19615:8;19659:5;;:14;;;;;19672:1;19668;:5;19659:14;:23;;;;;19681:1;19677;:5;19659:23;19658:54;;;;19692:1;19688;:5;:14;;;;;19701:1;19697;:5;19688:14;:23;;;;;19710:1;19706;:5;19688:23;19654:109;;;19728:24;;;;;;;;;;;5:130:-1;72:20;;12060:42;12049:54;;12632:35;;12622:2;;12681:1;;12671:12;142:241;;246:2;234:9;225:7;221:23;217:32;214:2;;;-1:-1;;252:12;214:2;314:53;359:7;335:22;314:53;;390:366;;;511:2;499:9;490:7;486:23;482:32;479:2;;;-1:-1;;517:12;479:2;579:53;624:7;600:22;579:53;;;569:63;;687:53;732:7;669:2;712:9;708:22;687:53;;;677:63;;473:283;;;;;;5312:213;12060:42;12049:54;;;;983:37;;5430:2;5415:18;;5401:124;5532:340;12060:42;12049:54;;;842:58;;12049:54;;5858:2;5843:18;;983:37;5686:2;5671:18;;5657:215;5879:1521;11883:13;;11876:21;1097:34;;12060:42;12049:54;;;6475:2;6460:18;;983:37;12049:54;;;;6558:2;6543:18;;983:37;6639:2;6624:18;;1212:36;;;;6720:3;6705:19;;1212:36;;;;6804:3;6789:19;;1212:36;;;;6886:3;6871:19;;1212:36;;;;6970:3;6955:19;;1212:36;7052:3;7037:19;;1212:36;7134:3;7119:19;;1212:36;7219:3;7204:19;;1212:36;7302:3;7287:19;;1212:36;;;;7385:3;7370:19;;1212:36;6316:3;6301:19;;6287:1113;7407:407;7598:2;7612:47;;;1485:2;7583:18;;;11651:19;1521:66;11691:14;;;1501:87;1607:12;;;7569:245;7821:407;8012:2;8026:47;;;1858:2;7997:18;;;11651:19;1894:66;11691:14;;;1874:87;1980:12;;;7983:245;8235:407;8426:2;8440:47;;;2231:2;8411:18;;;11651:19;2267:66;11691:14;;;2247:87;2368:66;2354:12;;;2347:88;2454:12;;;8397:245;8649:407;8840:2;8854:47;;;2705:2;8825:18;;;11651:19;2741:66;11691:14;;;2721:87;2827:12;;;8811:245;9063:407;9254:2;9268:47;;;3078:2;9239:18;;;11651:19;3114:66;11691:14;;;3094:87;3200:12;;;9225:245;9477:407;9668:2;9682:47;;;3451:2;9653:18;;;11651:19;3487:66;11691:14;;;3467:87;3573:12;;;9639:245;9891:407;10082:2;10096:47;;;3824:2;10067:18;;;11651:19;3860:66;11691:14;;;3840:87;3946:12;;;10053:245;10305:407;10496:2;10510:47;;;4197:2;10481:18;;;11651:19;4233:66;11691:14;;;4213:87;4334:66;4320:12;;;4313:88;4420:12;;;10467:245;10719:407;10910:2;10924:47;;;4671:2;10895:18;;;11651:19;4707:66;11691:14;;;4687:87;4793:12;;;10881:245;11133:407;11324:2;11338:47;;;5044:2;11309:18;;;11651:19;5080:66;11691:14;;;5060:87;5166:12;;;11295:245"
			}
		}
	},
	"sources": {
		"core/State.sol": {
			"id": 3
		},
		"interfaces/IStructs.sol": {
			"id": 7
		},
		"libs/LibFixedMath.sol": {
			"id": 8
		},
		"libs/LibScamMath.sol": {
			"id": 10
		},
		"core/Ownable.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"core/State.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibFixedMath.sol\";\nimport \"../libs/LibScamMath.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract State is\n    Ownable\n{\n\n    using LibFixedMath for int256;\n\n    IStructs.State public gState;\n\n    function initState(address xAddress, address yAddress)\n        external\n        onlyOwner\n    {\n        _initState(xAddress, yAddress);\n    }\n\n    function _loadGlobalState()\n        internal\n        returns (IStructs.State memory state)\n    {\n        state = gState;\n        return state;\n    }\n\n    function _saveGlobalState(IStructs.State memory state)\n        internal\n    {\n        gState.x = state.x;\n        gState.y = state.y;\n        gState.pBarX = state.pBarX;\n        gState.t = state.t;\n    }\n\n    function _initState(address xAddress, address yAddress)\n        internal\n    {\n        require(\n            !gState.isInitialized,\n            'Already Initialized'\n        );\n\n        gState.xAddress = xAddress;\n        gState.yAddress = yAddress;\n        gState.pBarX = LibFixedMath.toFixed(uint256(99), uint256(100));  // initial expected price of X given Y\n        gState.rhoNumerator = uint256(99);\n        gState.rhoRatio = LibFixedMath.toFixed(uint256(99), uint256(100));\n        gState.fee = LibFixedMath.toFixed(uint256(5), uint256(10000));    // 0.0005\n        gState.beta = LibFixedMath.one().sub(\n            LibFixedMath.toFixed(int256(1), int256(1000000))\n        );\n        gState.eToKappa = LibFixedMath.toFixed(int256(10005), int256(1000));\n        gState.isInitialized = true;\n    }\n\n}\n",
		"interfaces/IStructs.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IStructs {\n\n    struct State {\n        bool isInitialized;\n        address xAddress;                                   // address of token x\n        address yAddress;                                   // address of token y\n        int256 x;                                           // contract's balance of token x (fixed point)\n        int256 y;                                           // contract's balance of token y (fixed point)\n        uint256 l;                                          // total liquidity token balance\n        int256 pBarX;                                       // expected future price of x in terms of y (fixed point)\n        uint256 rhoNumerator;\n        int256 rhoRatio;\n        int256 fee;\n        uint256 t;                                          // most recent block\n        mapping (address => uint256) liquidityBalance;\n        int256 beta;    // persistence of expercted price - the larger the more persistent\n        int256 eToKappa;   // clamp that prevents the expected price changing by a lot in an expected tx\n    }\n\n}\n",
		"libs/LibFixedMath.sol": "/*\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    //\n    int256 private constant MANTISSA_MASK = int256(0x7fffffffffffffffffffffffffffffff);\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n\n    function getRanges() internal pure returns (int256,int256,int256,int256) {\n        return (LN_MIN_VAL, LN_MAX_VAL, EXP_MIN_VAL, EXP_MAX_VAL);\n    }\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256 c) {\n        return (a <= b) ? a : b;\n    }\n\n    function square(int256 a) internal pure returns (int256 c) {\n        return mul(a, a);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            revert(\"sub: value too small\");\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n\n        int256 integerPart = _mul(FIXED_1, _mul(toInteger(a), toInteger(b))); // @TODO I think the FIXCED_1 should be moved in, in case one is a shrinking?\n        int256 lFractionPart = _mul(toMantissa(a), toInteger(b));\n        int256 rFractionPart = _mul(toInteger(a), toMantissa(b));\n        int256 bothFractionPart = _div(_mul(toMantissa(a), toMantissa(b)), FIXED_1);\n\n        return _add(_add(_add(integerPart, lFractionPart), rFractionPart), bothFractionPart);\n\n\n/* OLD\n        revert('got fraction part');\n\n\n        int256 base = FIXED_1;\n        if (b != 0) {\n            b /= 2**50;\n            base = 2**77;\n        }\n\n        int256 product = _mul(a, b);\n        c = product / base;\n*/\n    }\n\n    function pow(int256 base, int256 power) internal pure returns (int256) {\n        // KEY INSIGHT --> e^(0.5*ln(7)) - 1/e^(0.5*ln(1/7))\n        // So I think a^x = e^(xln(a)) = 1/e^(xln(1/a))\n\n        // 1 Sanity check on `ln`\n        int256 ePower;\n        bool invert;\n        if (base <= 0) {\n            revert('Invalid ln() value');\n        } else if (base < FIXED_1) {\n            ePower = mul(power, ln(base));\n        } else {\n            // Make smaller\n            ePower = mul(power, ln(_div(FIXED_1, base)));\n            invert = true;\n        }\n\n        // 2 Sanity check on ePower\\\n        if (ePower < 0) {\n            invert = invert ? false : true;\n            ePower = abs(ePower);\n        }\n\n        // Comput e^ePower\n        // Key Insight --> e^x = 1/e^(-x)\n        /*\n        int256 exp;\n        if (ePower < FIXED_1) {\n            return exp(ePower);\n        } else {\n            return div(FIXED_1, )\n        }\n        */\n        return exp(ePower);\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        int256 aInteger = toInteger(a);\n        if (aInteger != 0) {\n            return _mul(toInteger(a), _div(_mul(a, _div(FIXED_1, toInteger(a))), b));\n        } else {\n            return _div(_mul(a, FIXED_1), b);\n        }\n\n     //  return\n\n\n       /* int256 integerPart = _mul(toInteger(a), _div(FIXED_1, toInteger(b))));\n        int256 fractionPart = 0;//_div(_mul(toMantissa(a), FIXED_1), b);\n        return _add(integerPart, fractionPart);*/\n\n\n       // c = _div(mul(a, FIXED_1), b);\n\n        //c = _div(_mul(a, FIXED_1 / 2**50), b) * 2**50;\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            revert(\"uintMul: overflow\");\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n           revert(\"abs: value too small\");\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed: value cannot be less than zero\");\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            revert(\"toFixed(uint,uint): numerator cannot be less than zero\");\n        }\n        if (int256(d) < int256(0)) {\n            revert(\"toFixed(uint,uint): denominator cannot be less than zero\");\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    function toMantissa(int256 f) internal pure returns (int256 n) {\n        return f > 0 ? (f & MANTISSA_MASK) : -(-f & MANTISSA_MASK);\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            revert(\"ln: value too large\");\n        }\n        if (x <= 0) {\n            revert(\"ln: value too small\");\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n             revert(\"exp: value too small\");\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n             revert(\"_mul: overflow\");\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            revert(\"_div: divide by zero\");\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n           revert(\"_div: overflow\");\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            revert(\"_add: overflow\");\n        }\n    }\n}",
		"libs/LibScamMath.sol": "pragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\nlibrary LibScamMath {\n\n    using LibFixedMath for int256;\n\n    event TestMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio,\n        int256 result\n    );\n\n    /// @dev computes midpoint, inputs are all fixed point values.\n    function computeMidpointOnBondCurve(\n        int256 a,\n        int256 b,\n        int256 pBarA,\n        int256 rhoRatio\n    )\n        internal\n        returns (int256 result)\n    {\n        int term0 = pBarA.mul(a);\n        int term1A = b.div(term0);\n        int term1B = term0.div(b);\n        int term2 = LibFixedMath.one().sub(rhoRatio);\n        int256 term3;\n        if (term1A < LibFixedMath.one()) {\n            term3 = term1A.ln().mul(term2).exp();\n        } else {\n            term3 = LibFixedMath.one().div(\n                term1B.ln().mul(term2).exp()\n            );\n        }\n        result = term3.mul(pBarA);\n\n/*\n        emit TestMidpointOnBondCurve(\n            a,\n            b,\n            pBarA,\n            rhoRatio,\n            result.toInteger()\n        );\n        */\n\n        return result;\n    }\n\n    function computeNewPBarA(\n        uint256 t,\n        uint256 newT,\n        int256 beta,\n        int256 pA,\n        int256 pBarA\n    )\n        internal\n        returns (int256)\n    {\n        int256 deltaT = LibFixedMath.toFixed(newT - t);\n        int256 betaToDeltaT = deltaT.mul(beta.ln()).exp();\n        int256 oneMinusBToDeltaT = LibFixedMath.one().sub(betaToDeltaT);\n        int256 term1 = pA.mul(oneMinusBToDeltaT);\n        int256 term2 = pBarA.mul(betaToDeltaT);\n\n        int256 term3Denominator = LibFixedMath.add(\n            oneMinusBToDeltaT.mul(pBarA),\n            betaToDeltaT.mul(pA)\n        );\n        int256 term3 = pA.mul(pBarA).div(term3Denominator);\n        int256 result = term1.add(term2).add(term3).div(LibFixedMath.toFixed(int256(2)));\n        return result;\n    }\n\n    function computeMidpoint(\n        int256 a,\n        int256 b\n    )\n        internal\n        returns (int256 midpoint)\n    {\n        return a.add(b).div(LibFixedMath.one().add(LibFixedMath.one())); // @todo store FIXED_2 as a constant.\n    }\n\n    /// @dev Hardcoded for rhoNumerator = 99\n    function computeBaseToNinetyNine(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        // Hack.gif ToDaMoon.gif TopKek.gif\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToNinetySix = baseToFourtyEight.mul(baseToFourtyEight);\n        int256 baseToNinetyNine = baseToNinetySix.mul(baseCubed);\n        return baseToNinetyNine;\n    }\n\n     /// @dev Computes base^100\n    function computeBaseToOneHundred(\n        int256 base\n    )\n        internal\n        returns (int256)\n    {\n        int256 baseSquared = base.mul(base);\n        int256 baseCubed = base.mul(baseSquared);\n        int256 baseToSix = baseCubed.mul(baseCubed);\n        int256 baseToTwelve = baseToSix.mul(baseToSix);\n        int256 baseToTwentyFour = baseToTwelve.mul(baseToTwelve);\n        int256 baseToFourtyEight = baseToTwentyFour.mul(baseToTwentyFour);\n        int256 baseToFifty = baseToFourtyEight.mul(baseSquared);\n        int256 baseToHundred = baseToFifty.mul(baseToFifty);\n        return baseToHundred;\n    }\n\n    function fastExponentiation(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n\n        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else if (y % 2 == 0) {\n            return fastExponentiation(x * x, y / 2);\n        } else {\n            return x * fastExponentiation(x * x, (y - 1) / 2);\n        }\n    }\n\n    function tokenToFixed(uint256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (int256 fixedAmount)\n    {\n        return LibFixedMath.toFixed(amount, 10**nDecimals);\n    }\n\n    function tokenFromFixed(int256 amount, uint256 nDecimals)\n        internal\n        pure\n        returns (uint256 tokenAmount)\n    {\n        return uint256((amount * int256(10**nDecimals)).toInteger());\n    }\n}\n",
		"core/Ownable.sol": "\npragma solidity ^0.5.9;\n\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(\n        address oldOwner,\n        address newOwner\n    );\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert('TransferOwnerToZeroError');\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            revert('OnlyOwnerError');\n        }\n    }\n}"
	},
	"sourceTreeHashHex": "0x53dfd08313ee29ee876dacf73e1df77a5f8f2164bffe4008e7e94a8a267f2aea",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.12+commit.7709ece9.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"chains": {}
}